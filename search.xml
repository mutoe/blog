<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>手把手带你实践 TDD Nestjs Realworld 项目 - 1. 环境搭建篇</title>
    <url>//2019/TDD-nestjs-realworld-example-app-1/</url>
    <content><![CDATA[<p>emmm, 最近计划着学习后端，本来想从 Java 开始，奈何新的知识点一股脑涌进来，只知道教程怎么做，而不说为什么，很是迷茫。</p>
<p>于是想从熟悉的技术栈开始，结合最近学习的知识（TDD、Docker、GitHub Actions）和想学的知识（NestJS、Postgres、Swagger）一步一步巩固和学习。</p>
<p>顺便记录下来沉淀和输出自己的知识，也希望能帮到大家少走一些弯路，告别 2019，迎接 2020！</p>
<h1 id="0-内容预告"><a href="#0-内容预告" class="headerlink" title="0. 内容预告">0. 内容预告</a></h1><p>我们这次将要实现的系统是 <a href="https://preact-realworld.mutoe.com/">Conduit</a> 的 API 部分，前些时间我已经 TDD 实践实现了 <a href="https://github.com/mutoe/preact-realworld-example-app">Conduit 的前端部分</a>，技术栈选择了 Preact.</p>
<p>Conduit 是什么，这是一个基于 <a href="https://github.com/gothinkster/realworld">Realworld</a> 的示例项目。Realworld 集合了现今大部分的前后端框架，他们用不同的语言和技术展实现了同一个系统，也就是我们这次要做的 Conduit。</p>
<p>当然，Realworld 现在也有 NestJS 的实现，不过既然是结合自己的知识点来学，当然不能照抄啦，假装网友们还没用 NestJS 实现它好啦，[偷笑][偷笑]</p>
<p>这次用到的技术栈有：<code>Nestjs</code> <code>TypeScript</code> <code>Postgres</code> <code>Jest</code> <code>Docker</code> <code>Github Actions</code> <code>Swagger</code> <code>ESLint</code> , 然后我们会以 TDD 的方式进行开发，遵循“红-绿-重构”的方式一步一步的完成我们的项目。</p>
<p>好，话不多说，赶紧进入实战演练吧！</p>
<span id="more"></span>

<h1 id="1-开发环境搭建"><a href="#1-开发环境搭建" class="headerlink" title="1. 开发环境搭建">1. 开发环境搭建</a></h1><h2 id="1-1-前置内容准备"><a href="#1-1-前置内容准备" class="headerlink" title="1.1 前置内容准备">1.1 前置内容准备</a></h2><p>在教程开始前，我们假定你已经安装了以下环境并且了解这些环境的基本知识。</p>
<ul>
<li>Nodejs</li>
<li>Yarn</li>
<li>Docker</li>
<li>Postgres</li>
<li>GitHub 仓库</li>
<li>一个趁手的编辑器</li>
</ul>
<blockquote>
<p>其中 Docker 是可选的，不懂或者不想用也没关系，跟着做或跳过就好。</p>
</blockquote>
<h2 id="1-2-创建-NestJS-项目"><a href="#1-2-创建-NestJS-项目" class="headerlink" title="1.2 创建 NestJS 项目">1.2 创建 NestJS 项目</a></h2><p>打开命令行，进入到项目目录，输入以下命令全局安装 nestjs 命令行工具并且创建一个新的 nestjs 项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add @nestjs/cli</span><br><span class="line">nest new nestjs-realworld-example-app</span><br></pre></td></tr></table></figure>

<p>出现 <code>Which package manager would you to use</code> 时，选择 <code>yarn</code></p>
<p>稍等一会你会得到这样一个目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nestjs-realworld-example-app</span><br><span class="line">├── .gitignore</span><br><span class="line">├── .prettierrc</span><br><span class="line">├── README.md</span><br><span class="line">├── nest-cli.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── app.controller.spec.ts</span><br><span class="line">│   ├── app.controller.ts</span><br><span class="line">│   ├── app.module.ts</span><br><span class="line">│   ├── app.service.ts</span><br><span class="line">│   └── main.ts</span><br><span class="line">├── test</span><br><span class="line">│   ├── app.e2e-spec.ts</span><br><span class="line">│   └── jest-e2e.json</span><br><span class="line">├── tsconfig.build.json</span><br><span class="line">├── tsconfig.json</span><br><span class="line">├── tslint.json</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure>

<h2 id="1-3-修改-Lint-工具"><a href="#1-3-修改-Lint-工具" class="headerlink" title="1.3 修改 Lint 工具">1.3 修改 Lint 工具</a></h2><p>我们把 nestjs cli 默认生成的 <code>prettier</code> 和 <code>tslint</code> 移除，用 <code>typescript-eslint</code> 和 <code>standard</code> 代替</p>
<blockquote>
<p>WHY?</p>
<p>TypeScript 官方已经放弃了 TSLint 的支持，选用了 ESLint 作为下一代的语法风格检查工具，<a href="https://github.com/palantir/tslint#tslint">参考这里</a></p>
</blockquote>
<p>执行以下命令安装 ESLint 相关依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nestjs-realworld-example-app</span><br><span class="line">yarn add -D eslint eslint-plugin-jest @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br></pre></td></tr></table></figure>

<p>然后安装 standard 相关的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add -D eslint-config-standard eslint-plugin-import eslint-plugin-node eslint-plugin-promise eslint-plugin-standard</span><br></pre></td></tr></table></figure>

<p>然后删除 tslint 和 prettier 相关文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f .prettierrc tslint.json</span><br></pre></td></tr></table></figure>

<p>修改 <code>package.json</code></p>
<blockquote>
<p>请注意，下面示例的内容为 diff 格式，为了方便比较修改的内容，红色代表被移除的行，绿色代表新增的行，本系列文章不再赘述。</p>
</blockquote>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="deletion">-   &quot;format&quot;: &quot;prettier --write \&quot;src/**/*.ts\&quot; \&quot;test/**/*.ts\&quot;&quot;,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="deletion">-   &quot;lint&quot;: &quot;tslint -p tsconfig.json -c tslint.json&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;lint&quot;: &quot;eslint &#x27;**/*.ts&#x27;&quot;,</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;jest&quot;: &quot;^24.9.0&quot;,</span><br><span class="line"><span class="deletion">-   &quot;prettier&quot;: &quot;^1.18.2&quot;,</span></span><br><span class="line">    &quot;supertest&quot;: &quot;^4.0.2&quot;,</span><br><span class="line">    &quot;ts-jest&quot;: &quot;^24.1.0&quot;,</span><br><span class="line">    &quot;ts-loader&quot;: &quot;^6.1.1&quot;,</span><br><span class="line">    &quot;ts-node&quot;: &quot;^8.4.1&quot;,</span><br><span class="line">    &quot;tsconfig-paths&quot;: &quot;^3.9.0&quot;,</span><br><span class="line"><span class="deletion">-   &quot;tslint&quot;: &quot;^5.20.0&quot;,</span></span><br><span class="line">    &quot;typescript&quot;: &quot;^3.6.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="addition">+ &quot;eslintConfig&quot;: &#123;</span></span><br><span class="line"><span class="addition">+   &quot;root&quot;: true,</span></span><br><span class="line"><span class="addition">+   &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;parserOptions&quot;: &#123;</span></span><br><span class="line"><span class="addition">+     &quot;project&quot;: &quot;./tsconfig.json&quot;,</span></span><br><span class="line"><span class="addition">+     &quot;tsconfigRootDir&quot;: &quot;./&quot;</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line"><span class="addition">+   &quot;plugins&quot;: [</span></span><br><span class="line"><span class="addition">+     &quot;@typescript-eslint&quot;,</span></span><br><span class="line"><span class="addition">+     &quot;jest&quot;</span></span><br><span class="line"><span class="addition">+   ],</span></span><br><span class="line"><span class="addition">+   &quot;extends&quot;: [</span></span><br><span class="line"><span class="addition">+     &quot;plugin:@typescript-eslint/recommended&quot;,</span></span><br><span class="line"><span class="addition">+     &quot;plugin:jest/recommended&quot;,</span></span><br><span class="line"><span class="addition">+     &quot;standard&quot;</span></span><br><span class="line"><span class="addition">+   ],</span></span><br><span class="line"><span class="addition">+   &quot;rules&quot;: &#123;</span></span><br><span class="line"><span class="addition">+     &quot;comma-dangle&quot;: [</span></span><br><span class="line"><span class="addition">+       &quot;error&quot;,</span></span><br><span class="line"><span class="addition">+       &quot;always-multiple&quot;</span></span><br><span class="line"><span class="addition">+     ],</span></span><br><span class="line"><span class="addition">+     &quot;@typescript-eslint/explicit-function-return-type&quot;: &quot;off&quot;,</span></span><br><span class="line"><span class="addition">+     &quot;jest/expect-expect&quot;: &quot;off&quot;</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line"><span class="addition">+ &#125;,</span></span><br><span class="line"><span class="addition">+ &quot;eslintIgnore&quot;: [</span></span><br><span class="line"><span class="addition">+   &quot;node_modules&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;dist&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;coverage&quot;</span></span><br><span class="line"><span class="addition">+ ],</span></span><br><span class="line">  &quot;jest&quot;: &#123;</span><br><span class="line">    &quot;moduleFileExtensions&quot;: [</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>这一步执行完成之后，我们执行下面的命令来自动格式化我们的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn lint --fix</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你使用的 IDE 是 Intellij 家族的，那么还会自动弹出提示框来读取 eslint 配置</p>
</blockquote>
<p>到这里，我们的本地开发准备工作就完成啦，你可以运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<p>访问 3000 端口，如果出现了 “Hello world” 说明我们到这一步就没问题了</p>
<h1 id="2-Docker-镜像生成"><a href="#2-Docker-镜像生成" class="headerlink" title="2. Docker 镜像生成">2. Docker 镜像生成</a></h1><p>为了保证部署与开发环境统一，我们使用 Docker 作为我们的容器</p>
<h2 id="2-1-编写-Dockerfile"><a href="#2-1-编写-Dockerfile" class="headerlink" title="2.1 编写 Dockerfile">2.1 编写 Dockerfile</a></h2><p>我们在根目录下创建一个 <code>.dockerignore</code> 文件，内容如下</p>
<figure class="highlight plaintext"><figcaption><span>.dockerignore</span></figcaption><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">.git</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">/coverage</span><br></pre></td></tr></table></figure>

<p>然后我们在根目录继续创建一个 <code>Dockerfile</code> 文件，内容如下</p>
<figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">12</span>-alpine AS dependencies</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json yarn.lock ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yarn install --production</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json dist ./</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=dependencies /usr/src/app/node_modules ./node_modules</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;node&quot;</span>, <span class="string">&quot;dist/main&quot;</span> ]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了避免镜像中打包冗余的文件，我们使用多阶段构建镜像</p>
</blockquote>
<h2 id="2-2-打包镜像"><a href="#2-2-打包镜像" class="headerlink" title="2.2 打包镜像">2.2 打包镜像</a></h2><blockquote>
<p>在此步骤之前,请确认你本地已经登录了 docker 账号</p>
</blockquote>
<p>为了方便我们对镜像版本管理，我们在 <code>package.json</code> 中新建一个脚本来打包镜像</p>
<figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;prebuild&quot;: &quot;rimraf dist&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;nest build&quot;,</span><br><span class="line"><span class="addition">+   &quot;build:docker&quot;: &quot;yarn build &amp;&amp; docker build -t mutoe/$npm_package_name:latest . &amp;&amp; docker push mutoe/$npm_package_name:latest&quot;,</span></span><br><span class="line">    &quot;start&quot;: &quot;nest start&quot;,</span><br><span class="line">    &quot;start:dev&quot;: &quot;nest start --watch&quot;,</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意的是，我们在本地 build 好 dist 目录后，在 docker 中下载了生产环境所需要的依赖，然后一并进行打包。这样就可以避免我们在 docker 中全量下载依赖了，有效的节约了构建镜像的时间。<br>但是这种做法必须保证你进行打包的 node 环境和 docker 中的 node 版本一致，否则有可能打包出来的是不可用的，这样就失去了使用 docker 的意义。</p>
</blockquote>
<p>然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn build:docker</span><br></pre></td></tr></table></figure>

<p>可以看到，我们用多阶段构建的方法打包出来的镜像有 92M</p>
<pre><code>$ docker images
REPOSITORY                           TAG                 IMAGE ID            CREATED             SIZE
mutoe/nestjs-realworld-example-app   latest              b7cedde8299d        5 seconds ago       92.2MB
</code></pre>
<p>然后登录 <a href="https://hub.docker.com/repositories">docker hub</a>, 最终压缩后的 <a href="https://hub.docker.com/layers/mutoe/nestjs-realworld-example-app/0.1.0/images/sha256-c5e4a523f383751c2eb69a377801039995f206ad3b7e10f565b2880fa032837e">docker 镜像</a>大小只有 28M</p>
<h1 id="3-Pipeline-搭建"><a href="#3-Pipeline-搭建" class="headerlink" title="3. Pipeline 搭建">3. Pipeline 搭建</a></h1><h2 id="3-1-基本功能实现"><a href="#3-1-基本功能实现" class="headerlink" title="3.1 基本功能实现">3.1 基本功能实现</a></h2><p>我们选用 github 新出的功能 GitHub Actions 来作为我们项目的 Pipeline 工具。</p>
<p>我们在根目录下创建以下目录结构</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"> .</span><br><span class="line"> ├── .dockerignore</span><br><span class="line"><span class="addition">+├── .github</span></span><br><span class="line"><span class="addition">+│   └── workflows</span></span><br><span class="line"><span class="addition">+│       └── nodejs.yml</span></span><br><span class="line"> ├── .gitignore</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>

<p>编辑 <code>nodejs.yml</code></p>
<figure class="highlight yml"><figcaption><span>nodejs.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">CI:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Nodejs</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">install</span> <span class="string">--skip-integrity-check</span> <span class="string">--non-interactive</span> <span class="string">--no-progress</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Lint</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">lint</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中 “Install dependencies” 部分,我们给 <code>yarn install</code> 添加了一些参数，他们是用来在 CI 环境下移除掉一些需要交互的内容。</p>
</blockquote>
<p>上面就配置了一个最简单的 workflow，你每次推代码的时候，就会自动触发 github actions，来 lint 和 test 你的代码。</p>
<h2 id="3-2-增加构建缓存"><a href="#3-2-增加构建缓存" class="headerlink" title="3.2 增加构建缓存">3.2 增加构建缓存</a></h2><p>不过你会发现，我们每次推代码都会重新安装依赖，这会花费很长时间。</p>
<p>不过没关系，github actions 市场上有这样一个插件 <code>actions/cache</code> 这个可以用来缓存每次运行 CI 的产物。</p>
<p>我们安装依赖前添加一些内容以缓存 yarn 的依赖</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">      - name: Setup Nodejs</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: 12</span><br><span class="line"></span><br><span class="line"><span class="addition">+     - name: Get yarn cache</span></span><br><span class="line"><span class="addition">+       id: yarn-cache</span></span><br><span class="line"><span class="addition">+       run: echo &quot;::set-output name=dir::$(yarn cache dir)&quot;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+     - uses: actions/cache@v1</span></span><br><span class="line"><span class="addition">+       with:</span></span><br><span class="line"><span class="addition">+         path: $&#123;&#123; steps.yarn-cache.outputs.dir &#125;&#125;</span></span><br><span class="line"><span class="addition">+         key: $&#123;&#123; runner.os &#125;&#125;-yarn-$&#123;&#123; hashFiles(&#x27;**/yarn.lock&#x27;) &#125;&#125;</span></span><br><span class="line"><span class="addition">+         restore-keys: |</span></span><br><span class="line"><span class="addition">+           $&#123;&#123; runner.os &#125;&#125;-yarn-</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: yarn install --skip-integrity-check --non-interactive --no-progress</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重新提交几次代码，你会发现后面的步骤会跳过耗时很长的安装依赖步骤，这很 Nice！</p>
<h2 id="3-3-自动构建并发布-Docker-镜像"><a href="#3-3-自动构建并发布-Docker-镜像" class="headerlink" title="3.3 自动构建并发布 Docker 镜像">3.3 自动构建并发布 Docker 镜像</a></h2><p>为了在 GitHub Actions 里发布 docker 镜像, 我们需要使用 GitHub 市场中的 <a href="https://github.com/marketplace/actions/docker-login">Docker Login</a> 插件,
打开我们刚才的 action 配置文件, 在文件末尾追加下面两段</p>
<figure class="highlight diff"><figcaption><span>nodejs.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">      - name: Lint</span><br><span class="line">        run: yarn lint</span><br><span class="line"></span><br><span class="line">      - name: Test</span><br><span class="line">        run: yarn test</span><br><span class="line"></span><br><span class="line"><span class="addition">+     - uses: azure/docker-login@v1</span></span><br><span class="line"><span class="addition">+       with:</span></span><br><span class="line"><span class="addition">+         username: $&#123;&#123; secrets.DOCKER_USERNAME &#125;&#125;</span></span><br><span class="line"><span class="addition">+         password: $&#123;&#123; secrets.DOCKER_PASSWORD &#125;&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+     - name: Build docker image</span></span><br><span class="line"><span class="addition">+       run: yarn build:docker</span></span><br></pre></td></tr></table></figure>

<p>接下来我们需要在 GitHub 中设置我们的 secrets</p>
<p>在 github 中打开我们的项目,然后点击 <code>Settings</code>,在左侧选择 <code>Secrets</code>, 然后点击 <code>Add a new secret</code> 分别添加我们的 docker 账号和密码, secret key 和上面设置的是一样的哦 (<code>DOCKER_USERNAME</code> <code>DOCKER_PASSWORD</code>)</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/github-secrets.png" alt="github secrets"></p>
<p>设置完毕后,推代码, 然后进入 github actions 页面观察我们的构建, 最后会是这个样子</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/after-action-triggered.png" alt="after action triggered"></p>
<!-- TODO: 增加 Postgres 环境 -->

<p>如果你看到上面这个画面, 恭喜你, 我们的 Pipeline 部署成功啦!</p>
<p>所有步骤完成之后, 最终我们的项目应该长<a href="https://github.com/mutoe/nestjs-realworld-example-app/tree/2a7c8da63e6c0d62902ea510dd0eca98507ec7e8">这个样子</a>. (这是项目当前的快照, 你可以在任何时候查看它)</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://docs.nestjs.com/first-steps">First steps - NestJS Document</a></li>
<li><a href="https://medium.com/palantir/tslint-in-2019-1a144c2317a9">TSLint in 2019</a></li>
<li><a href="https://dev.to/itmayziii/typescript-eslint-and-standardjs-5hmd">Typescript + ESLint and StandardJS </a></li>
<li><a href="https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/">把一个 Node.js web 应用程序给 Docker 化</a></li>
<li><a href="https://juejin.im/post/5cada976f265da035e210bf8">Nodejs Docker 镜像体积优化实践</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nestjs</tag>
        <tag>TypeScript</tag>
        <tag>Postgres</tag>
        <tag>TypeORM</tag>
        <tag>TDD</tag>
        <tag>Jest</tag>
        <tag>GitHub Actions</tag>
        <tag>Swagger</tag>
        <tag>ESLint</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手带你实践 TDD Nestjs Realworld 项目 - 2. 数据库连接</title>
    <url>//2020/TDD-nestjs-realworld-example-app-2/</url>
    <content><![CDATA[<p>上一个文章我们介绍了如何搭建一个开发环境和 Pipeline, 这篇文章开始我们将正式的用 TDD 的模式实现一个后端项目.</p>
<h1 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖">1. 安装依赖</a></h1><p>我们选用了 Postgres 作为我们的数据库, 操作数据库的 ORM 我们选用 TypeORM, 这是一个 TypeScript 友好的 ORM, 并且 nest 也提供了非常便利的集成方法.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @nestjs/typeorm typeorm pg</span><br></pre></td></tr></table></figure>

<h1 id="2-接入-TypeORM"><a href="#2-接入-TypeORM" class="headerlink" title="2. 接入 TypeORM">2. 接入 TypeORM</a></h1><p>编辑 <code>app.module.ts</code></p>
<figure class="highlight ts"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">TypeOrmModule</span>.<span class="title function_">forRoot</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">      <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">5432</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;realworld&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">      <span class="attr">database</span>: <span class="string">&#x27;nestjs&#x27;</span>,</span><br><span class="line">      <span class="attr">entities</span>: [<span class="string">&#x27;dist/**/*.entity&#123;.ts,.js&#125;&#x27;</span>],</span><br><span class="line">      <span class="attr">synchronize</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3. 创建数据库">3. 创建数据库</a></h1><p>我们启动我们的 Postgres 服务, 然后创建一个用户 <code>realworld</code> 和数据库 <code>nestjs</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psql postgres</span><br><span class="line"></span><br><span class="line">CREATE ROLE realworld WITH LOGIN PASSWORD <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">CREATE DATABASE nestjs OWNER realworld;</span><br><span class="line">GRANT ALL PRIVILEGES ON DATABASE nestjs TO realworld;</span><br></pre></td></tr></table></figure>

<h1 id="4-定义用户表"><a href="#4-定义用户表" class="headerlink" title="4. 定义用户表">4. 定义用户表</a></h1><p>我们接下来定义一个用户表, TypeORM 支持仓库设计模式(Repository design pattern), 每个实体都有自己的的仓库.</p>
<p>首先执行下面的命令来创建用户 module 和 service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest g module user</span><br><span class="line">nest g service user</span><br></pre></td></tr></table></figure>

<p>然后在自动生成的 <code>src/user</code> 目录下创建一个 <code>user.entity.ts</code> 文件</p>
<figure class="highlight ts"><figcaption><span>user.entity.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Column</span>, <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nullable = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>()</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">length</span>: <span class="number">80</span> &#125;)</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">length</span>: <span class="number">20</span> &#125;)</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; nullable, <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span> &#125;)</span><br><span class="line">  <span class="attr">bio</span>: <span class="literal">null</span> | <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; nullable, <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span> &#125;)</span><br><span class="line">  <span class="attr">image</span>: <span class="literal">null</span> | <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后编辑 <code>user.service.ts</code>, 注入 userRepository 在 UserService 中</p>
<figure class="highlight ts"><figcaption><span>user.service.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InjectRepository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Repository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@InjectRepository</span>(User)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> userRepository: Repository&lt;User&gt;,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后 <code>user.module.ts</code> 中导入 <code>User</code> entity</p>
<figure class="highlight ts"><figcaption><span>user.module.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">User</span>])],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>最后, 启动服务, 我们就可以看到, 数据库表中已经多了一张 user 表啦</p>
<h1 id="5-实现注册功能"><a href="#5-实现注册功能" class="headerlink" title="5. 实现注册功能">5. 实现注册功能</a></h1><p>现在所有的东西都准备好了, 接下来就在 user service 中实现一个注册方法来看看我们是怎么来做 TDD 的.</p>
<blockquote>
<p>不了解 TDD 的同学这里简单介绍一下 TDD<br>TDD 要求我们先设计 Task, 将我们的需求拆成一个个的 Task, 然后每个 Task 写至少一个测试用例,解决语法错误的问题(如将要调用的方法还未声明)后, 跑一遍测试, 这时测试应该是“红”(不通过)的, 然后开始写实现, 写到刚好“绿”(通过测试)为止, 不要写多余的方法. 经过“红-绿”后,对自己的代码进行重构. 这个过程就是 TDD 三角 “红-绿-重构”</p>
</blockquote>
<p>我们的代码应当按照 TDD 金字塔来设计: 首先要保证我们的代码通过测试, 其次最求最小元素实现功能、保证传达测试的意图,最后消除重复的代码.</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/TDD-pyramid.png" alt="TDD 金字塔" title="TDD 金字塔"></p>
<h2 id="5-1-添加路由"><a href="#5-1-添加路由" class="headerlink" title="5.1 添加路由">5.1 添加路由</a></h2><p>首先我们要在应用添加一个注册入口, 根据 ConduitAPI 需求, 用户注册的路由是 POST <code>/auth/register</code>, request 和 response 应该长这样</p>
<figure class="highlight json"><figcaption><span>request body</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mutoe@foxmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mutoe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12345678&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><figcaption><span>response body</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mutoe@foxmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createdAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-10-22T03:22:54.038Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-10-22T03:22:54.046Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mutoe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bio&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1N...&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>根据软件设计三层架构(User Interface Layer, Business Logic Layer, Data Access Layer), 我们知道, 在 Controller 中需要调用用户相关的 Service, 那我们测 Controller 时只需要断言是否调用了 Service 即可, 我们也信任 Service 返回的内容是我们需要的, 因为我们也会通过单元测试验证 Service 返回的内容.</p>
<p>打开 <code>app.controller.spec.ts</code>, 添加按照 Given-When-Then 以下测试用例</p>
<figure class="highlight diff"><figcaption><span>app.controller.spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">  import &#123; Test, TestingModule &#125; from &#x27;@nestjs/testing&#x27;</span><br><span class="line">  import &#123; AppController &#125; from &#x27;./app.controller&#x27;</span><br><span class="line"><span class="deletion">- import &#123; AppService &#125; from &#x27;./app.service&#x27;</span></span><br><span class="line"><span class="addition">+ import &#123; UserService &#125; from &#x27;./user/user.service&#x27;</span></span><br><span class="line"></span><br><span class="line">  describe(&#x27;# AppController&#x27;, () =&gt; &#123;</span><br><span class="line">    let appController: AppController</span><br><span class="line"><span class="addition">+   let userService: UserService</span></span><br><span class="line"></span><br><span class="line">    beforeEach(async () =&gt; &#123;</span><br><span class="line">      const app: TestingModule = await Test.createTestingModule(&#123;</span><br><span class="line">        controllers: [AppController],</span><br><span class="line"><span class="deletion">-       providers: [AppService],</span></span><br><span class="line"><span class="addition">+       providers: [</span></span><br><span class="line"><span class="addition">+         UserService,</span></span><br><span class="line"><span class="addition">+         &#123;</span></span><br><span class="line"><span class="addition">+           provide: getRepositoryToken(User),</span></span><br><span class="line"><span class="addition">+           useClass: Repository,</span></span><br><span class="line"><span class="addition">+         &#125;,</span></span><br><span class="line"><span class="addition">+       ],</span></span><br><span class="line">      &#125;).compile()</span><br><span class="line"></span><br><span class="line">      appController = app.get(AppController)</span><br><span class="line"><span class="addition">+     userService = app.get(UserService)</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="addition">+   describe(&#x27;Register&#x27;, function () &#123;</span></span><br><span class="line"><span class="addition">+     it(&#x27;should return user response&#x27;, async function () &#123;</span></span><br><span class="line"><span class="addition">+       // Given</span></span><br><span class="line"><span class="addition">+       const requestBody = &#123;</span></span><br><span class="line"><span class="addition">+         email: &#x27;mutoe@foxmail.com&#x27;,</span></span><br><span class="line"><span class="addition">+         username: &#x27;mutoe&#x27;,</span></span><br><span class="line"><span class="addition">+         password: &#x27;12345678&#x27;,</span></span><br><span class="line"><span class="addition">+       &#125;</span></span><br><span class="line"><span class="addition">+       jest.spyOn(userService, &#x27;createUser&#x27;).mockResolvedValue(&#123; user: &#123;&#125; &#125;)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+       // When</span></span><br><span class="line"><span class="addition">+       const response = await appController.register(requestBody)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+       // Then</span></span><br><span class="line"><span class="addition">+       expect(userService.createUser).toBeCalledTimes(1)</span></span><br><span class="line"><span class="addition">+       expect(response).toHaveProperty(&#x27;user&#x27;, expect.any(Object))</span></span><br><span class="line"><span class="addition">+     &#125;)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>简单解释一下上面的代码</p>
<p>Given 部分我们首先构造了一个 request body, 方便我们在接下来的调用时使用. 然后我们将 <code>userService</code> 下的 <code>createUser</code> 方法 mock 掉</p>
<p>接下来我们要消除语法错误, 我们可以看到, <code>appController</code> 下是没有 <code>register</code> 这个方法的, 而且 <code>userService</code> 下也没有 <code>createUser</code> 方法.</p>
<p>我们进入 <code>app.controller.ts</code> 声明一下 <code>register</code> 方法</p>
<figure class="highlight diff"><figcaption><span>app.controller.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">export class AppController &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="addition">+ @Post(&#x27;/auth/register&#x27;)</span></span><br><span class="line"><span class="addition">+ register (@Body() requestBody: &#123; email: string; username: string; password: string &#125;): any &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后进入 <code>user.service.ts</code> 声明一个 <code>createUser</code> 的方法</p>
<figure class="highlight diff"><figcaption><span>user.service.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">export class UserService &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="addition">+ async createUser (user: &#123; email: string; username: string; password: string &#125;): Promise&lt;any&gt; &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消除语法错误后, 我们就可以跑一下测试啦</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>好, 测试成功的失败了</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/test-failed.png" alt="Test failed"></p>
<p>这就是“红”的过程</p>
<p>接下来我们进行实现, 让测试变“绿”</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/green.png" alt="green"></p>
<figure class="highlight ts"><figcaption><span>app.controller.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Body</span>, <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Query</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user/user.service&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;/auth/register&#x27;</span>)</span><br><span class="line">  <span class="title function_">register</span>(</span><br><span class="line">    <span class="meta">@Body</span>() <span class="attr">requestBody</span>: &#123; <span class="attr">email</span>: <span class="built_in">string</span>; <span class="attr">username</span>: <span class="built_in">string</span>; <span class="attr">password</span>: <span class="built_in">string</span> &#125;,</span><br><span class="line">  ): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">createUser</span>(requestBody)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后 Run 一下测试, 当当当当~</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/test-passed.png" alt="Test passed"></p>
<p>好, 我们的 TDD Controller 就完成啦!</p>
<h2 id="5-2-创建用户"><a href="#5-2-创建用户" class="headerlink" title="5.2 创建用户">5.2 创建用户</a></h2><p>接下来的思路是一样的, 首先编写测试代码</p>
<figure class="highlight ts"><figcaption><span>user.service.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getRepositoryToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Repository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;UserService&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">service</span>: <span class="title class_">UserService</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">repository</span>: <span class="title class_">Repository</span>&lt;<span class="title class_">User</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">module</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">providers</span>: [</span><br><span class="line">        <span class="title class_">UserService</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">provide</span>: <span class="title function_">getRepositoryToken</span>(<span class="title class_">User</span>),</span><br><span class="line">          <span class="attr">useValue</span>: &#123;</span><br><span class="line">            <span class="attr">save</span>: jest.<span class="title function_">fn</span>(<span class="function">() =&gt;</span> <span class="literal">true</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;).<span class="title function_">compile</span>()</span><br><span class="line"></span><br><span class="line">    service = <span class="variable language_">module</span>.<span class="title function_">get</span>(<span class="title class_">UserService</span>)</span><br><span class="line">    repository = <span class="variable language_">module</span>.<span class="title function_">get</span>(<span class="title function_">getRepositoryToken</span>(<span class="title class_">User</span>))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should be defined&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(service).<span class="title function_">toBeDefined</span>()</span><br><span class="line">    <span class="title function_">expect</span>(repository).<span class="title function_">toBeDefined</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should create user correctly&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123;</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;mutoe@foxmail.com&#x27;</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mutoe&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> service.<span class="title function_">createUser</span>(user)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(repository.<span class="property">save</span>).<span class="title function_">toBeCalledWith</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="keyword">new</span> <span class="title class_">User</span>(), user))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>写实现</p>
<figure class="highlight ts"><figcaption><span>user.service.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InjectRepository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Repository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@InjectRepository</span>(User)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> userRepository: Repository&lt;User&gt;,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createUser</span>(<span class="params">userInfo: &#123; email: <span class="built_in">string</span>; username: <span class="built_in">string</span>; password: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">save</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="keyword">new</span> <span class="title class_">User</span>(), userInfo))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Run 一下测试, 单元测试应该是全通过的</p>
<h1 id="6-E2E-测试"><a href="#6-E2E-测试" class="headerlink" title="6. E2E 测试">6. E2E 测试</a></h1><p>接下来我们验证一下功能是不是正确, 发起一个真实的请求, 看看数据库是不是多了一个用户, 首先启动服务, 然后发起一个 POST 请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn start</span><br><span class="line">curl -X POST http://localhost:3000/auth/register -d <span class="string">&#x27;&#123;&quot;username&quot;:&quot;mutoe&quot;,&quot;email&quot;:&quot;mutoe@foxmail.com&quot;,&quot;password&quot;:&quot;12345678&quot;&#125;&#x27;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span></span><br></pre></td></tr></table></figure>

<p>应该会返回一个含有用户 ID 的 json 格式响应</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/json-response.png" alt="json response"></p>
<p>那我们总不能每次写完一个功能都手动测试一次吧! 这太 Low 了, 我们要自动化!</p>
<h2 id="6-1-创建测试数据库"><a href="#6-1-创建测试数据库" class="headerlink" title="6.1 创建测试数据库">6.1 创建测试数据库</a></h2><p>E2E 是连接的真实的数据库,所以我们要为了这些自动化测试创建一个用于单独的数据库, 避免影响我们开发环境的数据.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psql postgres</span><br><span class="line">CREATE DATABASE nestjs_test OWNER realworld;</span><br><span class="line">GRANT ALL PRIVILEGES ON DATABASE nestjs_test TO realworld;</span><br></pre></td></tr></table></figure>

<p>然后编辑 <code>app.e2e-spec.ts</code></p>
<figure class="highlight ts"><figcaption><span>app.e2e-spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> request <span class="keyword">from</span> <span class="string">&#x27;supertest&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/app.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span>, <span class="title class_">TypeOrmModuleOptions</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">ormConfig</span>: <span class="title class_">TypeOrmModuleOptions</span> = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">5432</span>,</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;realworld&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;nestjs_test&#x27;</span>,</span><br><span class="line">  <span class="attr">entities</span>: [<span class="string">&#x27;dist/**/*.entity&#123;.ts,.js&#125;&#x27;</span>],</span><br><span class="line">  <span class="attr">synchronize</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">dropSchema</span>: <span class="literal">true</span>, <span class="comment">// 这个选项将会在每次测试运行前扔掉所有数据,请不要连错数据库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;AppController (e2e)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> app</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">moduleFixture</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">TypeOrmModule</span>.<span class="title function_">forRoot</span>(ormConfig), <span class="title class_">AppModule</span>],</span><br><span class="line">    &#125;).<span class="title function_">compile</span>()</span><br><span class="line"></span><br><span class="line">    app = moduleFixture.<span class="title function_">createNestApplication</span>()</span><br><span class="line">    <span class="keyword">await</span> app.<span class="title function_">init</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterEach</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> app.<span class="title function_">close</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在每次 E2E 测试启动时, 都会自动连入我们的测试数据库</p>
<h2 id="6-2-编写-E2E-测试"><a href="#6-2-编写-E2E-测试" class="headerlink" title="6.2 编写 E2E 测试">6.2 编写 E2E 测试</a></h2><p>开始写我们的 E2E 测试</p>
<figure class="highlight ts"><figcaption><span>test/app.e2e-spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;/auth/register (POST)&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> requestBody = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;mutoe&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;mutoe@foxmail.com&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())</span><br><span class="line">    .<span class="title function_">post</span>(<span class="string">&#x27;/auth/register&#x27;</span>)</span><br><span class="line">    .<span class="title function_">send</span>(requestBody)</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="number">201</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">test</span>:e2e</span><br></pre></td></tr></table></figure>

<p>成功啦!</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/e2e-passed.png" alt="e2e passed"></p>
<p>好, 到这里, 我们这一章所有的内容就结束了, 如果你有什么疑惑和问题, 欢迎在下方留言.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://docs.nestjs.com/techniques/database">Database | NestJS</a></li>
<li><a href="https://wiki.postgresql.org/wiki/9.1%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0">数据库管理 | wiki.postgresql.org</a></li>
<li><a href="https://github.com/nestjs/nest/issues/1209">How to unit test controller | GitHub nestjs&#x2F;nest#1209</a></li>
<li><a href="https://www.carloscaballero.io/part-9-clock-in-out-system-testing-backend-unit-test-services/">Testing: Backend Testing - Unit Testing - Services</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nestjs</tag>
        <tag>TypeScript</tag>
        <tag>Postgres</tag>
        <tag>TypeORM</tag>
        <tag>TDD</tag>
        <tag>Jest</tag>
        <tag>GitHub Actions</tag>
        <tag>ESLint</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手带你实践 TDD Nestjs Realworld 项目 - 3. 鉴权认证</title>
    <url>//2020/TDD-nestjs-realworld-example-app-3/</url>
    <content><![CDATA[<p>上一章我们创建了一个用户表, 但是还没有实现真正的注册和登录. 要实现注册登录以及后续的权限校验, 我们还有一些工作要做.</p>
<p>目前有比较多的思路来对用户进行鉴权, 我们选用 Conduit 示例中展示的也是现在比较广泛的做法 JWT 进行认证.</p>
<p>要实现 JWT 鉴权, NestJS 为我们做好了大部分工作.</p>
<h1 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖">1. 安装依赖</a></h1><p>但是在这之前, 我们要先安装下面的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @nestjs/passport passport passport-local</span><br><span class="line">yarn add -D @types/passport-local</span><br></pre></td></tr></table></figure>

<p>Passport 你可以把它看作是一个小型的框架, 因为你可以通过一些简单的回调函数来进行配置. Passport 会在适当的时候对其进行调用.</p>
<p>而 <code>@nestjs/passport</code> 则对 Passport 进行了很好的集成.</p>
<span id="more"></span>

<h1 id="2-修改用户表"><a href="#2-修改用户表" class="headerlink" title="2. 修改用户表">2. 修改用户表</a></h1><p>我们还缺少用户密码存储的地方</p>
<p>我们在 <code>user.entity.ts</code> 增加一个密码字段</p>
<figure class="highlight diff"><figcaption><span>user.entity.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">export class User &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  @Column(&#123; length: 20 &#125;)</span><br><span class="line">  username: string</span><br><span class="line"></span><br><span class="line"><span class="addition">+ @Column()</span></span><br><span class="line"><span class="addition">+ password: string</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">  @Column(&#123; nullable, type: &#x27;text&#x27; &#125;)</span><br><span class="line">  bio: null | string</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后清空数据表, 重新请求 register 方法, 可以看到, 我们的密码字段自动更新在了表中</p>
<h1 id="3-创建-Auth-模块"><a href="#3-创建-Auth-模块" class="headerlink" title="3. 创建 Auth 模块">3. 创建 Auth 模块</a></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest g module auth</span><br><span class="line">nest g service auth</span><br></pre></td></tr></table></figure>

<p>我们的 AuthService 提供一个验证用户密码是否匹配的接口. 好, 先写测试</p>
<figure class="highlight ts"><figcaption><span>auth.service.spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.entity&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getRepositoryToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;AuthService&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">authService</span>: <span class="title class_">AuthService</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">userService</span>: <span class="title class_">UserService</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">module</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">providers</span>: [</span><br><span class="line">        <span class="title class_">UserService</span>,</span><br><span class="line">        <span class="title class_">AuthService</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">provide</span>: <span class="title function_">getRepositoryToken</span>(<span class="title class_">User</span>),</span><br><span class="line">          <span class="attr">useValue</span>: &#123;&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;).<span class="title function_">compile</span>()</span><br><span class="line"></span><br><span class="line">    authService = <span class="variable language_">module</span>.<span class="title function_">get</span>(<span class="title class_">AuthService</span>)</span><br><span class="line">    userService = <span class="variable language_">module</span>.<span class="title function_">get</span>(<span class="title class_">UserService</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should get user profile after validateUser&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> password = <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> username = <span class="string">&#x27;mutoe&#x27;</span></span><br><span class="line">    jest</span><br><span class="line">      .<span class="title function_">spyOn</span>(userService, <span class="string">&#x27;findOne&#x27;</span>)</span><br><span class="line">      .<span class="title function_">mockResolvedValue</span>(&#123; username, password &#125; <span class="keyword">as</span> <span class="title class_">User</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> authService.<span class="title function_">validateUser</span>(username, password)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(user).<span class="title function_">toHaveProperty</span>(<span class="string">&#x27;username&#x27;</span>, username)</span><br><span class="line">    <span class="title function_">expect</span>(user).<span class="property">not</span>.<span class="title function_">toHaveProperty</span>(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return null when invalid password&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    jest.<span class="title function_">spyOn</span>(userService, <span class="string">&#x27;findOne&#x27;</span>).<span class="title function_">mockResolvedValue</span>(<span class="literal">undefined</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> authService.<span class="title function_">validateUser</span>(<span class="string">&#x27;mutoe&#x27;</span>, <span class="string">&#x27;invalidPassword&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(result).<span class="title function_">toBeNull</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们期望 AuthService 中验证通过后, 返回的用户信息中不含有 <code>password</code> 字段; 如果密码输入错误, 应该返回 <code>null</code></p>
<p>然后写实现</p>
<figure class="highlight ts"><figcaption><span>auth.service.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.service&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">validateUser</span>(<span class="params">username: <span class="built_in">string</span>, password: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findOne</span>(username)</span><br><span class="line">    <span class="keyword">if</span> (user?.<span class="property">password</span> === password) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; password, ...profile &#125; = user</span><br><span class="line">      <span class="keyword">return</span> profile</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>你知道吗<br><code>user?.password</code> 是 TS3.7 的新语法: <a href="https://github.com/tc39/proposal-optional-chaining">“optional-chaining”</a>, 这个语法在 ES 中目前是 Stage4, 可以放心的在项目中使用.</p>
</blockquote>
<p>UserService 下没有实现 <code>findOne</code> ?, 写!</p>
<figure class="highlight ts"><figcaption><span>user.service.spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">module</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;</span><br><span class="line">    <span class="attr">providers</span>: [</span><br><span class="line">      <span class="title class_">UserService</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">provide</span>: <span class="title function_">getRepositoryToken</span>(<span class="title class_">User</span>),</span><br><span class="line">        <span class="attr">useValue</span>: &#123;</span><br><span class="line">          <span class="attr">save</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">          <span class="attr">findOne</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;).<span class="title function_">compile</span>()</span><br><span class="line"></span><br><span class="line">  service = <span class="variable language_">module</span>.<span class="title function_">get</span>(<span class="title class_">UserService</span>)</span><br><span class="line">  repository = <span class="variable language_">module</span>.<span class="title function_">get</span>(<span class="title function_">getRepositoryToken</span>(<span class="title class_">User</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should find user correctly&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;mutoe@foxmail.com&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;mutoe&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  jest.<span class="title function_">spyOn</span>(repository, <span class="string">&#x27;findOne&#x27;</span>).<span class="title function_">mockResolvedValue</span>(user <span class="keyword">as</span> <span class="title class_">User</span>)</span><br><span class="line">  <span class="keyword">const</span> userResult = <span class="keyword">await</span> service.<span class="title function_">findOne</span>(user.<span class="property">username</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(userResult).<span class="title function_">toBe</span>(user)</span><br><span class="line">  <span class="title function_">expect</span>(repository.<span class="property">findOne</span>).<span class="title function_">toBeCalledWith</span>(&#123;</span><br><span class="line">    <span class="attr">where</span>: &#123; <span class="attr">username</span>: user.<span class="property">username</span> &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight ts"><figcaption><span>user.service.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">findOne</span>(<span class="params">username: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">where</span>: &#123; username &#125; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<!-- TODO: 补充 e2e 测试 -->

<h1 id="4-密码散列和环境变量"><a href="#4-密码散列和环境变量" class="headerlink" title="4. 密码散列和环境变量">4. 密码散列和环境变量</a></h1><p>为了避免用户的明文密码暴露, 我们存在数据库的密码必须经过<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8">散列加密</a>.</p>
<p>我们使用 nodejs 自带的 crypto 库的 <code>cryptoHmac</code> 进行散列加密. 为了提高安全性, 我们还可以添加自己的加密 key, 这个 key 我们要放在环境变量中, 避免把它硬编码在代码中上传到代码库.</p>
<p>那如何做呢? 一种方法是创建我们的模版配置文件, 这个可以参考我以前写的帖子 <a href="/2016/manage-config-template-in-git/">在 Git 中使用模版来管理配置文件</a>, 另一种方法就是使用 <code>dotenv</code> 库. 我更偏向于使用后一种方式.</p>
<h2 id="5-1-设置环境变量"><a href="#5-1-设置环境变量" class="headerlink" title="5.1 设置环境变量">5.1 设置环境变量</a></h2><p>幸运的是, TypeORM 中内置了这个 <code>dotenv</code> 库, 所以我们不必在额外安装它了.</p>
<p>在项目根目录下创建一个 <code>.env.template</code> 文件. 我们在使用时, 可以将该文件拷贝一份并且重命名为 <code>.env</code>, dotenv 就会读取 <code>.env</code> 中的配置.</p>
<p>我们还可以将我们的数据库连接信息加入到该文件中, 避免信息泄露. 有关 TypeORM 提供的环境变量 key, 可以<a href="https://typeorm.io/#/using-ormconfig/%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">参阅这里</a></p>
<figure class="highlight ini"><figcaption><span>.env.template</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># App</span></span><br><span class="line"><span class="attr">NEST_SECRET</span> = change-me</span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="attr">TYPEORM_CONNECTION</span> = postgres</span><br><span class="line"><span class="attr">TYPEORM_HOST</span> = localhost</span><br><span class="line"><span class="attr">TYPEORM_USERNAME</span> = root</span><br><span class="line"><span class="attr">TYPEORM_PASSWORD</span> =</span><br><span class="line"><span class="attr">TYPEORM_DATABASE</span> = nestjs</span><br><span class="line"><span class="attr">TYPEORM_PORT</span> = <span class="number">5432</span></span><br><span class="line"><span class="attr">TYPEORM_SYNCHRONIZE</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">TYPEORM_LOGGING</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">TYPEORM_ENTITIES</span> = dist/**/*.entity.js</span><br></pre></td></tr></table></figure>

<p>现在我们的环境变量的模版文件就创建好啦, 我们使用时应该将该文件复制一份为<code>.env</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> .env.template .<span class="built_in">env</span></span><br></pre></td></tr></table></figure>

<p>复制完毕后将其中的 secret 和数据库连接信息修改成我们自己的数据</p>
<p>我们还应该将 <code>.env</code> 文件加入 git 忽略列表, 避免我们的这些敏感信息泄漏.</p>
<p>然后创建 <code>src/config.ts</code>, 读取这些环境变量</p>
<figure class="highlight ts"><figcaption><span>config.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">NEST_SECRET</span> = process.<span class="property">env</span>.<span class="property">NEST_SECRET</span> ?? <span class="string">&#x27;secret&#x27;</span></span><br></pre></td></tr></table></figure>

<p>因为我们刚才已经将数据库连接信息写在了环境变量中, 所以我们之前在代码中的硬编码就可以移除啦</p>
<figure class="highlight diff"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">@Module(&#123;</span><br><span class="line">  imports: [</span><br><span class="line"><span class="deletion">-   TypeOrmModule.forRoot(&#123;</span></span><br><span class="line"><span class="deletion">-     type: &#x27;postgres&#x27;,</span></span><br><span class="line"><span class="deletion">-     host: &#x27;localhost&#x27;,</span></span><br><span class="line"><span class="deletion">-     port: 5432,</span></span><br><span class="line"><span class="deletion">-     username: &#x27;realworld&#x27;,</span></span><br><span class="line"><span class="deletion">-     password: &#x27;123456&#x27;,</span></span><br><span class="line"><span class="deletion">-     database: &#x27;nestjs&#x27;,</span></span><br><span class="line"><span class="deletion">-     entities: [&#x27;dist/**/*.entity.js&#x27;],</span></span><br><span class="line"><span class="deletion">-     synchronize: true,</span></span><br><span class="line"><span class="deletion">-   &#125;),</span></span><br><span class="line"><span class="addition">+   TypeOrmModule.forRoot(),</span></span><br><span class="line">    TypeOrmModule.forFeature([UserEntity]),</span><br><span class="line">    UserModule,</span><br><span class="line">    AuthModule,</span><br><span class="line">  ],</span><br><span class="line">  exports: [TypeOrmModule],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService, UserService],</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;</span><br><span class="line">  constructor (private readonly connection: Connection) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>环境变量创建好之后, 我们以后读取配置就在 <code>src/config.ts</code> 中使用啦!</p>
<h2 id="5-2-密码散列函数"><a href="#5-2-密码散列函数" class="headerlink" title="5.2 密码散列函数">5.2 密码散列函数</a></h2><p>我们在 <code>src</code> 目录下创建一个 <code>utils.ts</code> 的文件, 用于存放我们的工具类方法.</p>
<figure class="highlight ts"><figcaption><span>utils.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> crypto <span class="keyword">from</span> <span class="string">&#x27;crypto&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">NEST_SECRET</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cryptoPassword</span>(<span class="params">password: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> hmac = crypto.<span class="title function_">createHmac</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable constant_">NEST_SECRET</span>)</span><br><span class="line">  <span class="keyword">return</span> hmac.<span class="title function_">update</span>(password).<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对了, 测试还没写, 补个测试 (这一点都不 TDD 啊!)</p>
<figure class="highlight ts"><figcaption><span>utils.spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; cryptoPassword &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Utilities&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;cryptoPassword&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hashedPassword = <span class="title function_">cryptoPassword</span>(<span class="string">&#x27;foobar&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> hashedResult =</span><br><span class="line">      <span class="string">&#x27;4fcc06915b43d8a49aff193441e9e18654e6a27c2c428b02e8fcc41ccc2299f9&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(hashedPassword).<span class="title function_">toBe</span>(hashedResult)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5-3-密码散列加密"><a href="#5-3-密码散列加密" class="headerlink" title="5.3 密码散列加密">5.3 密码散列加密</a></h2><p>现在散列加密函数有了, 我们应该在哪里对密码进行加密呢. TypeORM 提供了一组监听器, 当我们对数据进行操作时, 如果设置了监听器, TypeORM 就会触发这个监听器.</p>
<p>我们要在用户创建和更新的时候, 对密码进行加密, 所以我们要使用 <code>BeforeInsert</code> 和 <code>BeforeUpdate</code> 两个监听器</p>
<figure class="highlight ts"><figcaption><span>user.entity.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BeforeInsert</span>, <span class="title class_">BeforeUpdate</span>, <span class="title class_">Column</span>, <span class="title class_">Entity</span>, <span class="title class_">PrimaryGeneratedColumn</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; cryptoPassword &#125; <span class="keyword">from</span> <span class="string">&#x27;../utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserEntity</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">password</span>: <span class="number">64</span> &#125;)</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@BeforeInsert</span></span><br><span class="line">  <span class="meta">@BeforeUpdate</span></span><br><span class="line">  <span class="title function_">hashPassword</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">password</span> = <span class="title function_">cryptoPassword</span>(<span class="variable language_">this</span>.<span class="property">password</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启下服务器, 然后发起一个 register 请求, 看看用户密码是不是被散列加密保存了</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/hashed-password.png" alt="hashed password"></p>
<p>不要忘记修改我们 AuthService 中验证密码的方法哦</p>
<figure class="highlight ts"><figcaption><span>auth.service.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BadRequestException</span>, <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; cryptoPassword &#125; <span class="keyword">from</span> <span class="string">&#x27;../utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">validateUser</span>(<span class="params">username: <span class="built_in">string</span>, password: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findOne</span>(username)</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&#x27;user is not exist&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user.<span class="property">password</span> !== <span class="title function_">cryptoPassword</span>(password)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&#x27;password is invalid&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">password</span>: _, ...profile &#125; = user</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-实现本地认证策略"><a href="#5-实现本地认证策略" class="headerlink" title="5. 实现本地认证策略">5. 实现本地认证策略</a></h1><p>为了简化我们的认证策略, 我们使用了一个名为 <code>passport-local</code> 的库, 在使用时,我们只需要将自己的类继承该库, 然后在构造函数中调用父类的构造函数即可.</p>
<p>我们在 <code>auth</code> 目录下创建一个 <code>local.strategy.ts</code> 文件</p>
<p>对于每种策略, Passport 要求实现一个具有以下签名的方法</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">validate</span>(<span class="attr">username</span>: <span class="built_in">string</span>, <span class="attr">password</span>: <span class="built_in">string</span>): <span class="built_in">any</span></span><br></pre></td></tr></table></figure>

<p>任何 Passport 策略都将遵循这个模式.</p>
<p>我们的 <code>validate</code> 方法, 调用 <code>AuthService</code> 的 <code>validateUser</code> 方法, 如果没有通过校验, 就抛出一个 401 错误, 否则返回该用户的信息</p>
<figure class="highlight ts"><figcaption><span>local.strategy.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">UnauthorizedException</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PassportStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Strategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;passport-local&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LocalStrategy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PassportStrategy</span>(<span class="title class_">Strategy</span>) &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> authService: AuthService</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">validate</span>(<span class="params">username: <span class="built_in">string</span>, password: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">validateUser</span>(username, password)</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthorizedException</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在 AuthModule 中引用这个策略</p>
<figure class="highlight ts"><figcaption><span>auth.module.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PassportModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LocalStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./local.strategy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">UserModule</span>, <span class="title class_">PassportModule</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AuthService</span>, <span class="title class_">LocalStrategy</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">AuthService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-实现登录功能"><a href="#5-实现登录功能" class="headerlink" title="5. 实现登录功能">5. 实现登录功能</a></h1><p>nestjs 为我们提供了一个非常方便的功能用来检测请求是否由路由处理程序, 这个功能就是守卫.</p>
<p>守卫内部实现了一个名为 <code>canActive</code> 的方法, 它返回一个 boolean 值, 如果为真, 就会处理这个路由,否则将会忽略当前的请求.</p>
<p>利用守卫, 我们可以方便的进行权限校验. 有点麻烦的是, 当用户未登录时, 我们首先应该校验用户访问的路由是否受限, 当没有经过身份验证的用户尝试登录时, 应该启动身份验证步骤.</p>
<p>不用担心, <code>@nestjs/passport</code> 为我们提供了一个比较便捷的守卫 <code>AuthGuard</code>, 结合 local 策略, 我们可以方便的获取用户信息, 验证通过后, 可以在 <code>request.user</code> 字段获取到, 其内容就是 local 策略 <code>validate</code> 方法返回的内容</p>
<p>由于<ruby>篇幅问题<rt>tōu lǎn<rt></ruby>, 我就省略测试的部分了, 直接亮代码!</p>
<p>登录入口</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Body</span>, <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Query</span>, <span class="title class_">UseGuards</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user/user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth/auth.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> authService: AuthService,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>(<span class="string">&#x27;local&#x27;</span>))</span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;/auth/login&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"><span class="meta">@Request</span>() req</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; user &#125; = req</span><br><span class="line">    <span class="keyword">return</span> &#123; user &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后发起一个 login 请求, 现在应该可以正常返回用户的信息了.</p>
<h1 id="6-JWT-认证"><a href="#6-JWT-认证" class="headerlink" title="6. JWT 认证">6. JWT 认证</a></h1><p>等等! 现在只是得到了一个用户信息, 那我怎么得到的我的 token 用来后续的鉴权呢?</p>
<h2 id="6-1-生成-Token"><a href="#6-1-生成-Token" class="headerlink" title="6.1 生成 Token">6.1 生成 Token</a></h2><p>生成 Token 使用 <code>passport-jwt</code> 和 <code>@nestjs/jwt</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @nestjs/jwt passport-jwt</span><br><span class="line">yarn add -D @types/passport-jwt</span><br></pre></td></tr></table></figure>

<p>我们将生成 token 的部分放在 AuthService 中</p>
<figure class="highlight ts"><figcaption><span>auth.service.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">generateToken</span>(<span class="params">userId: <span class="built_in">number</span>, username: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">jwtService</span>.<span class="title function_">sign</span>(&#123; userId, username &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 上面 <code>sign</code> 的参数的内容并不是加密的, 拿到 token 后可以解密成明文内容, 所以这部分不要放敏感信息.</p>
</blockquote>
<p>在使用前我们还需要一点点准备工作, 我们需要注册这个 JWT module.</p>
<p>在 AuthModule 中导入 <code>JwtModule</code> 的 <code>register</code> 方法, 传入我们签名的 <code>secret</code></p>
<figure class="highlight ts"><figcaption><span>auth.module.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">NEST_SECRET</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">UserModule</span>,</span><br><span class="line">    <span class="title class_">PassportModule</span>,</span><br><span class="line">    <span class="title class_">JwtModule</span>.<span class="title function_">register</span>(&#123;</span><br><span class="line">      <span class="attr">secret</span>: <span class="variable constant_">NEST_SECRET</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AuthService</span>, <span class="title class_">LocalStrategy</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">AuthService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>修改一下我们的 login 方法, 首先读取到用户信息后, 生成一个 token 给用户. 按照 Conduit 的规则, 我们将 token 注入在 <code>user</code> 对象中</p>
<figure class="highlight ts"><figcaption><span>app.controller.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>(<span class="string">&#x27;local&#x27;</span>))</span><br><span class="line"><span class="meta">@Post</span>(<span class="string">&#x27;/auth/login&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> login (<span class="meta">@Request</span>() req) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; user &#125; = req</span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">generateToken</span>(user.<span class="property">id</span>, user.<span class="property">username</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123; ...user, token &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在调用 login 方法, 返回的信息中应该含有 token 了, 我们在客户端拿到后, 应该将它进行持久化保存, 以便于后续的受保护的请求使用</p>
<h2 id="6-2-实现-JWT-策略"><a href="#6-2-实现-JWT-策略" class="headerlink" title="6.2 实现 JWT 策略">6.2 实现 JWT 策略</a></h2><p>在 Auth 模块下创建一个<code>jwt.strategy.ts</code> 的文件</p>
<figure class="highlight ts"><figcaption><span>jwt.strategy.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PassportStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ExtractJwt</span>, <span class="title class_">Strategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;passport-jwt&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">NEST_SECRET</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JwtStrategy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PassportStrategy</span>(<span class="title class_">Strategy</span>) &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(&#123;</span><br><span class="line">      <span class="attr">jwtFromRequest</span>: <span class="title class_">ExtractJwt</span>.<span class="title function_">fromAuthHeaderAsBearerToken</span>(),</span><br><span class="line">      <span class="attr">ignoreExpiration</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">secretOrKey</span>: <span class="variable constant_">NEST_SECRET</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">validate</span>(<span class="params">payload: &#123; userId: <span class="built_in">number</span>; username: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; userId, username &#125; = payload</span><br><span class="line">    <span class="keyword">return</span> &#123; userId, username &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为有了 <code>passport-jwt</code>, 我们的 jwt 策略依旧很简单, 继承 Passport 策略后我们只需要设置如何获取 jwt, 解析规则即可</p>
<p>最后我们将 JWT 策略提供给我们的 AuthModule</p>
<figure class="highlight ts"><figcaption><span>auth.module.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AuthService</span>, <span class="title class_">LocalStrategy</span>, <span class="title class_">JwtStrategy</span>],</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>好, 现在我们就有了 2 个策略, ‘local’ 策略用来保护我们的路由, ‘jwt’ 策略用来鉴别请求有效性并且提供用户信息</p>
<h2 id="6-3-验证一下"><a href="#6-3-验证一下" class="headerlink" title="6.3 验证一下">6.3 验证一下</a></h2><p>一切准备工作就绪后, 我们怎么使用 JWT 呢? 上一步我们实现 JWT 策略之后, 可以继续用 Guard 来保护我们的路由</p>
<p>为了演示使用方法, 我们实现一个读取个人资料的功能,</p>
<p>根据 Conduit 的要求, 我们的请求地址是 GET <code>/user</code>, 返回的内容暂时读取 jwt 的 payload 好啦</p>
<p>首先创建一个路由</p>
<figure class="highlight ts"><figcaption><span>app.controller.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>(<span class="string">&#x27;jwt&#x27;</span>))</span><br><span class="line"><span class="meta">@Get</span>(<span class="string">&#x27;/user&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> profile (<span class="meta">@Request</span>() req) &#123;</span><br><span class="line">  <span class="keyword">return</span> req.<span class="property">user</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启服务, 然后我们发起一个不带有 Token 的请求头的 GET 请求访问一下这个路由</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://localhost:3000/user</span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt; &#123;&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>成功的返回了 401 错误, 接下来带上我们的 token 试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://localhost:3000/auth/login -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d <span class="string">&#x27;&#123;&quot;username&quot;:&quot;foo&quot;,&quot;password&quot;:&quot;12345678&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt; &#123;&quot;user&quot;:&#123;&quot;id&quot;:5,&quot;email&quot;:&quot;foo@bar.com&quot;,&quot;username&quot;:&quot;foo&quot;,&quot;bio&quot;:null,&quot;image&quot;:null,&quot;token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsInVzZXJuYW1lIjoiZm9vIiwiaWF0IjoxNTc4NDY2OTI4fQ.4k5F5VVY-lS86FxAwLIQ9lc8fB8_VRLA0E2_ekbP_lE&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">curl http://localhost:3000/user -H <span class="string">&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsInVzZXJuYW1lIjoiZm9vIiwiaWF0IjoxNTc4NDY2OTI4fQ.4k5F5VVY-lS86FxAwLIQ9lc8fB8_VRLA0E2_ekbP_lE&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&gt; &#123;&quot;userId&quot;:5,&quot;username&quot;:&quot;foo&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>嗯.. 大功告成!</p>
<p>好, 小结一下, 我们一共有两个用户身份验证策略, LocalStrategy 做用户名密码验证的守卫, JwtStrategy 用来做 Token 的验证. 之后如果某个接口需要用户登录, 加一个 JwtStrategy 守卫就好啦</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://docs.nestjs.com/techniques/authentication">Authentication | NestJS</a></li>
<li><a href="https://docs.nestjs.com/guards">Guards | NestJS</a></li>
<li><a href="https://www.shangyang.me/2018/03/07/javascript-nodejs-passport-01-basic/">Nodejs Passport 系列之一：基础概念</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Nestjs</tag>
        <tag>TypeScript</tag>
        <tag>Postgres</tag>
        <tag>TypeORM</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手带你实践 TDD Nestjs Realworld 项目 - 4. 输入校验和转化</title>
    <url>//2020/TDD-nestjs-realworld-example-app-4/</url>
    <content><![CDATA[<p>上一章中, 我们完成了鉴权功能, 也就是 Auth 模块, 顺便简单实现了下注册和登录功能. 这一章我们就来正式的将登录和实现功能做完, 含有完整的数据校验和转化.</p>
<p>在正式的开始完善功能之前, 我们现清理重构一下已有的代码.</p>
<h1 id="1-重构代码"><a href="#1-重构代码" class="headerlink" title="1. 重构代码">1. 重构代码</a></h1><h2 id="1-1-整理路由"><a href="#1-1-整理路由" class="headerlink" title="1.1 整理路由">1.1 整理路由</a></h2><p>我们上一张的登录和注册是写在 <code>app.controller.ts</code> 中的, 如果所有的路由都写在这里的话就会比较杂乱, 所以我们将它移动到 Auth 模块下.</p>
<p>首先生成 AuthController</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nest g controller auth</span><br></pre></td></tr></table></figure>

<p>然后将 <code>/auth/register</code> 和 <code>/auth/login</code> 移到 AuthController 下</p>
<figure class="highlight ts"><figcaption><span>auth.controller.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Body</span>, <span class="title class_">Controller</span>, <span class="title class_">Post</span>, <span class="title class_">Request</span>, <span class="title class_">UseGuards</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/passport&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.service&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;auth&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> userService: UserService,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> authService: AuthService,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;/register&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">register</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Body</span>() requestBody: &#123; email: <span class="built_in">string</span>; username: <span class="built_in">string</span>; password: <span class="built_in">string</span> &#125;,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">createUser</span>(requestBody)</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">generateToken</span>(user.<span class="property">id</span>, user.<span class="property">username</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">user</span>: &#123; ...user, token &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>(<span class="string">&#x27;local&#x27;</span>))</span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"><span class="meta">@Request</span>() req</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; user &#125; = req</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">generateToken</span>(user.<span class="property">id</span>, user.<span class="property">username</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">user</span>: &#123; ...user, token &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺便也移动下测试代码, 这里就不再赘述了.</p>
<span id="more"></span>

<h1 id="2-增加-DTO"><a href="#2-增加-DTO" class="headerlink" title="2. 增加 DTO">2. 增加 DTO</a></h1><p>我们在 Auth 模块下添加一个 dto 目录, 然后新建一个 <code>src/auth/dto/register.dto.ts</code> 用于存储 Data Transfer Object</p>
<figure class="highlight ts"><figcaption><span>register.dto.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RegisterDto</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">email</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同理，增加 <code>src/auth/dto/login.dto.ts</code>, 这里就不在赘述了。</p>
<p>然后在 register 方法中修改入参</p>
<figure class="highlight ts"><figcaption><span>auth.controller.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;/register&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">register</span>(<span class="params"><span class="meta">@Body</span>() registerDto: RegisterDto</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">createUser</span>(registerDto)</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">generateToken</span>(user.<span class="property">id</span>, user.<span class="property">username</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">user</span>: &#123; ...user, token &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>(<span class="string">&#x27;local&#x27;</span>))</span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"><span class="meta">@Body</span>() loginDto: LoginDto</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> loginDto</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-自动验证类型"><a href="#3-自动验证类型" class="headerlink" title="3. 自动验证类型">3. 自动验证类型</a></h1><p>nest 推荐我们使用<code>class-validator</code>做类型验证, 首先安装这个依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add class-validator class-transformer</span><br></pre></td></tr></table></figure>

<p>然后在 <code>main.ts</code> 中加入自动验证的 pipe</p>
<figure class="highlight diff"><figcaption><span>main.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">  import &#123; NestFactory &#125; from &#x27;@nestjs/core&#x27;</span><br><span class="line">  import &#123; AppModule &#125; from &#x27;./app.module&#x27;</span><br><span class="line"><span class="addition">+ import &#123; ValidationPipe &#125; from &#x27;@nestjs/common&#x27;</span></span><br><span class="line"></span><br><span class="line">  async function bootstrap () &#123;</span><br><span class="line">    const app = await NestFactory.create(AppModule)</span><br><span class="line"><span class="addition">+   app.useGlobalPipes(new ValidationPipe())</span></span><br><span class="line">    await app.listen(3000)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bootstrap()</span><br></pre></td></tr></table></figure>

<p>然后在 DTO 中加入注解</p>
<figure class="highlight ts"><figcaption><span>register.dto.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IsEmail</span>, <span class="title class_">IsNotEmpty</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;class-validator&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RegisterDto</span> &#123;</span><br><span class="line">  <span class="meta">@IsEmail</span>()</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">email</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsNotEmpty</span>()</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@IsNotEmpty</span>()</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">password</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-响应类型"><a href="#4-响应类型" class="headerlink" title="4. 响应类型">4. 响应类型</a></h1><p>为了保证我们能有正确的返回值，我们需要自己声明 Response Object</p>
<p>在 <code>auth</code> 下建立 <code>auth.interface.ts</code></p>
<figure class="highlight ts"><figcaption><span>auth.interface.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AuthData</span> &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">bio</span>: <span class="built_in">string</span></span><br><span class="line">  image?: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">token</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AuthRO</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="title class_">AuthData</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在 controller 里补充 DTO 和返回值类型</p>
<figure class="highlight diff"><figcaption><span>auth.controller.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">  @Controller(&#x27;auth&#x27;)</span><br><span class="line">  export class AuthController &#123;</span><br><span class="line">    constructor (</span><br><span class="line">      private readonly userService: UserService,</span><br><span class="line">      private readonly authService: AuthService,</span><br><span class="line">    ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    @Post(&#x27;/register&#x27;)</span><br><span class="line"><span class="addition">+   async register (@Body() registerDto: RegisterDto): Promise&lt;AuthRO&gt; &#123;</span></span><br><span class="line">      const user = await this.userService.createUser(requestBody)</span><br><span class="line">      const token = this.authService.generateToken(user.id, user.username)</span><br><span class="line">      return &#123;</span><br><span class="line">        user: &#123; ...user, token &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   @UseGuards(AuthGuard(&#x27;local&#x27;))</span><br><span class="line">    @Post(&#x27;/login&#x27;)</span><br><span class="line"><span class="addition">+   async login (@Body() loginDto: LoginDto): Promise&lt;AuthRO&gt; &#123;</span></span><br><span class="line">      return loginDto</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://docs.nestjs.com/controllers#request-payloads">Controllers | NestJS</a></li>
<li><a href="https://docs.nestjs.com/techniques/validation">Validation | NestJS</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Nestjs</tag>
        <tag>TypeScript</tag>
        <tag>Postgres</tag>
        <tag>TypeORM</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手带你实践 TDD Nestjs Realworld 项目 - 6. 编写 API 集成测试</title>
    <url>//2020/TDD-nestjs-realworld-example-app-6/</url>
    <content><![CDATA[<p>第二章我们简单的介绍了下如何连接测试数据库，这篇我们将结合 TDD 来完整的实现注册和登录功能。（如果接下来我写的内容你已经做过，可以跳过该步）</p>
<h1 id="1-编写第一个集成测试"><a href="#1-编写第一个集成测试" class="headerlink" title="1. 编写第一个集成测试">1. 编写第一个集成测试</a></h1><p>按照 Nest 提供的示例 E2E 测试， 位于 <code>test/app.e2e-spec.ts</code> 应该长这样</p>
<figure class="highlight ts"><figcaption><span>test/app.e2e-spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> request <span class="keyword">from</span> <span class="string">&#x27;supertest&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./../src/app.module&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;AppController (e2e)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> app</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">moduleFixture</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">AppModule</span>],</span><br><span class="line">    &#125;).<span class="title function_">compile</span>()</span><br><span class="line"></span><br><span class="line">    app = moduleFixture.<span class="title function_">createNestApplication</span>()</span><br><span class="line">    <span class="keyword">await</span> app.<span class="title function_">init</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;/ (GET)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())</span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="number">200</span>)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在是运行不了的，不过没关系，我们稍稍改造一下</p>
<p>首先我们测试一个用于检查健康的接口 <code>/hello</code>, 无需导入整个 <code>AppModule</code>, 只需导入 <code>AppController</code> ，改造为下列的样子</p>
<figure class="highlight ts"><figcaption><span>app.e2e-spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;app.controller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> request <span class="keyword">from</span> <span class="string">&#x27;supertest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;app module&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> app</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">moduleFixture</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">    &#125;).<span class="title function_">compile</span>()</span><br><span class="line"></span><br><span class="line">    app = moduleFixture.<span class="title function_">createNestApplication</span>()</span><br><span class="line">    <span class="keyword">await</span> app.<span class="title function_">init</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> app.<span class="title function_">close</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;/hello (GET)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())</span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">&#x27;/hello?name=world&#x27;</span>)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="number">200</span>)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="string">&#x27;Hello world!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">test</span>:e2e</span><br></pre></td></tr></table></figure>

<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/yarn-e2e-test.png" alt="yarn e2e test"></p>
<span id="more"></span>

<h1 id="2-注册功能接口"><a href="#2-注册功能接口" class="headerlink" title="2. 注册功能接口">2. 注册功能接口</a></h1><p>为了更好的组织我们的代码,我们将不同模块写入不同的测试文件，这样它们在操作数据库时就不容易有冲突</p>
<p>创建 <code>test/auth.e2e-spec.ts</code> 文件，用于测试我们的 Auth 模块</p>
<figure class="highlight ts"><figcaption><span>test/auth.e2e-spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;app.controller&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;auth/auth.module&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> request <span class="keyword">from</span> <span class="string">&#x27;supertest&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;user/user.module&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Auth Module Integration&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> app</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">moduleFixture</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [</span><br><span class="line">        <span class="title class_">TypeOrmModule</span>.<span class="title function_">forRoot</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">          <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">          <span class="attr">port</span>: <span class="number">5432</span>,</span><br><span class="line">          <span class="attr">username</span>: <span class="string">&#x27;realworld&#x27;</span>,</span><br><span class="line">          <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">          <span class="attr">database</span>: <span class="string">&#x27;nestjs_test&#x27;</span>,</span><br><span class="line">          <span class="attr">entities</span>: [<span class="title class_">UserEntity</span>],</span><br><span class="line">          <span class="attr">dropSchema</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">synchronize</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title class_">UserModule</span>,</span><br><span class="line">        <span class="title class_">AuthModule</span>,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">    &#125;).<span class="title function_">compile</span>()</span><br><span class="line"></span><br><span class="line">    app = moduleFixture.<span class="title function_">createNestApplication</span>()</span><br><span class="line">    <span class="keyword">await</span> app.<span class="title function_">init</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> app.<span class="title function_">close</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&#x27;/auth/register (POST)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;should return 201&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> requestBody = &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;foobar&#x27;</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="string">&#x27;foobar@example.com&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())</span><br><span class="line">        .<span class="title function_">post</span>(<span class="string">&#x27;/auth/register&#x27;</span>)</span><br><span class="line">        .<span class="title function_">send</span>(requestBody)</span><br><span class="line">        .<span class="title function_">expect</span>(<span class="number">201</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们注意到， 我们首先导入了一个 TypeOrmModule，用于测试环境的数据库连接，然后还导入了 AuthModule 和 UserModule ,它们分别是我们要测试的模块和依赖的模块。</p>
<p>连接数据库时, 我们连接了一个测试数据库 <code>nestjs_test</code>，还打开了 <code>dropSchema</code> 的属性，它的作用是建立连接时都会将 schema 清空，来保证我们测试的幂等性，也就是每次都运行在一个干净的环境上。</p>
<p>然后再次运行测试，这次再运行之前我们对 <code>test:e2e</code> 这个命令做一点改造，给它追加一个 <code>--runInBand</code> 参数,
这个意思是让测试按顺序跑，避免多个测试同时操作同一个数据导致出现问题，至于按什么顺序就不得而知了。</p>
<figure class="highlight diff"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">    &quot;test:debug&quot;: &quot;node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand&quot;,</span><br><span class="line"><span class="deletion">-   &quot;test:e2e&quot;: &quot;jest --config ./test/jest-e2e.json&quot;</span></span><br><span class="line"><span class="addition">+   &quot;test:e2e&quot;: &quot;jest --config ./test/jest-e2e.json --runInBand&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后执行 <code>yarn test:e2e</code></p>
<h1 id="3-补充注册逻辑"><a href="#3-补充注册逻辑" class="headerlink" title="3. 补充注册逻辑">3. 补充注册逻辑</a></h1><p>现在注册功能还不完善，我们还需要补充更多场景，比如注册时如果用户名或 Email 已存在，我们应该返回 400 错误</p>
<p>先来补充测试用例</p>
<figure class="highlight ts"><figcaption><span>auth.e2e-spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册功能</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;/auth/register (POST)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 正常注册</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return 201&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> requestBody = &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mutoe&#x27;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;mutoe@foxmail.com&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())</span><br><span class="line">      .<span class="title function_">post</span>(<span class="string">&#x27;/auth/register&#x27;</span>)</span><br><span class="line">      .<span class="title function_">send</span>(requestBody)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="number">201</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传入已存在的用户名</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return 400 given exist username&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> requestBody = &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mutoe&#x27;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;foo@bar.com&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())</span><br><span class="line">      .<span class="title function_">post</span>(<span class="string">&#x27;/auth/register&#x27;</span>)</span><br><span class="line">      .<span class="title function_">send</span>(requestBody)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(response.<span class="property">status</span>).<span class="title function_">toBe</span>(<span class="number">400</span>)</span><br><span class="line">    <span class="title function_">expect</span>(response.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;username is exist&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传入已存在的邮箱</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return 400 given exist email&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> requestBody = &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;foobar&#x27;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;mutoe@foxmail.com&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())</span><br><span class="line">      .<span class="title function_">post</span>(<span class="string">&#x27;/auth/register&#x27;</span>)</span><br><span class="line">      .<span class="title function_">send</span>(requestBody)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(response.<span class="property">status</span>).<span class="title function_">toBe</span>(<span class="number">400</span>)</span><br><span class="line">    <span class="title function_">expect</span>(response.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;email is exist&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>然后运行一下测试，应该是有 1 个绿和 2 个红（因为我们还没实现后面两个逻辑）</p>
<p>好，按照 TDD 的“红-绿-重构”流程，我们接下来要让测试变“绿”，实现具体的功能</p>
<figure class="highlight ts"><figcaption><span>auth.service.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ..</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> register (<span class="attr">registerDto</span>: <span class="title class_">RegisterDto</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">AuthData</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">user</span>: <span class="title class_">UserEntity</span></span><br><span class="line">  user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findUser</span>(&#123; <span class="attr">username</span>: registerDto.<span class="property">username</span> &#125;)</span><br><span class="line">  <span class="keyword">if</span> (user?.<span class="property">id</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&#x27;username is exist&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findUser</span>(&#123; <span class="attr">email</span>: registerDto.<span class="property">email</span> &#125;)</span><br><span class="line">  <span class="keyword">if</span> (user?.<span class="property">id</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&#x27;email is exist&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> profile = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">createUser</span>(registerDto)</span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="title function_">generateToken</span>(profile.<span class="property">id</span>, profile.<span class="property">email</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123; ...profile, token &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>再次运行测试， 发现 3 个用例都“绿”了，好，注册功能就完成了，登录功能同理</p>
<figure class="highlight ts"><figcaption><span>auth.e2e-spec.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;/auth/login (POST)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 正常登录</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return 200 when login given correct user name and password&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> requestBody = &#123;</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;mutoe@foxmail.com&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())</span><br><span class="line">      .<span class="title function_">post</span>(<span class="string">&#x27;/auth/login&#x27;</span>)</span><br><span class="line">      .<span class="title function_">send</span>(requestBody)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(response.<span class="property">status</span>).<span class="title function_">toBe</span>(<span class="number">200</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给定错误的用户名</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return 400 when login given incorrect user name&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> requestBody = &#123;</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;not-exist@example.com&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())</span><br><span class="line">      .<span class="title function_">post</span>(<span class="string">&#x27;/auth/login&#x27;</span>)</span><br><span class="line">      .<span class="title function_">send</span>(requestBody)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(response.<span class="property">status</span>).<span class="title function_">toBe</span>(<span class="number">400</span>)</span><br><span class="line">    <span class="title function_">expect</span>(response.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;user is not exist&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给定错误的密码</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return 400 when login given incorrect password&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> requestBody = &#123;</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;mutoe@foxmail.com&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;invalid&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">request</span>(app.<span class="title function_">getHttpServer</span>())</span><br><span class="line">      .<span class="title function_">post</span>(<span class="string">&#x27;/auth/login&#x27;</span>)</span><br><span class="line">      .<span class="title function_">send</span>(requestBody)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(response.<span class="property">status</span>).<span class="title function_">toBe</span>(<span class="number">400</span>)</span><br><span class="line">    <span class="title function_">expect</span>(response.<span class="property">body</span>).<span class="title function_">toHaveProperty</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;password is invalid&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>接下来是实现</p>
<figure class="highlight ts"><figcaption><span>auth.service.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> login (<span class="attr">loginDto</span>: <span class="title class_">LoginDto</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">AuthData</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">validateUser</span>(loginDto.<span class="property">email</span>, loginDto.<span class="property">password</span>)</span><br><span class="line">  <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="title function_">generateToken</span>(user.<span class="property">id</span>, user.<span class="property">email</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123; ...user, token &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> validateUser (<span class="attr">email</span>: <span class="built_in">string</span>, <span class="attr">password</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findUser</span>(&#123; email &#125;, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&#x27;user is not exist&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (user.<span class="property">password</span> !== <span class="title function_">cryptoPassword</span>(password)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadRequestException</span>(<span class="string">&#x27;password is invalid&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">omit</span>(user, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>好，这次注册和登录功能就都完成了，如果你的代码有些出入，请不要在意，这个博客是我后面补的，请参考当时提交的<a href="https://github.com/mutoe/nestjs-realworld-example-app/tree/ed381ff24fa886002acda78680436e5c88da9012">代码快照</a></p>
<h1 id="4-持续集成"><a href="#4-持续集成" class="headerlink" title="4. 持续集成">4. 持续集成</a></h1><p>接下来我们创建一个单独的 pipeline 用于集成测试，这条 pipeline 跑在 docker 中，不过我们不用单独写 Dockerfile，我们只需要书写 <code>.github/workflows</code> 即可</p>
<figure class="highlight yml"><figcaption><span>.github/workflows/nodejs.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">e2e:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">CI:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">      <span class="attr">postgres:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">postgres:10.8</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">POSTGRES_USER:</span> <span class="string">realworld</span></span><br><span class="line">          <span class="attr">POSTGRES_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">          <span class="attr">POSTGRES_DB:</span> <span class="string">nestjs_test</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line">        <span class="attr">options:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">          --health-cmd pg_isready</span></span><br><span class="line"><span class="string">          --health-interval 10s</span></span><br><span class="line"><span class="string">          --health-timeout 5s</span></span><br><span class="line"><span class="string">          --health-retries 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Nodejs</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">yarn</span> <span class="string">cache</span> <span class="string">directory</span> <span class="string">path</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">yarn-cache-dir-path</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;::set-output name=dir::$(yarn cache dir)&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">yarn-cache</span> <span class="comment"># use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != &#x27;true&#x27;`)</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.yarn-cache-dir-path.outputs.dir</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-yarn-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/yarn.lock&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-yarn-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">--skip-integrity-check</span> <span class="string">--non-interactive</span> <span class="string">--no-progress</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">test:e2e</span></span><br></pre></td></tr></table></figure>

<h1 id="5-收集测试覆盖率"><a href="#5-收集测试覆盖率" class="headerlink" title="5. 收集测试覆盖率">5. 收集测试覆盖率</a></h1><p>说到 Pipeline 我们还可以将单元测试的覆盖率收集起来，检查我们有哪些地方的代码遗漏了</p>
<p>首先我们修改一下测试报告生成的位置</p>
<figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;coverageDirectory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;rootDir&gt;/../coverage&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这样，测试报告就会生成在根目录下的 <code>coverage</code> 目录了，可以运行 <code>yarn test:cov</code> 试一试</p>
<blockquote>
<p>记得将 <code>coverage</code> 目录加入到 <code>.gitignore</code>， 这个是不需要上传到 git 仓库的</p>
</blockquote>
<p>然后我们在单元测试的 Pipeline 中做一下改动来收集测试报告到 Codecov</p>
<figure class="highlight yml"><figcaption><span>.github/workflows/nodejs.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># steps in build jobs</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">yarn</span> <span class="string">test:cov</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">collect</span> <span class="string">coverage</span> <span class="string">artifacts</span></span><br><span class="line">  <span class="attr">uses:</span> <span class="string">codecov/codecov-action@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./coverage/lcov.info</span></span><br></pre></td></tr></table></figure>

<p>注意需要将单元测试的 script 由 <code>yarn test</code> 改为 <code>yarn test:cov</code></p>
<p>然后推完代码，访问 <code>https://codecov.io</code> 即可看到你的覆盖率报告啦！</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/coverage-codecov.png" alt="coverage codecov"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://docs.nestjs.cn/6/fundamentals?id=%E6%B5%8B%E8%AF%95">测试 - NestJS</a></li>
<li><a href="https://github.com/visionmedia/supertest">Supertest</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Test</tag>
        <tag>Nestjs</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手带你实践 TDD Nestjs Realworld 项目 - 5. Swagger 自动生成接口文档</title>
    <url>//2020/TDD-nestjs-realworld-example-app-5/</url>
    <content><![CDATA[<p>这一节， 我们引入 Swagger 来自动根据代码里的注脚来生成接口文档。</p>
<p>Nest 为我们提供了一个专用的模块来搭配 Swagger 来使用</p>
<h1 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖">1. 安装依赖</a></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @nestjs/swagger swagger-ui-express</span><br></pre></td></tr></table></figure>

<h1 id="2-初始化-Swagger-模块"><a href="#2-初始化-Swagger-模块" class="headerlink" title="2. 初始化 Swagger 模块">2. 初始化 Swagger 模块</a></h1><p>在我们的应用入口文件 <code>main.ts</code> 中添加一个 <code>createSwagger</code> 方法， 并在 <code>bootstrap</code> 方法中初始化它</p>
<figure class="highlight ts"><figcaption><span>main.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">INestApplication</span>, <span class="title class_">ValidationPipe</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DocumentBuilder</span>, <span class="title class_">SwaggerModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;app.module&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSwagger</span>(<span class="params">app: INestApplication</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> version = <span class="built_in">require</span>(<span class="string">&#x27;../package.json&#x27;</span>).<span class="property">version</span> || <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = <span class="keyword">new</span> <span class="title class_">DocumentBuilder</span>()</span><br><span class="line">    .<span class="title function_">setTitle</span>(<span class="string">&#x27;Nestjs Realworld Example App&#x27;</span>)</span><br><span class="line">    .<span class="title function_">setVersion</span>(version)</span><br><span class="line">    .<span class="title function_">addBearerAuth</span>()</span><br><span class="line">    .<span class="title function_">build</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">document</span> = <span class="title class_">SwaggerModule</span>.<span class="title function_">createDocument</span>(app, options)</span><br><span class="line">  <span class="title class_">SwaggerModule</span>.<span class="title function_">setup</span>(<span class="string">&#x27;/docs&#x27;</span>, app, <span class="variable language_">document</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>)</span><br><span class="line">  app.<span class="title function_">useGlobalPipes</span>(<span class="keyword">new</span> <span class="title class_">ValidationPipe</span>())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">SWAGGER_ENABLE</span> &amp;&amp; process.<span class="property">env</span>.<span class="property">SWAGGER_ENABLE</span> === <span class="string">&#x27;true&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">createSwagger</span>(app)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrap</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err))</span><br></pre></td></tr></table></figure>

<p>在 <code>createSwagger</code> 中， 我们首先读取了来自 <code>package.json</code> 中的版本号来作为接口的版本</p>
<p>然后我们设置了 Title 和 Bearer 鉴权认证入口， 我们还设置了 <code>/docs</code> 为我们文档的入口</p>
<p>最后，我们判断环境变量中的 <code>SWAGGER_ENABLE</code> 是否打开， 如果打开我们就初始化 Swagger 文档系统。</p>
<p>在 <code>.env</code> 和 <code>.env.template</code> 中增加 <code>SWAGGER_ENABLE=true</code>, 然后启动服务器</p>
<p>访问 <code>http://localhost:3000/docs</code> 就能看见我们的接口文档创建好啦！</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/swagger-preview.png" alt="swagger preview"></p>
<span id="more"></span>

<h1 id="3-声明接口"><a href="#3-声明接口" class="headerlink" title="3. 声明接口">3. 声明接口</a></h1><p>不要着急，有了接口还不够，因为现在还没有任何的字段提示和示例，接下来我们就来添加文档</p>
<p>打开 <code>auth/dto/login.dto.ts</code></p>
<figure class="highlight diff"><figcaption><span>auth/dto/login.dto.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">  import &#123; ApiProperty &#125; from &#x27;@nestjs/swagger&#x27;</span><br><span class="line">  import &#123; IsEmail, IsNotEmpty &#125; from &#x27;class-validator&#x27;</span><br><span class="line"></span><br><span class="line">  export class LoginDto &#123;</span><br><span class="line">    @IsEmail()</span><br><span class="line"><span class="addition">+   @ApiProperty(&#123; example: &#x27;foo@example.com&#x27; &#125;)</span></span><br><span class="line">    readonly email: string</span><br><span class="line"></span><br><span class="line">    @IsNotEmpty()</span><br><span class="line"><span class="addition">+   @ApiProperty(&#123; example: &#x27;123456&#x27; &#125;)</span></span><br><span class="line">    readonly password: string</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这里我们分别为 <code>LoginDto</code> 的两个字段声明了示例值，方便我们在 Swagger 中调用</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/swagger-example.png" alt="swagger example"></p>
<p>我们还可以给字段声明可选， 打开 <code>app.controller.ts</code></p>
<figure class="highlight diff"><figcaption><span>app.controller.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">  import &#123; Controller, Get, Query &#125; from &#x27;@nestjs/common&#x27;</span><br><span class="line">  import &#123; ApiQuery &#125; from &#x27;@nestjs/swagger&#x27;</span><br><span class="line"></span><br><span class="line">  @Controller()</span><br><span class="line">  export class AppController &#123;</span><br><span class="line">    @Get(&#x27;/hello&#x27;)</span><br><span class="line"><span class="addition">+   @ApiQuery(&#123; name: &#x27;name&#x27;, required: false &#125;)</span></span><br><span class="line">    healthCheck (@Query(&#x27;name&#x27;) name?: string): string &#123;</span><br><span class="line">      return `Hello $&#123;name || &#x27;world&#x27;&#125;!`</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这里我们用 <code>ApiQuery</code> 的方式给示例接口增加了 <code>name</code> 字段为可选</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/swagger-param-example.png" alt="swagger param example"></p>
<h1 id="4-导出接口文档"><a href="#4-导出接口文档" class="headerlink" title="4. 导出接口文档">4. 导出接口文档</a></h1><p>Swagger 基于 OpenAPI 格式, Nest 为我们提供了导出 json 源码的能力，只需在接口文档入口最后添加 <code>-json</code> 即可，如 <code>http://localhost:3000/docs-json</code></p>
<p>然后你就可以拿着这个 json 导入到支持 OpenAPI 的地方啦（比如 Postman）</p>
<p><img src="https://static.mutoe.com/2020/TDD-nestjs-realworld-example-app/swagger-postman.png" alt="swagger postman"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://docs.nestjs.cn/6/recipes?id=openapi-swagger">OpenAPI (Swagger) | NestJS</a></li>
<li><a href="https://swagger.io/docs/specification/about/">Swagger</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Nestjs</tag>
        <tag>TypeScript</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能、经济危机、隐私和我们</title>
    <url>//2023/ai-economic-crisis-privacy-and-us/</url>
    <content><![CDATA[<p>注：本文不会涉及任何算法，只通俗地分享自己的感悟，若有事实错误请直接批评指正，感谢大家。</p>
<h1 id="0-序"><a href="#0-序" class="headerlink" title="0. 序">0. 序</a></h1><p>最近深度体验了 AI 绘图 Stable Diffusion，结合正在发生的经济危机&#x2F;裁员&#x2F;通缩，我产生了一些思考：AI 大模型时代的到来，到底会淘汰哪些人？哪些领域会受到影响？AI 带来哪些隐私、道德和安全问题？作为受到直接影响的底层程序员&#x2F;设计师&#x2F;画师&#x2F;写手，我们真的只能坐以待毙吗？</p>
<p>我的结论是：第三产业大部分领域都会受到影响 (实体产业影响较小)。</p>
<blockquote>
<p>第一产业是指农、林、牧、渔业。</p>
<p>第二产业是指采矿业，制造业，电力、燃气及水的生产和供应业，建筑业。</p>
<p>第三产业是指除第一、二产业以外的其他行业。第三产业包括：交通运输、仓储和邮政业，信息传输、计算机服务和软件业，批发和零售业，住宿和餐饮业，金融业，房地产业，租赁和商务服务业，科学研究、技术服务和地质勘查业，水利、环境和公共设施管理业，居民服务和其他服务业，教育，卫生、社会保障和社会福利业，文化、体育和娱乐业，公共管理和社会组织，国际组织。</p>
</blockquote>
<h1 id="1-AI-绘图现在发展到什么程度了？"><a href="#1-AI-绘图现在发展到什么程度了？" class="headerlink" title="1. AI 绘图现在发展到什么程度了？">1. AI 绘图现在发展到什么程度了？</a></h1><p>其实半年前（2023年3月左右）我就接触了 Stable Diffusion (一个开源的 AI 绘图项目)，那时候基于扩散模型的 AI 绘图才刚发展起来，对我有一定的冲击，毕竟这种通过文字转化为图像的方式是革命性的。
但受限于显卡，只画了一些简单的内容，画出来的人也是比较挫。</p>
<figure>
  <img width="360" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/sd1.5model.jpg">
  <figcaption style="font-style: italic">早期的 AI 绘图模型 (来自 Stable Diffusion 1.5 大模型)</figcaption>
</figure>


<p>随着时间推移，各种 Chat 类应用，Code 补全类的 AI 工具层出不穷，我意识到 AI 时代已经来临，于是向老婆申请购买了一张二手的 3090 显卡，这张卡的优势在于有 24G 大显存，玩过 AI 绘图的小伙伴应该知道，显存越大，能画出来的原始图像分辨率就越高，训练时每一次迭代也可以同时训练更多图像。</p>
<p>拿到显卡后，我就陆续开始了对 AI 绘图的探索，先是沉溺与画各种漂亮妹子，然后绘制各种风格的图像，比如幻想风格、像素画风、游戏素材等图像。</p>
<figure>
  <img width="360" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/majicmixRealistic.jpeg" alt="真实系漂亮妹子">
  <figcaption style="font-style: italic">真实系风格 (来自 majicmix realistic 大模型)</figcaption>
</figure>

<figure>
  <img width="360" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/majicmixLux.jpeg">
  <figcaption style="font-style: italic">奇幻风格 (来自 majicmix lux 大模型)</figcaption>
</figure>

<figure>
  <img width="360" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/pixelArt.jpeg">
  <figcaption style="font-style: italic">像素风格 (来自 Pixel Art LoRa 模型)</figcaption>
</figure>

<figure>
  <img width="640" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/game-resource.jpg">
  <figcaption style="font-style: italic">游戏素材 (左：Game Icon Research LoRa 模型 / 右：Character Design Sheet LoRa 模型)</figcaption>
</figure>

<p>后来不满足于画各种乱七八糟的东西，开始去各大网站搜罗 SD 应用方面的教程，陆续学习了照片高清放大、照片动漫化、AI 艺术字、光影重绘、换脸换装等各种应用。</p>
<figure>
  <img width="640" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/upscale.jpg">
  <figcaption style="font-style: italic">AI 高清放大 (SD 高清重绘)</figcaption>
</figure>

<figure>
  <img width="" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/repaint-disney.jpg">
  <figcaption style="font-style: italic">真人转动漫风格 (Disney 大模型重绘)</figcaption>
</figure>

<figure>
  <img width="480" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/ai-art-font.jpg">
  <figcaption style="font-style: italic">AI 艺术字 (ControlNet Depth 模型)</figcaption>
</figure>

<figure>
  <img width="480" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/qrcode.jpg">
  <figcaption style="font-style: italic">创意二维码 (ControlNet QRCodeMonster 模型)</figcaption>
</figure> 

<figure>
  <img width="640" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/change-light.jpg">
  <figcaption style="font-style: italic">光影重绘 (ControlNet Tile 模型)</figcaption>
</figure>

<p>再后来又用爱人的照片做数据集，训练她自己的真人模型，效果也相当不错，她本人看到都惊叹于其相似度。</p>
<span id="more"></span>

<figure>
  <img width="720" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/repaint.jpg">
  <figcaption style="font-style: italic">用自训练的 LoRa 模型重绘网络图片 (已征得爱人同意)</figcaption>
</figure>

<p>这也算是将爱人美好的青春永驻在硬盘里了，哈哈哈。</p>
<p>OK, 这里只是简单介绍一下 AI 绘图，就不占用过多篇幅了，以后有空再聊聊 AI 绘图的各种应用。</p>
<h1 id="2-AI-辅助编程对于软件开发行业的冲击"><a href="#2-AI-辅助编程对于软件开发行业的冲击" class="headerlink" title="2. AI 辅助编程对于软件开发行业的冲击">2. AI 辅助编程对于软件开发行业的冲击</a></h1><p>与此同时，无论工作中还是休闲放松时做做开源应用，我都会使用 AI 辅助编程工具，比如早期的 Tabnine、Kite 等，后来又陆续尝试了 GitHub Copilot、JetBrains AI Assistant 等工具。
接触到 AI 辅助编程工具后，第一时间是惊奇，“太厉害了” “以后还要我们干啥” 这种言论充斥着整个同事圈。</p>
<figure>
  <img width="720" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/code-ai-assistant.jpg">
  <figcaption style="font-style: italic">AI 辅助编程</figcaption>
</figure>


<p>但随着深入的使用后，发现这种工具还是有一定局限性。比如它只能按照已有的轮子生成新的轮子，如果你让他解决业务问题，或者是互联网上很难搜到的内容，它也无能为力（当然未来会通过上下文接入需求看板来解决这个问题），有时候还会胡乱回答。</p>
<figure>
  <img width="420" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/ai-reply-casually.jpg">
  <figcaption style="font-style: italic">ChatGPT 一本正经的胡说八道</figcaption>
</figure>

<p>所以现阶段我们只能将 AI 辅助编程工具当做一个代码片段生成器，在写一些工具方法、解决算法问题或者是写一些简单的业务逻辑时，AI 辅助编程工具还是很有用的，能很大的节约人工成本。
以往我们都是靠自己的经验手敲或者去网上搜，现在只需要输入几个关键词，AI 就能帮我们生成代码片段，这样我们就能将更多的精力放在业务逻辑上，而不是在写代码上。</p>
<p>其实人工智能这个概念并不是近几年才被提出的，早在十几年前我们就已经生活在 AI 的时代了，比如我们常用的人脸(图像)识别、语音识别、聊天机器人、翻译机器人等，这些都是 AI 服务，甚至早在上个世纪就有一些简单的 AI 应用。</p>
<p>那为什么今年上半年 AI 又突然破圈火爆起来了呢？这就要提到以 OpenAI 公司的 GPT-3.5 大语言模型为基础的首个应用 ChatGPT 公开了。</p>
<h1 id="3-大语言模型时代"><a href="#3-大语言模型时代" class="headerlink" title="3. 大语言模型时代">3. 大语言模型时代</a></h1><p>GPT-3 是一个 1750 亿参数的大语言模型 (LLM, Large Language Model)，OpenAI 公司通过 ChatGPT 以聊天的形式将人工智能展现出来，破圈而出进入到大众人的视野中。它的出现刷新了人们对于人工智能的看法，也让人们见识到了人工智能的巨大发展潜力。</p>
<p>随后，各大公司纷纷开始研发大语言模型应用，比如百度的文心一言、阿里的通义千问、微软的 New Bing、Google 的 Bard 等等，背后大模型的参数量也是一个比一个夸张。</p>
<figure>
  <img width="640" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/llm.jpg">
  <figcaption style="font-style: italic">雨后春笋般的大语言模型 (网图)</figcaption>
</figure>

<p>为什么这些大模型如雨后春笋般的冒出来？<strong>正是因为 OpenAI 证明了大语言模型这条路子是可行的</strong>，而且效果显著，大家有了着力点，所以各大公司都开始研发大语言模型，希望能够在各自的领域占据一席之地。</p>
<p><strong>大语言模型的出现，让整个 AI 生态有了质的改变。</strong> 如果说图像识别是 AI 的眼睛，语音识别是耳朵，语音合成是嘴巴，散落在各地的各式传感器是触觉，新一代通信技术是神经系统，大数据时代海量的数据是书籍，那么大语言模型就是大脑，它通过各种 AI 技术获取到的信息，进行提取、分析、决策，最终输出结果。</p>
<blockquote>
<p>“人之所以比动物聪明，正是因为有了书籍，人类将其毕生所学记录下来，让后人能够少走弯路，不断积累，最终形成了今天的人类文明。 ”
—— 忘了谁说的</p>
</blockquote>
<p>随之产生一类基于大语言模型的自动化应用，比如 Auto-GPT，这类应用理论上可以做到<strong>几句话生成一个网站</strong>：</p>
<ol>
<li>通过你提供的几句话或关键字，利用 AI 绘图 + Web 开发相关的绘图模型，生成网站效果图</li>
<li>然后通过你提供的几句话需求和效果图，生成具体的需求文档</li>
<li>根据需求文档自动生成相应的测试用例</li>
<li>根据测试用例和需求文档自动生成相应的代码</li>
<li>自动执行测试，根据失败的测试自动修复 BUG 和重构代码</li>
<li>自动上云部署，最终生成一个完整可用的网站。</li>
</ol>
<figure>
  <img width="480" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/auto-gpt-workflow.jpg">
  <figcaption style="font-style: italic">Auto-GPT Workflow</figcaption>
</figure>

<p>在这期间，人类需要做的就是说出自己的需求并从 AI 生成的效果图和需求文档中进行微调，然后就是堆算力等时间，只要有足够计算资源，结合大模型做到这件事并不难。</p>
<h1 id="4-辐射"><a href="#4-辐射" class="headerlink" title="4. 辐射">4. 辐射</a></h1><blockquote>
<p>这里的辐射不是指日本核污水排海</p>
</blockquote>
<p>随着第一批受到直接影响的行业（软件开发、写作、设计领域），AI 大模型带来的影响会逐渐<strong>辐射</strong>到各个行业，比如金融、教育、法律、医疗、影视、游戏等等。
所以不止软件开发领域能吃到这口“山芋”，其他垂直领域也可训练自己的小模型，比如</p>
<ul>
<li><strong>法律行业</strong>：大数据时代海量的法律案例结合当下的各种法律文件，训练出法律模型，通过输入当事人的信息，就可以自动生成相应的法律文书，从而降低律师的工作量，提高效率。</li>
<li><strong>医疗行业</strong>：海量的病例、图纸、药品、病毒、细菌等数据结合当下的各种医疗文件，训练出医疗模型，通过输入病人的信息，就可以自动生成相应的诊断报告、药方、手术方案等，从而降低医生的工作量，提高效率。</li>
<li><strong>金融行业</strong>：海量的金融数据被背景，训练出金融模型，通过输入公司的财务数据或投资倾向，就可以自动生成相应的投资方向和财务分析报表，从而降低公司运营风险和寻找可能的着力点。</li>
<li><strong>公共运输</strong>：根据城市地图、人才密度和流动性，训练出公共运输模型，配合智能交通系统，可以让消防救援车辆一路绿灯，规划最优行驶路线。</li>
<li><strong>教育行业</strong>：这点更不用说，训练出适合年龄段和领域的教育模型后，配合个人的能力水平及学习水平，自动生成相应的互动式的学习资料，做到一对一针对性的教学。</li>
</ul>
<h1 id="5-经济危机"><a href="#5-经济危机" class="headerlink" title="5. 经济危机">5. 经济危机</a></h1><p>随着各种大模型的入局，被先后影响的各行各业、前几年 Covid-19 席卷全球、各国政治斗争等客观因素造成经济低迷，导致软件服务业、设计行业等职业需求量大幅下降，各公司裁员，缩减招聘规模，甚至很多中小型企业倒闭。</p>
<p>在这个过程中，那些繁琐但有规律的工作会被 AI 代替，以前需要10个人干活，现在只需要6个人就能完成，造成工作岗位的减少，从而导致失业率的上升。失业率上升后，人们的消费能力会下降，从而导致经济的低迷，人们更不愿意将自己的钱花出去而是存起来，进而导致通过紧缩。</p>
<blockquote>
<p>通货紧缩是指市场上流通的货币减少，货币的价值升高，商品及劳务价格总水平持续下跌。 在通货紧缩时期，由于流通货币的减少造成社会购买力下降，通常会引起商品和服务的平均价格水平下跌，形成价格通缩。 价格下跌对消费者来说看似是个好消息，但是通货紧缩会抑制投资与生产，造成经济衰退，引起失业、工资下降及房地产和股票市场的下跌。</p>
</blockquote>
<figure>
  <img width="360" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/stocks-down.jpg">
  <figcaption style="font-style: italic">市场低迷 (NVDA: <span style="font-style: normal;">🤭</span>)</figcaption>
</figure>

<blockquote>
<p>小科普：NVDA (Nvidia, 英伟达) 是生产显卡的厂商，显卡是 AI 训练的重要硬件，得益于 Nvidia CUDA 框架，Nvidia 显卡在 AI 训练领域占据了绝对的优势，所以 NVIDIA: 🤭</p>
</blockquote>
<p>而 AI 带来的挑战和影响还不止这些…</p>
<h1 id="6-隐私、道德与安全"><a href="#6-隐私、道德与安全" class="headerlink" title="6. 隐私、道德与安全">6. 隐私、道德与安全</a></h1><p>作为企业或个人，你没有足够的资源训练属于自己的模型，使用第三方平台提供的“免费资源”，你无形的就将属于自己&#x2F;企业的数据轻松并无偿的提供给了他人。你获得了你想要的，他们也获取到了他们想要的。
这看似是一种双赢的局面，实则是一种隐形的“剥削”，你的数据被他人利用，而你却毫无察觉。</p>
<blockquote>
<p>剥削：原指一种工人和雇主之间财产、权力不对等基础的剥削关系。这里指拥有海量资源的大公司和个体用户之间的信息不对等关系。</p>
</blockquote>
<p>AI 大模型的训练需要大量的数据，而这些数据往往是用户的隐私数据，比如你的照片、视频、语音、文字、位置、健康数据等等，这些数据都是你的隐私，但是你却不知道它们被用来训练 AI 模型了。</p>
<p>如果有若干你的照片，就可以通过绘图模型训练全方位高清的你的 3D 模型，进而制作你的任何图片、视频；</p>
<p>如果获得几句话你的语音，就可以通过语音合成模型提取你的声纹特征，即可用你的声音说出任何话；</p>
<p>如果有了你的位置数据，就可以自由的生成你通常的活动路线和所处地段，进而了解你的收入水平和资产实力；</p>
<figure>
  <img width="640" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/VALL-E-X.jpg">
  <figcaption style="font-style: italic">VALL-E X - 只需要你说一句话，就可以生成你的声纹模型</figcaption>
</figure>

<figure>
  <img width="640" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/faceswap.jpg">
  <figcaption style="font-style: italic">DeepFace Live 实时换脸 (网图)</figcaption>
</figure>


<p>暂停一下，问个问题：如果是你，拥有了这些数据和技术，你会做什么？</p>
<p>展开想想，你是否感受到了一丝恐惧？</p>
<p>不法分子可以利用你发在朋友圈的照片，制作不雅照片进行传播获利；<br>利用你发在短视频平台中的视频和语音，对你进行声纹采样，结合实时换脸技术合成视频，来敲诈你的亲人或朋友；<br>如果你身价够高的话，利用你的位置数据，制作你的活动路线，进而推测出你的收入、消费水平，然后在你不知情的情况下，将你的位置信息出售给不法分子，让他们对你进行跟踪、敲诈甚至绑架等等行为。</p>
<p>虽然现在各大网站都在呼吁道德问题，抵制 AI 等声音也络绎不绝，但这个问题并不能够一刀切，为什么呢？<br>一方面如果所有相关技术和学习资料都被明面上禁止，那么 AI 资源就会掌握在少数的几个国家或企业手中，未来的世界就会变成一个极权主义的世界；
另一方面，这些技术也不会因为禁止而消失，只会变得更加隐蔽，更加危险。</p>
<p>看完这些，你以后是否不敢在朋友圈或是短视频平台发自己的照片和视频了呢？杜绝各式各样的人脸采集系统？出门裹一个黑色面巾？语音通话要压着嗓子说？</p>
<p>作为普通民众的我们，就只能成为待宰的羔羊了吗？</p>
<h1 id="7-思考"><a href="#7-思考" class="headerlink" title="7. 思考">7. 思考</a></h1><p>近半年来我不断思考和怀疑自己，曾经拼搏和追求的技术卓越，在人工智能时代还有这个必要吗？经济危机下的我，是不是应该转行实业学个手艺做水暖电工？</p>
<p>第一次工业革命，以蒸汽机的出现为标志，生产工具发生了<strong>由手工形态向机器形态的质变</strong>，人类社会开始走向机械化时代，“解放”了大部分传统手工业者，但也带来较高的生产效率，从而降低了商品的价格。</p>
<p>第二次工业革命，以内燃机和电力的出现为标志，使得<strong>大规模化生产成为了主导性的生产方式</strong>，又“解放”了一群人，也大大降低的生产成本和和效率，使得我们能够轻而易举的用到各种塑料制品、电子产品、汽车等等，提高了人类的生活平均水平。</p>
<p>第三次工业革命，以计算机的出现为标志，使得人类进入了信息时代，人类的生产方式再次发生了质变，从以前的<strong>机械化生产方式，变成了信息自动化生产方式</strong>，人类的生产效率大大提高，也代替了人类进行一定程度的脑力劳动，再次“解放”了一群人。使得我们的物质生活和精神生活达到了前所未有的高度。</p>
<figure>
  <img width="640" src="https://static.mutoe.com/2023/challenges-and-opportunities-with-ai/industrial-revolution.jpg">
  <figcaption style="font-style: italic">前三次工业革命和正在进行的人工智能革命</figcaption>
</figure>


<p>大语言模型的入局，也会带来新一轮人工智能革命。可以预见的是，它将解放大部分的脑力劳动，也会“解放”一群人。</p>
<p>虽然作为可能被解放的人，但也不能因此就放弃对生活的热情。我们不能只看到 AI 带来的挑战，也要看到 AI 带来的机遇，即便是<strong>现在的我们，又何尝没有享受信息革命带来的红利呢？</strong>“高薪”的程序员、律师、设计师等，不就是信息革命的产物吗？</p>
<p>仔细观察，解放的这一群人，都是那些有高度可替代性基层人民和基础工作，会解放解放企业家和资本家吗？</p>
<p>企业家、资本家他们有什么能力是 AI 无法完成的？正是那些具有不可预测性的创造性工作和商业投资决策能力，这些都是 AI 无法完成的，所以他们不会被 AI 解放，反而会因为 AI 的出现而获得更多的利益。</p>
<p>容易联想，我们也能从人工智能革命中受益，比如：</p>
<ul>
<li>软件开发领域，初级程序员可以通过大语言模型快速上手软件开发，从而降低软件开发的门槛，提高效率。行外人也能为此得到更低廉的软件开发服务，让更多人享受到软件带来的便利（虽然它损害了软件开发行业的利益😭）；</li>
<li>法律行业律师的门槛也会降低；普通民众的我们甚至不再需要请律师（虽然它可能损害了法律行业的利益）</li>
<li>医疗领域，AI 的介入可以让原本不足的医疗资源得到缓解，通过 AI 辅助诊疗，帮助医生快速推测病因从而提高诊疗质量和效率；</li>
<li>影视、游戏行业也可利用 AI 生成各种场景、角色、剧本等，从而降低成本提高效率，让我们体验到更多好玩的游戏和看到更多高质量的大片。</li>
<li>或许会诞生新的职业，比如信息中介，通过不会使用 AI 的人和会使用 AI 的人之间的信息不对等，从而赚取差价。</li>
<li>找机会投资、创业，凭借毒辣的眼光入局 AI，成为下一代资本家…(或者倾家荡产😂)</li>
</ul>
<p>我想，被 AI 淘汰的并不是身处一线的程序员、设计师、画师、写手、律师等职业，而是那些<strong>不愿意学习、适应、改变</strong>的人。</p>
<p>另外，就在这个月，北京市卫健委也出台了互联网诊疗监管相关的政策，要求医生出诊前必须进行实名认证，不能由人工智能软件代替行医，严禁使用人工智能自动生成处方。
是的，AI 的出现确实会对医疗行业带来一定的帮助，但是 AI 也不是万能的，现阶段会出现不懂装懂以假乱真的情况，所以它只能辅助医生进行诊疗，而不能完全替代医生，毕竟生命无小事。</p>
<p>关于安全问题是亘古不变的话题，AI 是一把双刃剑，虽然它在某些方面能使我们的生活更加便利，但也要擦亮眼睛，多留个心眼。无论是 AI 生成的内容，还是互联网上传播的各种信息，不要轻易相信，多思考，多判断，多验证。</p>
<p>如果不幸你的照片或者声音被不法分子利用，我认为也不用太担心。AI 未来常态化后，大部分人都会对不寻常的事情保持警惕，不会轻易相信，这样不法分子就很难获得利益，从而减少了不法分子的行为。你需要做的就是加速这个过程，让自己的亲人、朋友都了解到现在的高科技犯罪手段，提高警惕，做到不相信、不打款、不转发。</p>
<h1 id="8-后话"><a href="#8-后话" class="headerlink" title="8. 后话">8. 后话</a></h1><p>胡言乱语一番，不是为了贩卖焦虑，只是为了让大家在这个经济低迷的时代，不要放弃对生活的热情。想起和好友雨哥(Yu Wang)闲聊时他曾说过：“在AI的时代，<strong>我们虽然吃不到肉，但是汤还是能喝点的。</strong>”<br>这句话对我还是影响不小，深刻思考后，我没有以前那么焦虑了，我认为不光是 AI 领域，所有领域都是一样的，只要你有毅力，保持对生活的热情，想喝口汤还是有很多机会的。</p>
<p>聪明的你，看看能做点什么？抓住风口浪尖，成为革命后的资本家(不是🤐)。</p>
<p>如果实在不知道干什么，没有想法，还是焦虑，那么趁现在锻炼锻炼身体也是好的，让子弹飞一会儿~</p>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料：">参考资料：</a></h1><ul>
<li><a href="https://github.com/CompVis/stable-diffusion">CompVis&#x2F;Stable Diffusion - GitHub</a></li>
<li><a href="https://www.bilibili.com/video/BV1MY4y1R7EN">万字科普GPT4为何会颠覆现有工作流 - Bilibili YJango</a></li>
<li><a href="https://medium.com/codingthesmartway-com-blog/auto-gpt-agentgpt-the-groundbreaking-ai-innovations-you-need-to-know-cc7820463d4b">Auto-GPT &amp; AgentGPT: The Groundbreaking AI Innovations You Need to Know - Sebastian</a></li>
<li><a href="https://www.bbc.com/zhongwen/simp/chinese-news-66506966">失业率：中国停止发布青年失业数据，今年以来屡创历史新高 - BBC</a></li>
<li><a href="http://html.rhhz.net/kjdb/20171504.htm">人工智能应用中的安全、隐私和伦理挑战及应对思考 - 科技导报</a></li>
<li><a href="https://www.chinanews.com.cn/sh/2023/07-12/10041346.shtml">AI换脸骗局背后：AI实时换脸技术 百元左右随意买卖 - 中国新闻网</a></li>
<li><a href="https://www.bilibili.com/video/BV1Dh4y1K7qJ">仅需3秒音频实现声音克隆！我开源了微软的最新语音合成模型VALL-E X - Bilibili 茳氵茗 </a></li>
<li><a href="https://bj.bjd.com.cn/5b165687a010550e5ddc0e6a/contentShare/5e799028e4b0f99f4df7a04e/AP64e5eb5ae4b00547e3ddc64f.html">禁止AI处方！AI再能，也不能坐堂行医 - 北京日报</a></li>
<li><a href="https://zh.wikipedia.org/zh-sg/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%B7%A5%E4%B8%9A%E9%9D%A9%E5%91%BD">第二次工业革命 - Wikipedia</a></li>
<li><a href="https://www.yicai.com/news/101732748.html">奇点将至：AI或开启新一轮科技革命 - 李迅雷、张文宇</a></li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>FastStone Image Viewer - 轻量级图像查看器</title>
    <url>//2017/app-recommend-fastone-image-viewer/</url>
    <content><![CDATA[<p><strong>写在前面:</strong>
应用推荐的相关文章其实一直想做, 因为我自己用的一些软件或应用都非常小众, 感觉很轻量 &#x2F; 实用, 不像 360 全家桶那些应用浓重的商业气味. 这类软件知道的人不多, 介绍给朋友时他们总有种 “你哪来这么多有意思的软件啊!” 的感觉, 所以写下这个系列的文章, 让这类软件让更多的人知道, 支持作者, 支持优质应用 !</p>
<p>我先慢慢积累一些推荐, 后面我会做成一个应用小仓库之类的东西, 推荐一些小众的、轻量的、实用性非常高的应用程序。</p>
<span id="more"></span>

<hr>
<h2 id="FastStone-Image-Viewer"><a href="#FastStone-Image-Viewer" class="headerlink" title="FastStone Image Viewer">FastStone Image Viewer</a></h2><p><img src="//static.mutoe.com/2017/app-recommend-fastone-image-viewer/faststone.jpg" alt="faststone"></p>
<p><a href="http://www.faststone.org/">http://www.faststone.org/</a> (需翻墙)</p>
<h2 id="1-应用简介"><a href="#1-应用简介" class="headerlink" title="1. 应用简介">1. 应用简介</a></h2><p>运行平台 : Win 7&#x2F;8&#x2F;10
是否付费 : 完全免费
应用大小 : 6.4 M
中文支持 : 官方支持
安装方式 : 注册安装 (需管理员权限)</p>
<h2 id="2-功能概述"><a href="#2-功能概述" class="headerlink" title="2. 功能概述">2. 功能概述</a></h2><p>在一些内存只有 2GB 或 4GB 的电脑程序开多了就显得有些吃力, 对于一些文字工作者来说, 在文章中使用图片还是比较频繁的, 这时候你开着浏览器打开几个网页, 一个 WORD 程序, 听着音乐, 用 ACDSee \ Bridge \ 美图看看 甚至 windows 图片查看器找些配图, 再开个 Photoshop, 你的电脑肯定已经开始有些卡顿了.</p>
<p>我相信你一定需要一款轻量级的软件, 最好还附带一些简单的编辑功能. FastStone Image Viewer 这款软件就适用于这种场景.</p>
<p><em>以下内容均在虚拟机中运行并演示.</em></p>
<h3 id="图片浏览"><a href="#图片浏览" class="headerlink" title="图片浏览">图片浏览</a></h3><p>作为一个图像管理器, 图片浏览应该是最基本的功能了. FastStone 的主界面虽然不是那么美观, 但中规中矩, 基本功能应有尽有.</p>
<p><img src="//static.mutoe.com/2017/app-recommend-fastone-image-viewer/viewer.jpg" alt="图片浏览"></p>
<p>在全屏浏览模式下, 鼠标移至屏幕顶部可显示当前文件夹下的图片概览, 底部可显示导航及一些小工具快捷方式.</p>
<p><img src="//static.mutoe.com/2017/app-recommend-fastone-image-viewer/view-top-down.jpg" alt="顶部和底部小工具"></p>
<p>左侧显示比较全面的对图片的调整操作, 而右侧则能看到当前图像的一些元数据及直方图等数据.</p>
<p><img src="//static.mutoe.com/2017/app-recommend-fastone-image-viewer/view-left-right.jpg" alt="左边和右边小工具"></p>
<h3 id="图片编辑"><a href="#图片编辑" class="headerlink" title="图片编辑">图片编辑</a></h3><p>如上图左侧工具栏所示, 这款软件能进行图片旋转、调整尺寸&#x2F;画布大小、裁切、模糊、调色、降噪等基本功能, 软件还带了一些简单的图片滤镜, 如素描 &#x2F; 浮雕 &#x2F; 移轴模糊等.</p>
<h3 id="图像格式转换及压缩"><a href="#图像格式转换及压缩" class="headerlink" title="图像格式转换及压缩">图像格式转换及压缩</a></h3><p>这项功能的强大也是我在众多图像浏览软件里选择这款软件的原因之一, 压缩效率可谓之高.
一个 1080P 大小 PNG 格式的截图大约在 1M 左右 (这取决于画面复杂程度), 经过软件转换格式压缩后, 能基本 “无损” 压缩至一半大小, 在一些情况下还会有惊喜 !</p>
<p><img src="//static.mutoe.com/2017/app-recommend-fastone-image-viewer/compression.png" alt="图像压缩"></p>
<p>软件也支持批量操作, 对于一类的图片能非常方便的进行图片编辑中的__所有操作__ !</p>


<h2 id="3-使用技巧"><a href="#3-使用技巧" class="headerlink" title="3. 使用技巧">3. 使用技巧</a></h2><h3 id="修改图片默认打开方式"><a href="#修改图片默认打开方式" class="headerlink" title="修改图片默认打开方式">修改图片默认打开方式</a></h3><p>我在虚拟机中安装完毕后双击图片打开居然还是用的原来的图片浏览器, 原来软件默认没有注册打开方式. 我们进入设置页面, 文件关联选项卡下面点击全选即可.</p>
<p><img src="//static.mutoe.com/2017/app-recommend-fastone-image-viewer/link.png" alt="默认打开方式"></p>
<h3 id="退出软件时取消确认提示"><a href="#退出软件时取消确认提示" class="headerlink" title="退出软件时取消确认提示">退出软件时取消确认提示</a></h3><p>默认情况下按 ESC 退出程序时会弹出一个小对话框, 勾选 ‘不再显示次对话框’ 即可.</p>
<p><img src="//static.mutoe.com/2017/app-recommend-fastone-image-viewer/quit.png" alt="退出确认"></p>
<h3 id="强大的自定义功能"><a href="#强大的自定义功能" class="headerlink" title="强大的自定义功能">强大的自定义功能</a></h3><p>软件的设置页面提供了非常多的选项, 每个人可以根据自己的使用习惯进行调整, 不要被这么多文字及选项吓到了, 磨刀不误砍柴工, 花 10 分钟来了解这个软件可为日后的使用节约大把的时间.</p>
<p><img src="//static.mutoe.com/2017/app-recommend-fastone-image-viewer/setting.png" alt="设置页面"></p>
<p>无论你是一个电脑小白, 还是一个资深极客, 你都__不应该错过每款软件的设置页面__, 别不相信, 一些 “微不足道” 的细节足以改变一款软件的使用寿命.</p>
<h2 id="4-同类软件"><a href="#4-同类软件" class="headerlink" title="4. 同类软件">4. 同类软件</a></h2><p>简单评价一下我使用过的其他图像浏览(图像管理)工具.</p>
<h3 id="Adobe-Bridge"><a href="#Adobe-Bridge" class="headerlink" title="Adobe Bridge">Adobe Bridge</a></h3><p>如果你是一个从事设计类的工作者, 那这款软件你不应该错过. 它是属于 Adobe 全家桶中的一员, 能完美兼容 Photoshop &#x2F; Illustrator 等软件.
它还有一个特点, 就是它可以给每张图片设置若干标签, 这样当你图片比较多时, 想选出与某主题相关的照片就方便许多了. 这项功能似乎是写在图像元数据中的, 也就是说, 只要你是用 Adobe 系列的软件, 标签就不会丢失.</p>
<h3 id="ACDSee"><a href="#ACDSee" class="headerlink" title="ACDSee">ACDSee</a></h3><p>这款软件是 Google 旗下的一款图像浏览器, 在很早的时候用过很久, 可以很方便的管理计算机内的图片.
但这款软件大版本迭代太快了, 随着时间推进, 占用资源越来越多, 甚至还需要付费使用, 让我不得不放弃使用这款软件.</p>
<h3 id="美图看看"><a href="#美图看看" class="headerlink" title="美图看看">美图看看</a></h3><p>这款软件最开始是美图秀秀绑在我电脑上的, 但用起来似乎还不错, 在较老的一些机器上也能比较流畅的运行.
最主要的是界面也比较美观, 在使用 FastStone 之前我就是一直在使用这款图像浏览器, 以至于后面卸载了美图秀秀之后还专门下载了这款软件的独立版本.
这款软件同样也有批量重命名和处理的功能, 但不如 FastStone 那样强大, 如果你比较__在乎软件的外观并且不是经常用来批量处理图片__, 这款软件也推荐给你.</p>
<p>如果你也想看其他同类软件的横评, 请在下方评论区留言, 我看到后会尽量使用一段时间并简单分享.</p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址">下载地址</a></h2><p><strong>网盘分流</strong>
<a href="https://pan.baidu.com/s/1o82Sj4A">百度网盘</a>
<a href="https://mega.nz/#!PthzGbDL!HHkgZEKrarL66OQlr5h_gtN_68ecjTtHJU0tzFpctPY">MEGA网盘</a>
<em>更新日期 2017-3-22 软件版本 6.2
安装包大小: 6.37 MB 安装后大小: 15.8 MB</em></p>
<p><strong>其他渠道</strong>
<a href="http://xiazai.zol.com.cn/detail/10/99979.shtml">ZOL软件</a>
<a href="http://download.pchome.net/multimedia/viewer/detail-19822.html">PCHOME</a></p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>应用推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>Bash Shell 学习笔记</title>
    <url>//2020/bash-shell-study-notes/</url>
    <content><![CDATA[<p>这里记录了一些个人学习 Bash Shell 时遇到的一些问题, 可以作为避免踩坑和速查手册. 如有疑问欢迎留言.</p>
<span id="more"></span>

<h1 id="变量"><a href="#变量" class="headerlink" title="变量">变量</a></h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串">字符串</a></h2><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p>
<h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号">单引号</a></h3><p>单引号里任何字符都会原样输出，变量也是无效的，也无法对单引号进行转义。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&#x27;this is a string&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="双引号和字符串的拼接"><a href="#双引号和字符串的拼接" class="headerlink" title="双引号和字符串的拼接">双引号和字符串的拼接</a></h3><p>双引号就可以随意的进行转义啦！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;mutoe&quot;</span></span><br><span class="line">greeting=<span class="string">&quot;hello, <span class="variable">$name</span> !&quot;</span> <span class="comment"># =&gt; hello, mutoe !</span></span><br><span class="line">greeting=<span class="string">&quot;hello, &quot;</span><span class="variable">$name</span><span class="string">&quot; !&quot;</span> <span class="comment"># =&gt; hello, mutoe !</span></span><br><span class="line">greeting=<span class="string">&quot;hello, <span class="variable">$&#123;name&#125;</span>!&quot;</span> <span class="comment"># =&gt; hello, mutoe!</span></span><br><span class="line">quote_greeting=<span class="string">&quot;hello, \&quot;<span class="variable">$name</span>\&quot; !&quot;</span> <span class="comment"># =&gt; hello, &quot;mutoe&quot; !</span></span><br></pre></td></tr></table></figure>

<h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度">获取字符串长度</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#abcd&#125;</span> <span class="comment"># =&gt; 4</span></span><br></pre></td></tr></table></figure>

<h3 id="获取子字符串"><a href="#获取子字符串" class="headerlink" title="获取子字符串">获取子字符串</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># =&gt; bcde</span></span><br></pre></td></tr></table></figure>

<h3 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串">分割字符串</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">str=<span class="string">&quot;a,b,c,d&quot;</span></span><br><span class="line">arr=$(<span class="built_in">echo</span> <span class="variable">$str</span> | <span class="built_in">tr</span> <span class="string">&quot;;&quot;</span> <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable">$arr</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$item</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组">数组</a></h2><p>数组使用小括号定义</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明数组</span></span><br><span class="line">array=(1 2 a b <span class="string">&quot;foo&quot;</span>)</span><br><span class="line">array[10]=bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数组</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[3]&#125;</span> <span class="comment"># =&gt; b</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[9]&#125;</span> <span class="comment"># =&gt; </span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[10]&#125;</span> <span class="comment"># =&gt; bar</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[*]&#125;</span> <span class="comment"># =&gt; 1 2 a b foo bar</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[@]&#125;</span> <span class="comment"># =&gt; 1 2 a b foo bar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数组长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[*]&#125;</span> <span class="comment"># =&gt; 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取字符串元素长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[10]&#125;</span> <span class="comment"># =&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line"><span class="built_in">unset</span> array[1]</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[*]&#125;</span> <span class="comment"># =&gt; 1 a b foo bar</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[*]&#125;</span> <span class="comment"># =&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接数组</span></span><br><span class="line">new_arr=(0 <span class="variable">$&#123;array[*]&#125;</span> z)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;new_arr[*]&#125;</span> <span class="comment"># =&gt; 0 1 a b foo bar z</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;new_arr[6]&#125;</span> <span class="comment"># =&gt; z</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数组</span></span><br><span class="line"><span class="built_in">unset</span> new_arr</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$new_arr</span> <span class="comment"># =&gt; </span></span><br></pre></td></tr></table></figure>

<h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组">关联数组</a></h3><p>Bash shell 中可以使用字符串作为数组的下标，类似 Map 对象</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">declare</span> -A color</span><br><span class="line">color[<span class="string">&quot;red&quot;</span>]=<span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">color[<span class="string">&quot;green&quot;</span>]=<span class="string">&quot;#00ff00&quot;</span></span><br><span class="line">color[<span class="string">&quot;blue&quot;</span>]=<span class="string">&quot;#0000ff&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$color</span></span><br></pre></td></tr></table></figure>

<h1 id="条件"><a href="#条件" class="headerlink" title="条件">条件</a></h1><h2 id="if"><a href="#if" class="headerlink" title="if">if</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">  ...</span><br><span class="line">elif condition2</span><br><span class="line">then</span><br><span class="line">  ...</span><br><span class="line">else</span><br><span class="line">  ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实际上，if 检测的是一条命令的退出状态。</p>
</blockquote>
<details>
<summary>Example</summary>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=$[2*3]</span><br><span class="line">b=$[1+5]</span><br><span class="line">if [ $a == $b ]; then</span><br><span class="line">    echo &quot;a == b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
</details>

<h2 id="case"><a href="#case" class="headerlink" title="case">case</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$var</span> <span class="keyword">in</span></span><br><span class="line">1)</span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  ;; <span class="comment"># break (required)</span></span><br><span class="line"><span class="variable">$const</span>|2） <span class="comment"># or</span></span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  ;;</span><br><span class="line">*) <span class="comment"># default</span></span><br><span class="line">  command1</span><br><span class="line">  command2</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<!--
# 循环

## for

## while

## until
-->

<h1 id="注释"><a href="#注释" class="headerlink" title="注释">注释</a></h1><p>以 <code>#</code> 开始的部分就是注释， sh里没有多行注释，只能每行加一个 <code>#</code> 号</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://wiki.jikexueyuan.com/project/shell-tutorial">Shell 教程 - c语言中文网</a></li>
<li><a href="https://stackoverflow.com/q/918886/7736393">How do I split a string on a delimiter in Bash?</a></li>
<li>[shell中各种括号的作用()、(())、[]、[[]]、{}](<a href="https://blog.csdn.net/taiyang1987912/article/details/39551385">https://blog.csdn.net/taiyang1987912/article/details/39551385</a>)</li>
<li><a href="https://linuxize.com/post/bash-check-if-file-exists/">How to Check if a File or Directory Exists in Bash - Linuxize</a></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Bash</tag>
        <tag>Shell Script</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome 浏览器的一些使用小技巧</title>
    <url>//2017/chrome-uses-tips/</url>
    <content><![CDATA[<h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧">使用技巧</a></h1><p>现在的互联网都鼓励大家使用 Chrome 浏览器，它很强大，本身简洁，支持非常多的插件。但正因如此，大家都比较懒不愿意去花时间学习适应一个新的产品去打造适合自己的浏览器，所以我在这里写下一些使用 Chrome 浏览器的小技巧供大家参考学习。</p>
<h2 id="搜索引擎相关"><a href="#搜索引擎相关" class="headerlink" title="搜索引擎相关">搜索引擎相关</a></h2><p>相信不少朋友不愿意使用 chrome 浏览器是因为它默认的搜索引擎是 google，而对于国内环境来说，普通用户不使用特别手段是上不了 google.com 的，所以你在地址栏输入向搜索的关键词时会跳转到 google 导致无法显示，从而必须先进入到 baidu.com 然后再进行搜索。</p>
<h3 id="修改默认搜索引擎"><a href="#修改默认搜索引擎" class="headerlink" title="修改默认搜索引擎">修改默认搜索引擎</a></h3><p>那有没有简单的方法能够将 chrome 浏览器的默认搜索引擎切换为百度呢？当然有。</p>
<p>进入设置页面，找到 <code>搜索引擎</code> 一栏，将默认搜索引擎切换为百度即可</p>
<p><img src="//static.mutoe.com/2017/chrome-uses-tips/switch-search-engine.png" alt="switch-search-engine"></p>
<h3 id="快捷切换搜索引擎"><a href="#快捷切换搜索引擎" class="headerlink" title="快捷切换搜索引擎">快捷切换搜索引擎</a></h3><p>学到了上面的方法你还不满足，我想在多个搜索引擎中自由切换，比如搜技术类作品用 github，搜视频用 bilibili，搜百科用 wikipedia，搜地名用 map.baidu.com。</p>
<p>按照一般思路，搜百科用 wikipedia 的话要先去 <code>zh.wikipedia.org</code>，然后在该站点的搜索栏中键入要查询的关键字，总共两个步骤。</p>
<p>那我现在教你一个快捷的方法：直接在地址栏键入 wikipedia，然后按下 <code>tab</code> 键，会发现地址栏变成这样：（不过要保证你之前用过 wikipedia 的搜索功能）</p>
<span id="more"></span>

<p><img src="//static.mutoe.com/2017/chrome-uses-tips/wiki-search.png" alt="wiki-search"></p>
<p>然后直接输入你要搜索的关键词如 <code>博客</code>，然后按下回车就能直接跳到 wikipedia 的搜索结果页啦。</p>
<p><img src="//static.mutoe.com/2017/chrome-uses-tips/quick-switch.png" alt="quick-switch"></p>
<blockquote>
<p><strong>为什么我按下 <code>tab</code> 键地址栏没有变成你那样呢？</strong></p>
</blockquote>
<blockquote>
<p>这是因为你的 chrome 没有检测到这个网站的搜索引擎，你也可以手动添加。
在 <code>搜索引擎</code> 设置一览，找到 <code>管理搜索引擎</code>，然后在 <code>其他搜索引擎</code> 标签的右侧找到 <code>添加</code> 按钮。
<img src="//static.mutoe.com/2017/chrome-uses-tips/add-custom-search-engine.png" alt="add-custom-search-engine">
然后在弹出的窗口中输入你想添加的搜索引擎
<img src="//static.mutoe.com/2017/chrome-uses-tips/add-custom-dialog.png" alt="add-custom-dialog"></p>
</blockquote>
<p>只要你想，只要那个网站支持，什么都可以直接搜。更爽的是，只要你用过某个网站的搜索功能，他就会自动的收录在 <code>其他搜索引擎</code> 的列表中而不用你去一个个手动添加。</p>
<p>我在这里列举出了一些常用的搜索引擎，如果你有需要可以按照上面的方式自行添加。</p>
<ul>
<li>百度 <code>https://www.baidu.com/#ie=&#123;inputEncoding&#125;&amp;wd=%s</code></li>
<li>天猫 <code>http://list.tmall.com/search_product.htm?q=%s</code></li>
<li>京东 <code>http://search.jd.com/Search?keyword=%s&amp;enc=utf-8</code></li>
<li>bilibili <code>http://www.bilibili.tv/search?keyword=%s</code></li>
<li>微博 <code>http://s.weibo.com/weibo/%s</code></li>
<li>google 翻译 <code>http://translate.google.cn/?source=osdd#auto|auto|%s</code></li>
<li>知乎 <code>http://www.zhihu.com/search?q=%s</code></li>
<li>熊猫 TV <code>http://www.panda.tv/search?kw=%s</code></li>
<li>github <code>https://github.com/search?q=%s</code></li>
<li>百度贴吧 <code>http://tieba.baidu.com/f?kw=%s</code></li>
<li>阮一峰的博客 <code>http://www.ruanyifeng.com/blog/search.html?q=%s</code></li>
</ul>
<h1 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐">插件推荐</a></h1><p>( 未完占坑 )</p>
<h2 id="增强易用性"><a href="#增强易用性" class="headerlink" title="增强易用性">增强易用性</a></h2><h3 id="广告拦截器-uBlock-Origin"><a href="#广告拦截器-uBlock-Origin" class="headerlink" title="广告拦截器 uBlock Origin">广告拦截器 uBlock Origin</a></h3><h3 id="油猴脚本-Tampermonkey"><a href="#油猴脚本-Tampermonkey" class="headerlink" title="油猴脚本 Tampermonkey">油猴脚本 Tampermonkey</a></h3><h3 id="暂存标签"><a href="#暂存标签" class="headerlink" title="暂存标签">暂存标签</a></h3><h3 id="代理快速切换-SwitchyOmega"><a href="#代理快速切换-SwitchyOmega" class="headerlink" title="代理快速切换 SwitchyOmega">代理快速切换 SwitchyOmega</a></h3><h3 id="一键分屏-Tab-Resize"><a href="#一键分屏-Tab-Resize" class="headerlink" title="一键分屏 Tab Resize">一键分屏 Tab Resize</a></h3><h2 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具">开发者工具</a></h2><h3 id="格式化工具-JSON-Viewer"><a href="#格式化工具-JSON-Viewer" class="headerlink" title="格式化工具 JSON Viewer">格式化工具 JSON Viewer</a></h3><h3 id="Vue-开发者工具-Vue-Devtools"><a href="#Vue-开发者工具-Vue-Devtools" class="headerlink" title="Vue 开发者工具 Vue Devtools">Vue 开发者工具 Vue Devtools</a></h3><h3 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload">LiveReload</a></h3><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后">写在最后</a></h3><p>如果你有其他的小技巧或插件，也可以 <a href="mailto:mutoe@foxmail.com">联系我</a> 或去 <a href="https://github.com/mutoe/mutoe.github.io/blob/source/source/_posts/chrome-users-tips.md">这个文章的 github</a> 点击右上角的编辑, 提交 <code>pull request</code> 来参与编辑这篇文章，我会将补充上的内容注明你的名字，共同分享学习。</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Browser</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>比较 javascript 中 filter 和 splice 删除数组的性能</title>
    <url>//2019/compare-filter-vs-splice-in-javascript/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言">前言</a></h1><p>因为最近在项目中经常需要将数组中的一个元素从数组中剔除，基于 ES6 的选择有比较多，
产生了一个关于几种方法之间执行效率的疑惑，网上也没有太多资料，于是乎本着学习性能测试的想法，展开了一段性能测试的旅程</p>
<h1 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具">测试工具</a></h1><ul>
<li><code>benchmark</code> 性能测试核心依赖</li>
<li><code>mockjs</code> 生成假数据</li>
<li><code>lodash</code> 提供另外的筛选数组的方法用于参照</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add benchmark mockjs lodash</span><br></pre></td></tr></table></figure>

<h1 id="测试思路"><a href="#测试思路" class="headerlink" title="测试思路">测试思路</a></h1><p>首先定义四种方法来测试数据删除操作，他们分别是 <code>Array.prototype.filter</code> <code>Array.prototype.splice</code> <code>lodash.reject</code> <code>lodash.filter</code> </p>
<p>然后使用 <code>mockjs</code> 生成两个数组，长度分别是 100 和 1000，用四种方法分别对这两组数据进行测试。<br>需要注意的是，在测试时需要对测试数组进行深拷贝，避免他们之间相互影响(毕竟 <code>Array.prototype.splice</code> 会改变原数组)</p>
<p>然后我们对其中一组数据进行测试，来校验我们写的方法是否正确</p>
<p>最后运行 <code>benchmark</code>，比较结果得出结论</p>
<span id="more"></span>

<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码">测试代码</a></h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// benchmark.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入相关依赖</span></span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; mock, <span class="title class_">Random</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Benchmark</span> = <span class="built_in">require</span>(<span class="string">&#x27;benchmark&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> suite = <span class="keyword">new</span> <span class="title class_">Benchmark</span>.<span class="title class_">Suite</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.prototype.filter</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span> (array, id) &#123;</span><br><span class="line">  <span class="keyword">return</span> array.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span> (array, id) &#123;</span><br><span class="line">  <span class="keyword">const</span> index = array.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span>).<span class="title function_">indexOf</span>(id)</span><br><span class="line">  array.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lodash.reject</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun3</span> (array, id) &#123;</span><br><span class="line">  <span class="keyword">return</span> _.<span class="title function_">reject</span>(array, <span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lodash.filter</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun4</span> (array, id) &#123;</span><br><span class="line">  <span class="keyword">return</span> _.<span class="title function_">filter</span>(array, <span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> !== id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成两组假数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;generate data&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> data100 = <span class="title function_">mock</span>(&#123; <span class="string">&#x27;array|100&#x27;</span>: [&#123; <span class="string">&#x27;id|+1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="title class_">Random</span>.<span class="title function_">name</span>(), <span class="string">&#x27;content&#x27;</span>: <span class="title class_">Random</span>.<span class="title function_">paragraph</span>() &#125;] &#125;).<span class="property">array</span></span><br><span class="line"><span class="keyword">const</span> data1000 = <span class="title function_">mock</span>(&#123; <span class="string">&#x27;array|1000&#x27;</span>: [&#123; <span class="string">&#x27;id|+1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="title class_">Random</span>.<span class="title function_">name</span>(), <span class="string">&#x27;content&#x27;</span>: <span class="title class_">Random</span>.<span class="title function_">paragraph</span>() &#125;] &#125;).<span class="property">array</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;generate data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">eval</span>(<span class="string">`fun<span class="subst">$&#123;i&#125;</span>([...data100], 2)`</span>)</span><br><span class="line">  <span class="keyword">if</span> (result[<span class="number">1</span>].<span class="property">id</span> !== <span class="number">3</span> || result.<span class="property">length</span> !== <span class="number">99</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`fun<span class="subst">$&#123;i&#125;</span> test failed.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开测</span></span><br><span class="line">suite</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;Array.prototype.filter 100&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fun1</span>(data100, <span class="number">50</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;Array.prototype.splice 100&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fun2</span>(data100, <span class="number">50</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;lodash.reject 100&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fun3</span>(data100, <span class="number">50</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;lodash.filter 100&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fun4</span>(data100, <span class="number">50</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;Array.prototype.filter 1000&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fun1</span>(data1000, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;Array.prototype.splice 1000&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fun2</span>(data1000, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;lodash.reject 1000&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fun3</span>(data1000, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;lodash.filter 1000&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fun4</span>(data1000, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">on</span>(<span class="string">&#x27;cycle&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(event.<span class="property">target</span>).<span class="title function_">padStart</span>(<span class="number">80</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">on</span>(<span class="string">&#x27;complete&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Faster is &#x27;</span> + <span class="variable language_">this</span>.<span class="title function_">filter</span>(<span class="string">&#x27;fastest&#x27;</span>).<span class="title function_">map</span>(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">run</span>(&#123;</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试">运行测试</a></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node benchmark.js</span><br></pre></td></tr></table></figure>

<h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果">测试结果</a></h1><pre><code>generate data: 24.946ms
test: 1.099ms

      Array.prototype.filter 100 x 1,917,735 ops/sec ±0.77% (89 runs sampled)
     Array.prototype.splice 100 x 12,774,324 ops/sec ±0.54% (90 runs sampled)
              lodash.reject 100 x 26,526,046 ops/sec ±0.64% (91 runs sampled)
              lodash.filter 100 x 47,850,218 ops/sec ±0.91% (91 runs sampled)

       Array.prototype.filter 1000 x 169,970 ops/sec ±6.32% (92 runs sampled)
    Array.prototype.splice 1000 x 12,802,157 ops/sec ±0.71% (86 runs sampled)
             lodash.reject 1000 x 26,534,300 ops/sec ±0.63% (92 runs sampled)
             lodash.filter 1000 x 47,920,887 ops/sec ±0.55% (93 runs sampled)

Faster is lodash.filter 1000,lodash.filter 100
</code></pre>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论">结论</a></h1><ul>
<li><code>Array.prototype.filter</code> 最最最最最最慢</li>
<li><code>Array.prototype.splice</code>  略慢</li>
<li><code>lodash.reject</code> 略快</li>
<li><code>lodash.filter</code> 最快</li>
</ul>
<p>在数据量较大时，<code>Array.prototpe.filter</code> 方法会随着数组长度越来越慢，其他几种则似乎不太受影响。</p>
<p>在项目不使用 lodash 依赖或数据量较小时，可优先考虑 <code>Array.prototype.splice</code> 方法，不过要注意，<code>Array.prototype.splice</code> 会改变原数组</p>
<blockquote>
<p>也不知道 lodash 内部用了什么黑科技，比 js 原生的 splice 还要快，有机会研究一下 lodash 源码，忙里偷闲写了篇文章，先继续工作了</p>
</blockquote>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Benchmark</tag>
        <tag>Mockjs</tag>
        <tag>Lodash</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Javascript 将内容复制到剪贴板</title>
    <url>//2019/copy-content-to-clipboard-in-javascript/</url>
    <content><![CDATA[<p>在 js 中，将内容复制到剪贴板的原理是利用 <code>document.execCommand()</code> 方法进行操作.</p>
<h1 id="document-execCommand"><a href="#document-execCommand" class="headerlink" title="document.execCommand()">document.execCommand()</a></h1><p><code>document.execCommand()</code> 的签名是这样的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bool = <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(aCommandName, aShwoDefaultUI, aValueArgument)</span><br></pre></td></tr></table></figure>

<p>需要注意的是，该命令复制的内容是当前页面选中的内容.</p>
<span id="more"></span>

<h2 id="Return-value"><a href="#Return-value" class="headerlink" title="Return value">Return value</a></h2><p>返回一个 <code>Boolean</code> 值，如果不支持或被禁用就返回false.</p>
<blockquote>
<p>注意不要使用返回值来验证用户浏览器是否支持该方法.</p>
</blockquote>
<h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters">Parameters</a></h2><h3 id="aCommandName"><a href="#aCommandName" class="headerlink" title="aCommandName"><code>aCommandName</code></a></h3><p>要执行的命令的名称. 我们使用复制方法时，该值为 <code>copy</code>.</p>
<blockquote>
<p>所有支持的命令参见 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand#Commands">命令</a></p>
</blockquote>
<h3 id="aShwoDefaultUI"><a href="#aShwoDefaultUI" class="headerlink" title="aShwoDefaultUI"><code>aShwoDefaultUI</code></a></h3><p>指示是否应显示默认用户界面的布尔值。这在Mozilla中没有实现。（？？什么界面？？啥东西啊？？在说什么）</p>
<h3 id="aValueArgument"><a href="#aValueArgument" class="headerlink" title="aValueArgument"><code>aValueArgument</code></a></h3><p>额外参数，有些命令才会需要到。</p>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性">兼容性</a></h2><blockquote>
<p>from <a href="https://caniuse.com/#feat=document-execcommand">Caniuse</a></p>
</blockquote>
<p><img src="//static.mutoe.com/2019/copy-content-to-clipboard-in-javascript/docuemnt.execCommand-compatibility.png" alt="docuemnt.execCommand-compatibility"></p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage">Usage</a></h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;demoInput&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello world&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#demoInput&#x27;</span>)</span><br><span class="line">  input.<span class="title function_">select</span>()</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复制成功&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复制失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如我我们想要复制的不是输入框内的东西呢？我们来创建一个输入框再复制即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>)</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(input)</span><br><span class="line">  input.<span class="title function_">setAttribute</span>(<span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;复制我&#x27;</span>)</span><br><span class="line">  input.<span class="title function_">select</span>()</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复制成功&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复制失败&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(input)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="坑"><a href="#坑" class="headerlink" title="坑">坑</a></h1><blockquote>
<p>感谢 <a href="https://github.com/axuebin">@axuebin</a> 提醒</p>
</blockquote>
<ul>
<li><p>在 IOS 下会出现白屏抖动 😡</p>
<p>是因为先拉起了又收回了键盘. 解决办法，在代码中添加 <code>input.setAttribute(&#39;readonly&#39;, &#39;readonly&#39;)</code> 设置 <code>input</code> 为只读即可.</p>
</li>
<li><p>在 IOS 下无法复制 😡</p>
<p>是因为 <code>input.select()</code> 在 IOS 下没有选中全部内容. 我们使用 <code>input.setSelectionRange(0, input.value.length)</code> 即可.</p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接">参考链接</a></h1><ul>
<li><a href="https://github.com/axuebin/articles/issues/26">JavaScript复制内容到剪贴板 - GitHub·axuebin</a></li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>用 stylus 写一个 50 行代码的栅格化布局</title>
    <url>//2018/create-the-grids-layout-with-50-lines-of-code-using-stylus/</url>
    <content><![CDATA[<p>相信前端的同学们已经接触过栅格化布局了, 只要你用过 bootstrap 或者一些其他的 css 框架.</p>
<p>栅格化布局是一个非常方便的布局方式, 尤其是它的自适应布局, 可以根据屏幕大小缩放容器的宽度.</p>
<p><img src="//static.mutoe.com/2018/create-the-grids-layout-with-50-lines-of-code-using-stylus/preview.png" alt="preview" title="图片来自 ElementUI Layout"></p>
<p>今天我们用一个 css 预处理器 stylus 来编写一个 <strong>只有 50 行代码</strong>, 能自定义栅格数, 能响应多个断点, 能推能拉的栅格化布局!</p>
<span id="more"></span>

<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析">代码解析</a></h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cols</span> = <span class="number">12</span>      <span class="comment">// 自定义栅格数</span></span><br><span class="line"><span class="variable">$query</span> = &#123;      <span class="comment">// 自定义断点</span></span><br><span class="line">  <span class="attribute">normal</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  xs: <span class="string">&#x27;max-width: 768px&#x27;</span>,</span><br><span class="line">  sm: <span class="string">&#x27;min-width: 768px&#x27;</span>,</span><br><span class="line">  md: <span class="string">&#x27;min-width: 992px&#x27;</span>,</span><br><span class="line">  lg: <span class="string">&#x27;min-width: 1200px&#x27;</span>,</span><br><span class="line">  xl: <span class="string">&#x27;min-width: 1920px&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">media</span><span class="params">(<span class="variable">$class</span> = <span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line">  <span class="variable">$class</span> += <span class="string">&#x27;-&#x27;</span> unless <span class="variable">$class</span> == <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  .el-col-&#123;<span class="variable">$class</span>&#125;<span class="number">0</span></span><br><span class="line">    <span class="attribute">display</span> none</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> <span class="variable">$c</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="variable">$cols</span></span><br><span class="line">    <span class="variable">$percent</span> = (<span class="number">100</span> / <span class="variable">$cols</span> * <span class="variable">$c</span>)%</span><br><span class="line"></span><br><span class="line">    .el-col-&#123;<span class="variable">$class</span>&#125;&#123;<span class="variable">$c</span>&#125;</span><br><span class="line">      <span class="attribute">width</span> <span class="variable">$percent</span></span><br><span class="line">    .el-col-&#123;<span class="variable">$class</span>&#125;offset-&#123;<span class="variable">$c</span>&#125;</span><br><span class="line">      <span class="attribute">margin-left</span> <span class="variable">$percent</span></span><br><span class="line">    .el-col-&#123;<span class="variable">$class</span>&#125;pull-&#123;<span class="variable">$c</span>&#125;</span><br><span class="line">      <span class="attribute">position</span> relative</span><br><span class="line">      <span class="attribute">right</span> <span class="variable">$percent</span></span><br><span class="line">    .el-col-&#123;<span class="variable">$class</span>&#125;push-&#123;<span class="variable">$c</span>&#125;</span><br><span class="line">      <span class="attribute">position</span> relative</span><br><span class="line">      <span class="attribute">left</span> <span class="variable">$percent</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.el-row</span></span><br><span class="line">  <span class="attribute">position</span> relative</span><br><span class="line">  <span class="attribute">box-sizing</span> border-box</span><br><span class="line">  </span><br><span class="line">  <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">    <span class="attribute">clear</span> both</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[class*=<span class="string">&quot;el-col-&quot;</span>]</span></span><br><span class="line">  <span class="attribute">float</span> left</span><br><span class="line">  <span class="attribute">box-sizing</span> border-box</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">$k</span>, <span class="variable">$v</span> <span class="keyword">in</span> <span class="variable">$query</span></span><br><span class="line">  <span class="keyword">if</span> <span class="variable">$k</span> == <span class="string">&#x27;normal&#x27;</span></span><br><span class="line">    <span class="built_in">media</span>()</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (&#123;<span class="variable">$v</span>&#125;)</span><br><span class="line">      <span class="built_in">media</span>(<span class="variable">$k</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>去除那些空行, 这段代码只有 39 行, 为了方便阅读, 所以加上一些空行.</p>
<p>下面我将逐行为大家解释这段代码, 请善用右侧导航栏进行跳转.</p>
<h3 id="1-cols-12"><a href="#1-cols-12" class="headerlink" title=":1 $cols = 12">:1 <code>$cols = 12</code></a></h3><p>这里声明了一个变量, 用来定义栅格数. 在 stylus 中, 变量无需 <code>$</code> 字符开头, 但本人为了区分这是自定义变量, 习惯在变量前加该字符.</p>
<h3 id="2-9-query"><a href="#2-9-query" class="headerlink" title=":2-9 $query = {...}">:2-9 <code>$query = &#123;...&#125;</code></a></h3><p>这里声明了一个对象 ( Hash 数组 ), 键名为 class 缩写, 键值为 media query 条件 (第一行除外).</p>
<h3 id="11-media-class-39-39"><a href="#11-media-class-39-39" class="headerlink" title=":11 media($class = &#39;&#39;) {...}">:11 <code>media($class = &#39;&#39;) &#123;...&#125;</code></a></h3><p>这里声明了一个方法, 用于创建某个 media query 条件下的栅格布局.</p>
<p>该方法含有一个参数, 该参数用于给栅格化布局增加响应式断点, 默认值为空. 该参数为空时表示无自适应布局时的条件</p>
<h3 id="12-class-39-39-unless-class-39-39"><a href="#12-class-39-39-unless-class-39-39" class="headerlink" title=":12 $class += &#39;-&#39; unless $class == &#39;&#39;">:12 <code>$class += &#39;-&#39; unless $class == &#39;&#39;</code></a></h3><p>这里给自适应类增加后缀 <code>-</code>, 用于接下来将变量作为插值拼接到 class 名中</p>
<h3 id="14-15-el-col-class-0"><a href="#14-15-el-col-class-0" class="headerlink" title=":14-15 .el-col-{$class}0">:14-15 <code>.el-col-&#123;$class&#125;0</code></a></h3><p>这一行就是将变量 <code>$class</code> 作为差值拼入 class 名中了</p>
<p>如果 <code>$class = &#39;&#39;</code>, 则生成代码为 <code>.el-col-0</code>, 如果 <code>$class = &#39;xs&#39;</code>, 则生成代码为 <code>.el-col-xs-0</code>. 插值是不是很方便?</p>
<h3 id="17-for-c-in-1-cols"><a href="#17-for-c-in-1-cols" class="headerlink" title=":17 for $c in 1..$cols">:17 <code>for $c in 1..$cols</code></a></h3><p>这里使用了一个迭代 (Iteration, 也可以叫做循环). 意思是将 <code>$c</code> 作为循环变量, 从 <code>1</code> 到 <code>$cols</code> 进行循环.</p>
<p>界限操作符 <code>1..5</code> 意思是从 1 开始, 一直到 5</p>
<p>范围操作符 <code>1...5</code> 意思是从 1 开始, 到 4 (不含 5) 结束</p>
<h3 id="18-percent-100-cols-c"><a href="#18-percent-100-cols-c" class="headerlink" title=":18 $percent = (100 / $cols * $c)%">:18 <code>$percent = (100 / $cols * $c)%</code></a></h3><p>这里声明了本次循环中的变量 <code>$percent</code>, 有两个注意点.</p>
<p>在 stylus 中计算属性最好将其用圆括号 <code>()</code> 包裹起来, 避免某些情况下编译器将其理解为多个值, 如 <code>border-raidus: 4px / 2px;</code>.</p>
<p><code>(expr)%</code> 的意思是将 expr 表达式强行加个单位, 是内置函数 <code>unit(expr, &#39;%&#39;)</code> 的语法糖</p>
<h3 id="20-29-el-col-class-c"><a href="#20-29-el-col-class-c" class="headerlink" title=":20-29 .el-col-{$class}{$c}">:20-29 <code>.el-col-&#123;$class&#125;&#123;$c&#125;</code></a></h3><p>这里就开始循环声明 class 了, 设置栅格宽度, 设置偏移量, 设置推拉. 同样使用了变量插值.</p>
<h3 id="31-36-el-row"><a href="#31-36-el-row" class="headerlink" title=":31-36 .el-row">:31-36 <code>.el-row</code></a></h3><p>所有声明完毕后, 从这一行开始实际生成 css. </p>
<p>没什么多说了的, 栅格容器. 设置清除浮动.</p>
<h3 id="38-40-class-quot-el-col-quot"><a href="#38-40-class-quot-el-col-quot" class="headerlink" title=":38-40 [class*=&quot;el-col-&quot;]">:38-40 <code>[class*=&quot;el-col-&quot;]</code></a></h3><p>这里使用了 css 的属性选择器, 选择以 <code>.el-col-</code> 开头的元素, 为其设置浮动和盒模型.</p>
<h3 id="42-47-for-k-v-in-query"><a href="#42-47-for-k-v-in-query" class="headerlink" title=":42-47 for $k, $v in $query">:42-47 <code>for $k, $v in $query</code></a></h3><p>遍历 <code>$query</code>, 将所有断点取出来. 然后判断如果键名为 <code>normal</code> (<code>$query</code> 的第一个键值对), 则调用无参的 <code>media()</code> 方法. 否则生成相应断点和 media query 的方法.</p>
<h2 id="最终生成的-css-代码"><a href="#最终生成的-css-代码" class="headerlink" title="最终生成的 css 代码">最终生成的 css 代码</a></h2><p><a href="https://codepen.io/mutoe/pen/JLyGVa">codepen 在线查看</a></p>
<p><img src="//static.mutoe.com/2018/create-the-grids-layout-with-50-lines-of-code-using-stylus/preview-stylus.png" alt="preview"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接">参考链接</a></h2><p><a href="http://element-cn.eleme.io/#/zh-CN/component/layout">ElementUI - Layout 布局</a> 灵感来自其 sass 源码</p>
<p><a href="http://www.zhangxinxu.com/jq/stylus/">张鑫旭 - stylus中文版参考文档</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Stylus</tag>
      </tags>
  </entry>
  <entry>
    <title>在 NAS 上部署 Gitea</title>
    <url>//2024/deploy-gitea-on-nas/</url>
    <content><![CDATA[<p>处于某种原因，需要自己部署一个 Git 仓库管理工具来管理和部署一些奇怪的家庭服务，虽然 GitHub private repository 也可以用，但因为这些平台都中心化的，会受制于人，速度可可靠性也不太理想，在外网做家庭服务的持续部署也比较麻烦，所以就想到了自己部署一个 Git 仓库管理工具，想怎么玩就怎么玩。 </p>
<p>为什么不选择装 GitLab 而是 Gitea，因为 GitLab 的硬件要求太高了，而且我只是想要一个简单的 Git 仓库管理工具，不需要多人协作也不需要很多复杂的功能，Gitea 足够了，最低只需要 1 核和 2G 内存，所以选择了 Gitea。</p>
<p>虽然群辉 NAS 自带了 Gitea 的社区套件，之前也一直在用。但是它的版本已经落后于官方好几个版本了，所以这里选择自己用 Docker 部署一个最新版的 Gitea，也方便后续升级和折腾。</p>
<p>注：以下教程图示是群辉 NAS 的安装界面。如果你是其他 NAS 品牌的用户，可以参考自己对应品牌的 Docker 安装界面或是直接使用命令行或 <a href="https://docs.gitea.com/zh-cn/installation/install-with-docker">使用 Gitea 的官方 docker compose</a> 进行安装，也可以参考我安装的思路。</p>
<span id="more"></span>

<h1 id="1-创建共享目录"><a href="#1-创建共享目录" class="headerlink" title="1. 创建共享目录">1. 创建共享目录</a></h1><p>首先我们需要创建仓库相关的目录，用于存放 git 仓库。</p>
<p>分离 Gitea 和 Git Repositories 的好处是，当 Gitea 升级或者毁坏后，仓库还在，不会丢失。</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/create-shared-folder-git.png"></p>
<p>一路下一步，用户权限可以先跳过，下面我们会把 docker 组和 gitea 用户赋予此目录的权限。</p>
<h1 id="2-创建-Docker-用户组"><a href="#2-创建-Docker-用户组" class="headerlink" title="2. 创建 Docker 用户组">2. 创建 Docker 用户组</a></h1><p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/create-docker-group.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure>

<p>下一步选择成员，可以跳过，因为我们会在下一步我们把 gitea 用户加入到 Docker 用户组中。</p>
<p>再下一步分配目录权限，我们将系统自带的 <code>docker</code> 目录和刚才创建的 <code>git</code> 目录都分配给 <code>docker</code> 组，并且设置为可读写。</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/assign-folder-permission-to-docker-group.png"></p>
<p>下一步配额可以根据自己的需要进行设置，这里我选择跳过。</p>
<p>在下一步选择分配应用程序权限，我们选择拒绝任何程序权限，因为该用户组下的用户没有使用应用的场景。</p>
<p>再下一步设置群组速度限制，我们也跳过。</p>
<p>最后你会看到一个确认页面，确认无误后点击完成。</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/confirm-create-docker-group.png"></p>
<h1 id="3-创建-Gitea-用户"><a href="#3-创建-Gitea-用户" class="headerlink" title="3. 创建 Gitea 用户">3. 创建 Gitea 用户</a></h1><p>接下来我们创建 <code>gitea</code> 用户，后续 gitea 容器会使用这个用户来运行。</p>
<p>gitea 作为系统用户，密码可以随意设置，后面我们不会用这个用户进行登陆，如果实在需要也可以重置密码。</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/create-gitea-user.png"> </p>
<p>该用户需要加入刚才创建的 <code>docker</code> 用户组，这样才能访问到 docker 目录。</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/user-gitea-join-docker-group.png"></p>
<p>然后禁止此用户访问其他共享目录，只允许访问 <code>docker</code> 和 <code>git</code> 目录。（确保这两个目录拥有可读写权限，因为是继承自 docker group，所以应该自动拥有了这两个目录的读写权限）</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/gitea-user-directory-permission.png"></p>
<p>接下来用户配额、用户限速可以根据你自己的需求自行调整，应用程序权限同样选择跳过。然后确认你最后的配置，点击完成。</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/confirm-create-gitea-user.png"></p>
<p>然后登陆到 ssh 终端，获取 <code>gitea</code> 用户的 UID 和 <code>docker</code> 组的 GID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mutoe@ds918:~$ <span class="built_in">id</span> gitea</span><br><span class="line">uid=1029(gitea) gid=100(<span class="built_in">users</span>) <span class="built_in">groups</span>=100(<span class="built_in">users</span>),65538(docker)</span><br></pre></td></tr></table></figure>

<h1 id="4-下载镜像"><a href="#4-下载镜像" class="headerlink" title="4. 下载镜像">4. 下载镜像</a></h1><p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/docker-search-gitea-image.png" alt="Docker search gitea image"></p>
<blockquote>
<p>镜像版本选择 <code>:1</code> 是因为 <code>:latest</code> 会是基于最新的开发版，可能会有不稳定的情况。</p>
</blockquote>
<h1 id="5-创建容器"><a href="#5-创建容器" class="headerlink" title="5. 创建容器">5. 创建容器</a></h1><p>根据刚才下载好的镜像创建对应的容器</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/create-gitea-container-from-image.png"></p>
<p>网络选择默认的 <code>bridge</code> 模式</p>
<p>容器名称输入 <code>gitea</code> 或者自己喜欢的名字, 勾选启用自动重启，这样当 NAS 重启后容器也会自动启动。然后点击高级设置，新增 2 个环境变量：<code>USER_UID</code> 和 <code>USER_GID</code>，这两个环境变量分别对应刚才获取到的 <code>gitea</code> 用户的 UID 和 <code>docker</code> 组的 GID。</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/set-gitea-container-path-variables.png"></p>
<p>端口设置，将容器的 22 端口映射到 NAS 的 4022 端口，这样我们未来就可以通过 ssh 来推送代码了。<br>然后将容器的 3000 端口映射到 NAS 的 4000 端口，这是以后访问 Gitea 的网页地址。</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/gitea-container-port-map.png"></p>
<p>下一步挂载卷，这一步我们在 <code>docker</code> 目录中创建 Gitea 的工作目录，然后在 <code>git</code> 目录中创建 Gitea 的仓库目录，最后将这两个目录挂载到容器中。
另外官方文档中还推荐映射 <code>/etc/timezone</code> 和 <code>/etc/localtime</code>，这样容器内的时间才会和 NAS 一致。不过群辉的这个可视化界面中无法找到 <code>/etc</code> 这个系统目录，所以这里就不做映射了。 </p>
<blockquote>
<p>如果这一步找不到 docker 目录，就去共享文件夹设置里确认一下当前用户对 <code>docker</code> 目录是否有可读写权限。因为默认情况下，当前用户应该属于 administration 用户组，不排除有些用户没有权限。</p>
</blockquote>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/setup-gitea-container-volumn.png"></p>
<p>确认一下各项配置</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/confirm-create-gitea-container.png"> </p>
<p>点击完成后稍等几十秒，容器就会启动了。</p>
<h1 id="6-配置-Gitea"><a href="#6-配置-Gitea" class="headerlink" title="6. 配置 Gitea">6. 配置 Gitea</a></h1><p>容器启动后，访问 <code>http://your-nas-ip:4000</code> 进入 Gitea 的配置页面。注意修改 SSH 端口和 HTTP 服务端口，参考下图。</p>
<p>服务器域名填写你的 nas 地址，我这里后面会做反向代理，所以添了单独的域名。你可以根据自己的需要自行填写。</p>
<p>需要注意的是，ssh 服务端口和 http 服务端口不需要修改，这是容器内的地址。</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/configure-gitea.png"></p>
<p>点击确认后稍等几分钟，你就应该能看见成功后的页面了</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/succeed.png"></p>
<p>Gitea 1.19 后的 Gitea Actions 也可以使用了 😄</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/gitea-actions.png"></p>
<p>创建一个仓库后，确认下 volume 目录是否有对应的目录。这样一旦后面 gitea 需要升级或者毁坏后，至少仓库还在。</p>
<p><img src="https://static.mutoe.com/2024/deploy-gitea-on-nas/git-repository-volume.png"></p>
<p>到这里，所有的配置都已经完成了，你的 Gitea 已经可以正常使用了。但美中不足的是我们需要在访问 Gitea 时输入端口号，使用 SSH 克隆仓库时也需要加对应的端口号，这样不太方便。</p>
<p>如果我们需要把端口号去掉的话，需要做一些额外的设置，他们分别是 DNS 解析和反向代理。这是个比较独立的话题，感兴趣的话后面我可以单独写一篇文章来介绍。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://docs.gitea.com/zh-cn/installation/install-with-docker">使用 Docker 安装 - Gitea</a></li>
<li><a href="https://northfar.net/deploy-gitea-on-synology/">使用群晖部署Gitea服务 - 北远山村</a></li>
<li><a href="https://blog.csdn.net/gaoyang3513/article/details/129210211">Synology搭建Gitea(Docker) - gaoyang3513</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Docker</tag>
        <tag>家庭网络</tag>
        <tag>NAS</tag>
        <tag>群辉</tag>
        <tag>Gitea</tag>
      </tags>
  </entry>
  <entry>
    <title>将 Hexo 博客发布到自己的服务器上</title>
    <url>//2017/deploy-hexo-website-to-self-server/</url>
    <content><![CDATA[<p>最近写博客的时候发现搭建在 Github Pages 上在国内偶尔会抽, 表现为加载慢, 半天才读取完.</p>
<p>鉴于自己有服务器, 索性就放在自己服务器上吧, 打算就用 Github Pages 做博客备份. 接下来就开始动手把.</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理">实现原理</a></h2><p>我们在自己的电脑上写好博客, 使用 git 发布到代码仓库进行备份, git 仓库接收到 push 请求后, 使用 webhook 配合 nodejs 自动进行服务器端页面的更新.</p>
<span id="more"></span>

<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作">1. 准备工作</a></h2><h3 id="1-1-服务器端"><a href="#1-1-服务器端" class="headerlink" title="1.1 服务器端">1.1 服务器端</a></h3><ol>
<li>node 环境</li>
<li>git 环境</li>
<li>服务器软件 (apache, nginx, iis 等)</li>
</ol>
<h3 id="1-2-客户端"><a href="#1-2-客户端" class="headerlink" title="1.2 客户端">1.2 客户端</a></h3><ol>
<li>含有 webhooks 的 git 仓库 (github, coding 等)</li>
<li>hexo 博客</li>
</ol>
<p>git 这里我使用了两个分支来保存博客项目: 包含 hexo 源文件的 source 分支和只含有 public 即已经生成静态文件的分支 master. 这是因为之前使用了 github pages 的原因, 如果你也和我是一样的做法, 那么你以后还可以使用 github.io 域名的博客镜像站点.</p>
<h2 id="2-服务器端构建"><a href="#2-服务器端构建" class="headerlink" title="2. 服务器端构建">2. 服务器端构建</a></h2><p>因为服务器端最容易出错, 所以先进行这部分操作.</p>
<h3 id="2-1-服务器端的”钩子”"><a href="#2-1-服务器端的”钩子”" class="headerlink" title="2.1 服务器端的”钩子”">2.1 服务器端的”钩子”</a></h3><p>我们借助一个 node 插件 <code>github-webhook-handler</code> 来快速完成配合 github webhook 的操作, 其他 git 平台也有相应的插件, 如配合 coding 的 <code>coding-webhook-handler</code>.</p>
<h4 id="监听脚本"><a href="#监听脚本" class="headerlink" title="监听脚本">监听脚本</a></h4><p>使用 <code>npm install -g github-webhook-handler</code> 命令来安装到服务器端.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g github-webhook-handler</span><br></pre></td></tr></table></figure>

<p>接下来切换到你服务器的站点目录, 如 <code>/var/htdoc/blog</code>, 新建一个 public 目录, 将你 github 仓库中的 master 分支 pull 到该目录中, 这个目录就作为这个博客的跟目录了.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/htdoc/blog</span><br><span class="line"><span class="built_in">mkdir</span> public</span><br><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/mutoe/mutoe.github.io.git</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<p>接下来我们创建钩子, 新建一个 <code>webhooks.js</code> 文件, 将以下内容复制粘贴进去.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">&#x27;github-webhook-handler&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> handler = <span class="title function_">createHandler</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">secret</span>: <span class="string">&#x27;yoursecret&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run_cmd</span>(<span class="params">cmd, args, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">spawn</span>;</span><br><span class="line">  <span class="keyword">var</span> child = <span class="title function_">spawn</span>(cmd, args);</span><br><span class="line">  <span class="keyword">var</span> resp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">buffer</span>) &#123; resp += buffer.<span class="title function_">toString</span>(); &#125;);</span><br><span class="line">  child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123; callback (resp) &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="title function_">handler</span>(req, res, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">404</span></span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;no such location&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">7777</span>)</span><br><span class="line"></span><br><span class="line">handler.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, err.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">handler.<span class="title function_">on</span>(<span class="string">&#x27;push&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received a push event for %s to %s&#x27;</span>,</span><br><span class="line">    event.<span class="property">payload</span>.<span class="property">repository</span>.<span class="property">name</span>,</span><br><span class="line">    event.<span class="property">payload</span>.<span class="property">ref</span>);</span><br><span class="line">    <span class="title function_">run_cmd</span>(<span class="string">&#x27;sh&#x27;</span>, [<span class="string">&#x27;./deploy.sh&#x27;</span>,event.<span class="property">payload</span>.<span class="property">repository</span>.<span class="property">name</span>], <span class="keyword">function</span>(<span class="params">text</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(text) &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>注意上段代码中第 3 行 <code>&#123; path: &#39;/&#39;, secret: &#39;yoursecret&#39; &#125;</code> 中 secret 可以改为你喜欢的口令, 这口令将在下面的步骤中起到作用, 请留意. 第 19 行 <code>listen(7777)</code> 中 7777 为监听程序需要使用的端口.</p>
<h4 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本">执行脚本</a></h4><p>上面的 javascript 代码是用来捕捉 github 发来的信号并发起一个执行 <code>./deploy.sh</code> 的脚本, 接下来我们还需要写 <code>deploy.sh</code> 的内容.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">WEB_PATH=<span class="string">&#x27;/usr/htdoc/blog/public&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Start deployment&quot;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WEB_PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;pulling source code...&quot;</span></span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git clean -f</span><br><span class="line">git pull</span><br><span class="line">git checkout master</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Finished.&quot;</span></span><br></pre></td></tr></table></figure>

<p>将以上代码的第 3 行改为你服务器中的实际目录. 接下来只需要开启监听就可以了.</p>
<blockquote>
<p>tips: 在此之前你可以使用 <code>node deploy.js</code> 来测试一下监听程序是否能够正常运行.
我在这里碰到了一个 node 环境变量的问题, 读取不到 github-webhook-handler 这个模块, 找了很多办法也没有解决, 后来我直接在项目根目录的上级目录安装了这个模块, 问题就解决了.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/htdoc/blog</span><br><span class="line">npm install github-webhook-handler</span><br></pre></td></tr></table></figure>
<p>npm 会从当前目录依次向上寻找含有 <code>node_modules</code> 目录并访问该模块.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> node deploy.js &gt; deploy.log &amp;</span><br></pre></td></tr></table></figure>

<p>这段代码将在后台监听上面设置的 7777 端口并将日志输出在当前目录下的 <code>deploy.log</code> 文件中.</p>
<h3 id="2-2-运行-web-服务"><a href="#2-2-运行-web-服务" class="headerlink" title="2.2 运行 web 服务">2.2 运行 web 服务</a></h3><p>这里将 <code>/var/htdoc/blog/public</code> 设置为 web 根目录即可, 如果你已经设置好了, 可以跳过这步.</p>
<p>具体设置方法网上有很多, 如果你使用的也是 Apache, 我可以简单的说一下.</p>
<p>我在 Apache 配置文件 <code>httpd.conf</code> 最后添加了一段代码, 声明我的博客根目录和域名.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:80</span>&gt;</span></span><br><span class="line">  DocumentRoot /var/htdoc/blog/public</span><br><span class="line">  ServerName blog.mutoe.com</span><br><span class="line">  DirectoryIndex index.html</span><br><span class="line">  <span class="tag">&lt;<span class="name">Directory</span> &quot;/<span class="attr">var</span>/<span class="attr">htdoc</span>/<span class="attr">blog</span>/<span class="attr">public</span>&quot;&gt;</span></span><br><span class="line">    Options FollowSymlinks Multiviews</span><br><span class="line">  <span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重启 httpd 服务, 然后去域名服务商那里将 blog.mutoe.com 解析到我的服务器, 就可以看到博客了. 如果到这里你没有成功, 那么可能是哪里出了问题, 先解决完再往下看.</p>
<h2 id="3-Github-配置-Webhooks"><a href="#3-Github-配置-Webhooks" class="headerlink" title="3. Github 配置 Webhooks">3. Github 配置 Webhooks</a></h2><p>进入你的项目地址, 点击 Setting 标签, 在左侧选择 Webhooks, 然后点击右上角 <code>Add webhook</code> 按钮.</p>
<p><img src="//static.mutoe.com/2017/deploy-hexo-website-to-self-server/setting.png" alt="setting"></p>
<p>然后在这个表单中的 Payload URL 字段填入你博客的域名 ( 或 IP 地址 ) 加上你之前在监听脚本中设置的端口号; <strong>将 Content type 修改为 json 格式 ( 重要!! github-webhook-handler 插件只支持该格式 );</strong> Secret 字段填入你之前设置的, 保存即可.</p>
<p><img src="//static.mutoe.com/2017/deploy-hexo-website-to-self-server/webhook.png" alt="webhook"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结">小结</a></h2><p>之前有试过别的方法, 比如 使用 rsync 配合 hexo 的 hexo-deployer-rsync 插件使用, 在本地使用命令 <code>hexo deploy</code> 直接发布到服务器上. 但是这个方法我没有成功, 而且很繁琐, 需要在本机和服务器装一个软件, 配置环境变量, 本来就繁琐最后还没有成功, 索性放弃了这个办法.</p>
<p>还有的办法是直接将本地的 hexo 项目直接放在服务器, 然后设置好 public 目录后使用 <code>hexo generate</code> 命令直接生成. 但这样做每次更新的时候需要再次同步一遍, 也很繁琐.</p>
<p>这两种办法都与我当初选择 Hexo 这个博客系统的 简单 &#x2F; 优雅 背道而驰, 最后受 mylonly 同学的启发, 利用 webhook 这个功能来同步博客, 同时还可以备份源代码, 使用我的方法后还可以使用 Github Pages 提供的空间, 即 github.io 这个域名作为紧急镜像, 在你自己服务器宕机的时候可以跳转到这里来, 感觉很完美, prefect !</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章">参考文章</a></h2><ul>
<li><a href="https://github.com/rvagg/github-webhook-handler">rvagg &#x2F; github-webhook-handler</a></li>
<li><a href="http://www.jianshu.com/p/e4cacd775e5b">利用Github的Webhook功能和Node.js完成项目的自动部署</a> – mylonly</li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 学习心得</title>
    <url>//2019/docker-study-note/</url>
    <content><![CDATA[<h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享">文件共享</a></h2><h3 id="文件挂载"><a href="#文件挂载" class="headerlink" title="文件挂载">文件挂载</a></h3><p>如果你想将宿主机中的文件或目录挂载至容器中，可以在启动容器时使用 <code>--volume</code> 或 <code>-v</code> 参数.</p>
<blockquote>
<p><code>--volume|-v &lt;host_path&gt;:&lt;container_path&gt;[:permission]</code>  </p>
<p><code>host_path</code> 为要挂载的宿主机目录路径，必须为绝对路径<br><code>container_path</code> 为挂载在容器中的目标路径<br><code>permission</code> 为挂载目录的权限，默认为读写 <code>rw</code>; 可指定为只读 <code>ro</code>  </p>
</blockquote>
<p>一些例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将宿主机的 Downloads 目录挂载在容器的 `/var/downloads` 中</span></span><br><span class="line">docker run -v /home/$(<span class="built_in">whoami</span>)/Downloads:/var/downloads ubuntu /bin/bash</span><br><span class="line"><span class="comment"># 挂载时指定为只读模式</span></span><br><span class="line">docker run -v /var/log:/var/host_log/*:ro ubuntu /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="从容器中复制文件到宿主机"><a href="#从容器中复制文件到宿主机" class="headerlink" title="从容器中复制文件到宿主机">从容器中复制文件到宿主机</a></h3><p>如果你想将容器中的文件复制到宿主机中，可以使用 <code>docker cp</code> 命令</p>
<blockquote>
<p><code>docker cp &lt;container_id&gt;:&lt;container_source_path&gt; &lt;host_target_path&gt;</code>
<code>container_id</code> 容器 ID
<code>container_source_path</code> 要拷贝容器内文件的路径
<code>host_target_path</code> 要放置在宿主机内的路径</p>
</blockquote>
<p>一些例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将容器 nginx 中的配置文件复制到宿主机的家目录中</span></span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure>

<h3 id="从宿主机复制文件到容器中"><a href="#从宿主机复制文件到容器中" class="headerlink" title="从宿主机复制文件到容器中">从宿主机复制文件到容器中</a></h3><p>从宿主机复制文件到容器中可以使用 <a href="#%E6%96%87%E4%BB%B6%E6%8C%82%E8%BD%BD">文件挂载</a> (<code>--volume</code>) 的方法，但这种方法不能在运行中的容器中使用，如果你真的想这么做，也有一些稍微麻烦些的办法。</p>
<ol>
<li><p>将宿主机的文件系统直接挂载在容器内，可以参考这篇文章 <a href="http://dockerone.com/article/149">http://dockerone.com/article/149</a></p>
</li>
<li><p>先将容器中需要备份的文件使用 <code>docker cp</code> 复制出来，然后重新运行该容器并使   用 <code>docker run --volume</code> 挂载文件.</p>
</li>
<li><p>通过 sshfs 挂载文件目录.</p>
</li>
<li><p>先将容器停掉，然后使用 <code>docker commit</code> 创建一个新的镜像，最后启动该镜像进行文件挂载.</p>
</li>
</ol>
<h2 id="通信"><a href="#通信" class="headerlink" title="通信">通信</a></h2><h3 id="容器间通信的一些-Q-amp-A"><a href="#容器间通信的一些-Q-amp-A" class="headerlink" title="容器间通信的一些 Q&amp;A">容器间通信的一些 Q&amp;A</a></h3><ol>
<li><p>如果不声明 <code>network</code> 字段, 在同一个 docker compose 之间可以通信吗？</p>
<p> <strong>可以</strong>。</p>
<blockquote>
<p>如果不指定一个特定的 network, docker 会指定容器在一个名为 <code>docker0</code> 的默认网桥中</p>
</blockquote>
</li>
<li><p>如果不声明 <code>expose</code> 选项, 那么同一网络中的其他容器可以访问该容器吗？</p>
<p> <strong>可以</strong>。</p>
<blockquote>
<p>但如果启动docker守护进程时指定了<code>--icc=false</code>选项，则不可以。<br><strong>建议声明</strong>, 声明该选项有助于使用者了解容器内暴露了那些端口出来供使用。</p>
</blockquote>
</li>
<li><p>在同一个网络中不同的容器使用了同一个端口会有冲突吗？</p>
<p> <strong>不会</strong>。</p>
<blockquote>
<p>不同的容器使用不同的 host, 所以哪怕两个容器使用了同样的端口，也不会与其他容器冲突。</p>
</blockquote>
</li>
<li><p><code>expose</code> 和 <code>ports</code> 字段有什么区别？</p>
<p> 如果容器内的端口需要在宿主环境访问，则需提供 <code>ports</code> 字段</p>
<p> <code>expose</code> 字段在<strong>默认情况</strong>下是可选的，即使不声明也可以在同一个网络中使用该容器的端口</p>
</li>
</ol>
<h2 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关">容器相关</a></h2><h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查">健康检查</a></h3><blockquote>
<p><a href="https://docs.docker.com/engine/reference/builder/#healthcheck">HEALTHCHECK 官方文档</a></p>
</blockquote>
<p>如果你想知道容器内应用是否被正常启动了，你可以在启动时指定健康检查测试相关参数.</p>
<p>比如你在启动一个 web 应用容器后，开开心心准备用这个服务，却发现访问不到，启动成功了但没有完全成功，有点气人。</p>
<p>这时候你可以通过设置健康检查命令 <code>curl -f http://localhost:8080 || exit 1</code> 来检查应用真的启动了，而不是因为各种原因导致容器启动了但是内部的应用没启动成功，而造成一种成功了的假象。</p>
<p>用于健康检查的测试命令会在容器内执行，命令退出代码为 <code>非零</code> 或超时没有成功则视为测试失败，等待下一次测试。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th align="left">作用 (涉及时间的选项均可指定 秒:<code>s</code> 分:<code>m</code> 时:<code>h</code> 等)</th>
</tr>
</thead>
<tbody><tr>
<td><code>interval</code></td>
<td align="left">执行测试间隔时间。默认 30s</td>
</tr>
<tr>
<td><code>timeout</code></td>
<td align="left">超时时间，执行测试如果超过了这个时间，则视为失败。默认 30s</td>
</tr>
<tr>
<td><code>retries</code></td>
<td align="left">重试次数，如果测试连续失败次数如果超过了该值，则容器健康状态会被置为不健康 (<code>unhealthy</code>)</td>
</tr>
<tr>
<td><code>start_period</code></td>
<td align="left">在容器启动多久之后开始第一次检查。默认 0s</td>
</tr>
</tbody></table>
<p>在 <code>Dockerfile</code> 中的用法示例</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=10s --<span class="built_in">timeout</span>=3s \</span></span><br><span class="line"><span class="language-bash">  CMD curl -f http://localhost:8080/health || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure>

<p>在 <code>docker-compose.yml</code> 中的示例</p>
<figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">wget</span> <span class="string">-nv</span> <span class="string">-t1</span> <span class="string">--spider</span> <span class="string">http://192.168.5.1:3000</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">10s</span> <span class="comment"># 需要 version &gt;= 3.4</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki</span></span><br><span class="line">    <span class="attr">depends-on:</span></span><br><span class="line">      <span class="attr">grafana:</span> <span class="comment"># 条件语法需要 version &gt;= 3.8</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span> <span class="comment"># 在 grafana 健康检查通过后才启动该容器</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 <code>docker-compose.yml</code> 中使用时</p>
<ul>
<li>会覆盖镜像中自带的健康检查命令</li>
<li><code>start_period</code> 参数需要 <code>version &gt;= 3.4</code></li>
<li>可根据容器的健康状态来成为 <code>depends-on</code> 执行条件(条件语法需要 <code>version &gt;= 3.8</code>)</li>
</ul>
</blockquote>
<p>设置了健康检查后，会在容器列表中看到一列多的内容 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="https://static.mutoe.com/2019/docker-study-note/docker-health-check-ps.png" alt="health check docker ps"></p>
<p>还可以在 docker inspect 中帮助排查问题 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format <span class="string">&#x27;&#123;&#123;json .State.Health&#125;&#125;&#x27;</span> loki | jq .</span><br></pre></td></tr></table></figure>

<p><img src="https://static.mutoe.com/2019/docker-study-note/docker-health-check-inspect.png" alt="health check docker inspect"></p>
<p>需要注意的是，健康检查的测试命令会在重启内执行，所以测试命令容器内可执行。比如在 <code>alpine</code> 版本的镜像中是不含 <code>curl</code> 程序的，这时你可以用 <code>wget</code> 来代替。</p>
<p>一些连通性检查的例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 本机 8080 端口是否能连通</span></span><br><span class="line">curl -f http://localhost:8080 || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 alpine 镜像中检查 8080 端口是否能连通</span></span><br><span class="line">wget -nv -t1 --spider http://localhost:8080 || <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loki 中检查是否启动成功 (Loki 的 health check API 很奇怪，wget with --spider 时会报 405，只好另辟蹊径)</span></span><br><span class="line"><span class="comment"># Update: 是因为 wget with --spider 会先发送一个 HEAD 请求，Loki 不认</span></span><br><span class="line">[ <span class="string">&quot;<span class="subst">$(wget -nv -t1 -o /dev/null -O - http://localhost:3100/ready)</span>&quot;</span> = <span class="string">&quot;ready&quot;</span> ] || <span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure>


<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章">参考文章</a></h2><ul>
<li><a href="https://segmentfault.com/q/1010000020514283">已经启动的 Docker 容器如何挂载目录？ - SegmentFault</a></li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划：从入门到放弃</title>
    <url>//2019/dynamic-programming/</url>
    <content><![CDATA[<h1 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划">什么是动态规划</a></h1><p>动态规划（DP, Dynamic Programming）</p>
<p>一句话总结：<strong>在求解一个复杂问题时，将其分解为若干个简单问题。通过求解简单问题的最优解，来找到目标问题的最优解。</strong></p>
<h1 id="动态规划能做什么"><a href="#动态规划能做什么" class="headerlink" title="动态规划能做什么">动态规划能做什么</a></h1><p>常见问题</p>
<ul>
<li>求解斐波那契数列第 N 项 (<a href="https://leetcode.com/problems/fibonacci-number/">Leetcode 509. Fibonacci Number</a>)</li>
<li>背包问题</li>
<li>阶梯问题 (<a href="https://leetcode.com/problems/climbing-stairs/">Leetcode 70. Climbing Stairs</a>)</li>
<li>硬币问题 (<a href="https://leetcode.com/problems/coin-change/">Leetcode 322. Coin Change</a>)</li>
</ul>
<h1 id="怎么求解动态规划问题"><a href="#怎么求解动态规划问题" class="headerlink" title="怎么求解动态规划问题">怎么求解动态规划问题</a></h1><p>我们通过一个例子来了解一下DP的基本原理。</p>
<p>首先，我们要找到某个状态的最优解，然后在它的帮助下，找到下一个状态的最优解。</p>
<p>如硬币问题的例子</p>
<blockquote>
<p><em>硬币问题：如果我们有面值为1元、3元和5元的硬币若干枚，如何用最少的硬币凑够11元？</em></p>
</blockquote>
<span id="more"></span>

<p>首先我们将该问题分解为</p>
<ol>
<li>如何用最少的硬币凑够0元?</li>
<li>如何用最少的硬币凑够1元?</li>
<li>如何用最少的硬币凑够2元?</li>
<li>…</li>
<li>如何用最少的硬币凑够11元?</li>
</ol>
<h2 id="“状态”是什么"><a href="#“状态”是什么" class="headerlink" title="“状态”是什么">“状态”是什么</a></h2><p>“状态”用来描述该问题的子问题的解。</p>
<p>显然，第1个问题第解是0，我们只需要0个硬币就能凑够0元。</p>
<p><strong>我们用 $d(i)&#x3D;j$ 来表示凑够 $i$ 元至少需要 $j$ 个硬币</strong></p>
<p>第1个问题即</p>
<p>$$d(0)&#x3D;0$$</p>
<p>我们在解决第2个问题时（如何用最少的硬币凑够1元?），我们可以结合第1个问题第最优解，来解出第2个问题。</p>
<p>凑出1元时，我们可选的硬币只有1元硬币，我们只需挑选1个1元硬币，结合第1个问题第最优解即可求出第2个问题，即</p>
<p>$$d(1)&#x3D;d(1-1)+1&#x3D;d(0)+1&#x3D;0+1&#x3D;1$$</p>
<p>同理，凑出2元时，我们仍然只有1元硬币可用，于是再挑选1个1元硬币，结合第二个问题第最优解来求出第三个问题，即</p>
<p>$$d(2)&#x3D;d(2-1)+1&#x3D;d(1)+1&#x3D;1+1&#x3D;2$$</p>
<p>凑出3元时，我们多了一种3元硬币可选，于是我们就有2种方案可选：</p>
<ol>
<li>拿起1元硬币</li>
</ol>
<p>  如果我们拿起1元硬币，我们的目标就变成了：凑够3-1元需要的最少硬币数量，即</p>
<p>  $$d(3)&#x3D;d(3-1)+1&#x3D;d(2)+1&#x3D;2+1&#x3D;3$$</p>
<ol start="2">
<li>拿起3元硬币</li>
</ol>
<p>  如果我们拿起3元硬币，我们的目标就变成：凑够3-3&#x3D;0元需要的最少硬币数量，即</p>
<p>  $$d(3)&#x3D;d(3-3)+1&#x3D;d(0)+1&#x3D;0+1&#x3D;1$$</p>
<p>所以我们得到</p>
<p>$$d(3)&#x3D;\min\{d(3-1)+1, d(3-3)+1\}$$</p>
<hr>
<p>从上面的演算中，我们抽出两个概念：<strong>状态</strong> 和 <strong>状态转移方程</strong>。</p>
<p>上文中 $d(i)$ 表示凑够 $i$ 元需要的最少硬币数量，我们定义为该问题的“状态”。</p>
<p>我们最终要求解的问题可以用这个状态来表示： $d(3)$ 即凑够3元最少需要多少硬币。</p>
<p>状态转移方程就是</p>
<p>$$d(3)&#x3D;\min\{d(3-1)+1, d(3-3)+1\}$$</p>
<p>它描述了状态之间时如何转移的，我们对它抽象化</p>
<p>$$d(i)&#x3D;\min\{d(i-v_j)+1\}$$</p>
<p>其中 $i-v_j \geq 0$, $v_j$ 表示第 $j$ 个硬币的面值</p>
<hr>
<p>有了状态和状态转移方程，这个问题基本上就解决了</p>
<p>下面是当 i 从 0 到 11 时到解</p>
<table>
<thead>
<tr>
<th>$i$</th>
<th>$j$</th>
<th>$v_j$ ($\min\{d(i-v_j)\}$)</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>-</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1 (0)</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>1 (1)</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>3 (0)</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>1 (3)</td>
</tr>
<tr>
<td>5</td>
<td>1</td>
<td>5 (0)</td>
</tr>
<tr>
<td>6</td>
<td>2</td>
<td>3 (3)</td>
</tr>
<tr>
<td>7</td>
<td>3</td>
<td>1 (6)</td>
</tr>
<tr>
<td>8</td>
<td>2</td>
<td>3 (5)</td>
</tr>
<tr>
<td>9</td>
<td>3</td>
<td>1 (8)</td>
</tr>
<tr>
<td>10</td>
<td>2</td>
<td>5 (5)</td>
</tr>
<tr>
<td>11</td>
<td>3</td>
<td>1 (10)</td>
</tr>
</tbody></table>
<p>可以得到，要凑够11元至少需要3枚硬币</p>
<p>$$ d(11)&#x3D;d(10)+1&#x3D;d(5)+1+1&#x3D;d(0)+1+1+1&#x3D;3 $$</p>
<p>BB 这么多没用， Show your code !</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现">代码实现</a></h1><blockquote>
<p>Leetcode 322. Coin Change</p>
</blockquote>
<h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang">Golang</a></h2><h3 id="main"><a href="#main" class="headerlink" title="main">main</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CoinChange: coins 硬币, amount 期望的金额, 返回最少需要的硬币数量，如果不可解返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CoinChange</span><span class="params">(coins []<span class="type">int</span>, amount <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  dp := <span class="built_in">make</span>([]<span class="type">int</span>, amount+<span class="number">1</span>)</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= amount; i++ &#123;</span><br><span class="line">    dp[i] = amount + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _, coin := <span class="keyword">range</span> coins &#123;</span><br><span class="line">      <span class="keyword">if</span> coin &lt;= i &amp;&amp; dp[i-coin] != <span class="number">-1</span> &amp;&amp; dp[i-coin]+<span class="number">1</span> &lt; dp[i] &#123;</span><br><span class="line">        dp[i] = dp[i-coin] + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> dp[i] &gt; amount &#123;</span><br><span class="line">      dp[i] = <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[amount]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="unit-test"><a href="#unit-test" class="headerlink" title="unit test">unit test</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCoinCharge</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">    coins  []<span class="type">int</span></span><br><span class="line">    amount <span class="type">int</span></span><br><span class="line">  &#125;</span><br><span class="line">  tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    args args</span><br><span class="line">    want <span class="type">int</span></span><br><span class="line">  &#125;&#123;</span><br><span class="line">    &#123;<span class="string">&quot;[2] =&gt; 3&quot;</span>, args&#123;[]<span class="type">int</span>&#123;<span class="number">2</span>&#125;, <span class="number">3</span>&#125;, <span class="number">-1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;[2] =&gt; 4&quot;</span>, args&#123;[]<span class="type">int</span>&#123;<span class="number">2</span>&#125;, <span class="number">4</span>&#125;, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;[1,2,5] =&gt; 11&quot;</span>, args&#123;[]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;, <span class="number">11</span>&#125;, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;[1,3,5] =&gt; 11&quot;</span>, args&#123;[]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;, <span class="number">11</span>&#125;, <span class="number">3</span>&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">    t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> got := CoinCharge(tt.args.coins, tt.args.amount); got != tt.want &#123;</span><br><span class="line">        t.Errorf(<span class="string">&quot;CoinCharge() = %v, want %v&quot;</span>, got, tt.want)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Leetcode-result"><a href="#Leetcode-result" class="headerlink" title="Leetcode result">Leetcode result</a></h3><pre><code>Runtime: 8 ms, faster than 99.26% of Go online submissions for Coin Change.
</code></pre>
<h1 id="初级-DP-问题"><a href="#初级-DP-问题" class="headerlink" title="初级 DP 问题">初级 DP 问题</a></h1><p>上面的内容完成了，接下来我们来看一个较为复杂的 DP 问题：LIS，我们通过这个问题来找到这个问题的状态和状态转移方程。</p>
<blockquote>
<p><a href="https://leetcode.com/problems/longest-increasing-subsequence/">Leetcode 300. Longest Increasing Subsequence</a><br><em>LIS: 有一个序列有 N 个数，A[1],A[2],…,A[N]. 求出其最长递增子序列的长度。</em></p>
</blockquote>
<p>我们将这个问题分解，一个序列有 $i$ 个数 A[1],A[2],…,A[i], 其中 $i \lt N$. </p>
<p>那么这个问题就变成了一个子问题，然后我们定义 $d(i)$, 表示前 $i$ 个数中以 $A[i]$ 结尾的最长递增子序列的长度。</p>
<p>当 $i\to N$ 时，我们把 $d(1)$ 到 $d(N)$ 都计算出来，我们要找的答案就是这里面最大的一个。</p>
<p>状态找到了，下一步来找状态转移方程。举个例子，我们要求的这 N 个数的序列是：</p>
<pre><code>5, 3, 4, 8, 6, 7
</code></pre>
<p>根据上面的状态，我们得到</p>
<p>$d(1)&#x3D;1$ (5) &#x2F;&#x2F; 5前面没有比它小的 $d(1)&#x3D;1$</p>
<p>$d(2)&#x3D;1$ (3) &#x2F;&#x2F; 3前面没有比它小的 $d(2)&#x3D;1$</p>
<p>$d(3)&#x3D;2$ (3 4) &#x2F;&#x2F; 4前面有1个比它小的，所以 $d(3)&#x3D;d(2)+1&#x3D;2$</p>
<p>$d(4)&#x3D;3$ (3 4 8) &#x2F;&#x2F; 8前面比他小的有3个数, 所以 $d(4)&#x3D;\max\{d(1), d(2), d(3)\}+1&#x3D;3$</p>
<p>$d(5)&#x3D;3$ (3 4 6) &#x2F;&#x2F; 6前面比他小的有3个数，所以 $d(5)&#x3D;\max\{d(1), d(2), d(3)\}+1&#x3D;3$</p>
<p>$d(6)&#x3D;4$ (3 4 6 7) &#x2F;&#x2F; 7前面比他小的有4个数，所以 $d(6)&#x3D;\max\{d(1), d(2), d(4), d(5)\}+1&#x3D;4$</p>
<hr>
<p>根据 $d(i)$ 和 $d(i-1)$ 我们可以得到</p>
<p>$$ d(i)&#x3D; \max\{1, d(j)+1\} (j \lt i, A[j] \lt A[i]) $$</p>
<p>解释一下，要找到 $d(i)$, 我们要先找到所有 $A[j]$ 小于 $A[i]$ 的数，分别是 $1 \to j$，并且，
然后找到他们中最大的那一个 $d(j)$, 加上1, 就得到了我们想要的序列 $1 \to i$ 的LIS长度 $d(i)$ 了。</p>
<h2 id="Golang-实现"><a href="#Golang-实现" class="headerlink" title="Golang 实现">Golang 实现</a></h2><blockquote>
<p><a href="https://leetcode.com/problems/longest-increasing-subsequence/">Leetcode 300. Longest Increasing Subsequence</a>  </p>
</blockquote>
<h3 id="main-O-n-2"><a href="#main-O-n-2" class="headerlink" title="main $O(n^2)$">main $O(n^2)$</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLIS</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  dp := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">  maxLen := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    dp[i] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; i; j++ &#123;</span><br><span class="line">      <span class="keyword">if</span> nums[j] &lt; num &amp;&amp; dp[j]+<span class="number">1</span> &gt; dp[i] &#123;</span><br><span class="line">        dp[i] = dp[j] + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> dp[i] &gt; maxLen &#123;</span><br><span class="line">      maxLen = dp[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> maxLen</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="unit-test-1"><a href="#unit-test-1" class="headerlink" title="unit test">unit test</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_lengthOfLIS</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">    nums []<span class="type">int</span></span><br><span class="line">  &#125;</span><br><span class="line">  tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    args args</span><br><span class="line">    want <span class="type">int</span></span><br><span class="line">  &#125;&#123;</span><br><span class="line">    &#123;<span class="string">&quot;4&quot;</span>, args&#123;[]<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">101</span>, <span class="number">18</span>&#125;&#125;, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;4&quot;</span>, args&#123;[]<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">101</span>, <span class="number">18</span>&#125;&#125;, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;6&quot;</span>, args&#123;[]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;, <span class="number">6</span>&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">    t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> got := lengthOfLIS(tt.args.nums); got != tt.want &#123;</span><br><span class="line">        t.Errorf(<span class="string">&quot;lengthOfLIS() = %v, want %v&quot;</span>, got, tt.want)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Leetcode-result-1"><a href="#Leetcode-result-1" class="headerlink" title="Leetcode result">Leetcode result</a></h3><pre><code>Runtime: 8 ms, faster than 69.34% of Go online submissions for Longest Increasing Subsequence.
Memory Usage: 2.3 MB, less than 95.45% of Go online submissions for Longest Increasing Subsequence.
</code></pre>
<p>看答案是有更快的算法的（0ms $O(n \log n)$），但并不是使用的动态规划来解决,</p>
<h1 id="中级-DP-问题"><a href="#中级-DP-问题" class="headerlink" title="中级 DP 问题">中级 DP 问题</a></h1><p>接下来来看看如何解决二维的 DP 问题。</p>
<blockquote>
<p>一个平面上有 M*N 个格子，每个格子中都放有一定量的苹果🍎。
  从左上角开始，每一步只能往下或者往右走，每走到一个格子上就把格子里的苹果收集起来，
  这样下去，你最多能收集多少个苹果？</p>
</blockquote>
<p>这个问题也是一样的思路，第一步找到问题的“状态”，第二部找到“状态转移方程”。</p>
<p>我们用 $S[i][j]$ 表示我们走到 $(i, j)$ 这个格子时我们最多能拿到多少苹果， $S[i][j]$ 就是我们的“状态”</p>
<p>我们注意到，要到达一个格子，我们只有两种方法：从上面来或从左边来。
那么只要我们找到从上面或者左边来的那一个最多拿到多少苹果，我们就能知道当前格子最多能拿到多少苹果，
这样我们就得到了状态转移方程</p>
<p>$$ S[i][j] &#x3D; A[i][j] + \max\{S[i-1][j], S[i][j-1]\} $$</p>
<p>其中 $i$ 代表行， $j$ 代表列，下标均从 0 开始，$A[i][j]$ 代表 $(i, j)$ 处的苹果数。</p>
<hr>
<p>例如我们以 $\begin{bmatrix} [1&amp;2&amp;3], \\ [4&amp;5&amp;6], \\ [7&amp;8&amp;9], \end{bmatrix}$ 为例</p>
<p>我们在求 $S[1][1]$ 时，需要先求出 $S[0][1]$ 和 $S[1][]0$，然后比较他们取大，然后加上 $A[1][1]$ 上的数即可，即</p>
<p>$$ S[1][1] &#x3D; A[1][1] + \max\{S[1][0], S[0][1]\} $$</p>
<p>又</p>
<p>$$ S[1][0] &#x3D; A[1][0] + S[0][0] &#x3D; 4 + 1 &#x3D; 5 $$
$$ S[0][1] &#x3D; A[0][1] + S[0][0] &#x3D; 2 + 1 &#x3D; 3 $$</p>
<p>所以</p>
<p>$$ S[1][1] &#x3D; A[1][1] + S[1][0] &#x3D; 5 + 5 &#x3D; 10 $$</p>
<h2 id="Golang-实现-1"><a href="#Golang-实现-1" class="headerlink" title="Golang 实现">Golang 实现</a></h2><blockquote>
<p>Leetcode 64. Minimum Path Sum</p>
</blockquote>
<p>该题与示例题目相反，求的时路径上的最小值</p>
<h3 id="main-1"><a href="#main-1" class="headerlink" title="main">main</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minPathSum</span><span class="params">(grid [][]<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  row := <span class="built_in">len</span>(grid)</span><br><span class="line">  col := <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; row; i++ &#123;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; col; j++ &#123;</span><br><span class="line">      <span class="keyword">if</span> i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">        grid[i][j] += grid[i][j<span class="number">-1</span>]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> j == <span class="number">0</span> &#123;</span><br><span class="line">        grid[i][j] += grid[i<span class="number">-1</span>][j]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        grid[i][j] += min(grid[i<span class="number">-1</span>][j], grid[i][j<span class="number">-1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> grid[row<span class="number">-1</span>][col<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="unit-test-2"><a href="#unit-test-2" class="headerlink" title="unit test">unit test</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_minPathSum</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">    grid [][]<span class="type">int</span></span><br><span class="line">  &#125;</span><br><span class="line">  tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    args args</span><br><span class="line">    want <span class="type">int</span></span><br><span class="line">  &#125;&#123;</span><br><span class="line">    &#123;<span class="string">&quot;7&quot;</span>, args&#123;[][]<span class="type">int</span>&#123;</span><br><span class="line">      &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>&#125;,</span><br><span class="line">      &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>&#125;,</span><br><span class="line">      &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#125;&#125;, <span class="number">7</span>&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">    t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> got := minPathSum(tt.args.grid); got != tt.want &#123;</span><br><span class="line">        t.Errorf(<span class="string">&quot;minPathSum() = %v, want %v&quot;</span>, got, tt.want)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Leetcode-result-2"><a href="#Leetcode-result-2" class="headerlink" title="Leetcode result">Leetcode result</a></h3><pre><code>Runtime: 8 ms, faster than 100.00% of Go online submissions for Minimum Path Sum.
Memory Usage: 3.9 MB, less than 95.45% of Go online submissions for Minimum Path Sum.
</code></pre>
<p>非常高效的算法，时间 $O(m*n)$, 空间 $O(1)$，空间上利用了给定的数组，进行累加。
如果不能修改原数组的话新建一个等长的二维数组即可。</p>
<h1 id="中高级-DP-问题"><a href="#中高级-DP-问题" class="headerlink" title="中高级 DP 问题">中高级 DP 问题</a></h1><p>接下来说非常经典的背包问题</p>
<blockquote>
<p>背包问题：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。</p>
</blockquote>
<p>我们有 $n$ 种物品，物品 $j$ 的重量为 $w_j$，价格为 $p_j$，我们认为所有物品的重量和价格都是非负的。
背包所能承受的最大重量为 $W$。</p>
<ul>
<li><p>如果限定每种物品只能选择 0 个或者 1 个，则问题称为 <strong>0-1背包问题</strong>，可表示为 
$\text{最大化:} \sum_{j&#x3D;1}^n p_j x_j$
$\text{受限于:} \sum_{j&#x3D;1}^n w_j x_j \leq W, x_j \in \{0, 1\}$</p>
</li>
<li><p>如果限定物品 $j$ 最多只能选择 $b_j$ 个，则问题称为<strong>有界背包问题</strong>，可表示为
$最大化: \sum_{j&#x3D;1}^n p_j x_j$
$受限于: \sum_{j&#x3D;1}^n w_j x_j \leq W, x_j \in \{0, 1, …, b_j\}$</p>
</li>
<li><p>如果不限定每种物品的数量，则问题称为<strong>无界背包问题</strong></p>
</li>
</ul>
<p>各类复杂的背包问题都可以变换为简单的0-1背包问题进行求解</p>
<hr>
<p>假设我们有 5 件物品，他们的 <code>[重量, 价值]</code> 分别为 <code>[5, 12], [4, 3], [7, 10], [2, 3], [6, 6]</code>，求出背包容量为 13 时的最优解.</p>
<p>首先我们定义状态 $d(i, j)$ 表示前 $i$ 个物品装入剩余体积为 j 的背包里能达到的最大价值.<br>背包的总容量为 $W$, 物品的总数量为 $N$ 第 $i$ 个物品的重量为 $W_i$, 价值为 $V_i$（注意索引 $i$ 是从 $0$ 开始的）</p>
<p>我们把问题拆解成</p>
<ol>
<li>5 个物品放入背包容量为 0 的最优解</li>
<li>5 个物品放入背包容量为 1 的最优解</li>
<li>5 个物品放入背包容量为 2 的最优解</li>
<li>…</li>
<li>5 个物品放入背包容量为 13 的最优解</li>
</ol>
<ul>
<li><p>情况 <code>1.</code> 显然，背包容量为 0 时没有东西能放入，即 $d(5, 0) &#x3D; 0$，以此类推 $d(i, 0) &#x3D; 0, i \in \{0, 1, …, N \}$</p>
</li>
<li><p>情况 <code>2.</code> 背包容量为 1 时也没有东西能放入，因为 $W_i &lt; j &#x3D; 1, i \in \{0,4\}$ 也不存在</p>
</li>
<li><p>当 $j&#x3D;2$ 时，存在 $W_i &lt; j &#x3D; 2$，此时 $i-1&#x3D;2$，为 <code>[2, 3]</code> 这个物品，即 $d(5, 2) &#x3D; V_3 &#x3D; 3$</p>
</li>
<li><p>当 $j&#x3D;3$ 时，同上， $d(5, 3) &#x3D; d(5, 2) &#x3D; 3$</p>
</li>
<li><p>当 $j&#x3D;4$ 时，情况稍微复杂一点，我们可以再次拆解这个子问题</p>
<ol>
<li>前 0 个物品放入背包容量为 4 的最优解</li>
<li>前 1 个物品放入背包容量为 4 的最优解</li>
<li>…</li>
<li>前 5 个物品放入背包容量为 4 的最优解</li>
</ol>
<ul>
<li><p>情况 <code>i.</code> 显然，没有物品放入时，价值也为0，即 $d(0, 4) &#x3D; 0$, 以此类推 $d(0, j) &#x3D; 0, j \in \{0, 1, …, W\}$</p>
</li>
<li><p>情况 <code>ii.</code> 也不存在 $W_i &lt; j &#x3D; 4, i \in \{0, 1\}$，故 $d(1, 4) &#x3D; 0$</p>
</li>
<li><p>当 $i&#x3D;2$ 时，存在 $W_i &lt; j &#x3D; 4, i \in \{0, 1, 2\}$，此时 $i-1 &#x3D; 1$，即 $d(2, 4) &#x3D; V_1 &#x3D; 3$</p>
</li>
<li><p>$i&#x3D;3$ 时，同上，$d(3, 4) &#x3D; d(2, 4) &#x3D; 3$</p>
</li>
<li><p>$i&#x3D;4$ 时，我们考虑是否要将 $i-1&#x3D;3$ 的物品放入背包中
如果不放入 $d(4, 4) &#x3D; d(3, 4) &#x3D; 3$
如果放入则 $d(4, 4) &#x3D; d(3, j - W_{i-1}) + V_{i-1} &#x3D; d(3, 2) + 3 &#x3D; 0 + 3 &#x3D; 3$</p>
<blockquote>
<p>对于这种情况的解释，如我我们考虑前 i 个物品的最优解，则就是在求是否要将第 $i-1$ 个物品放入背包中取得的最优解</p>
</blockquote>
<p>于是 $d(4,4) &#x3D; \max\{d(3, 4), d(3, 2) + 3\} &#x3D; \max\{3, 3\} &#x3D; 3$</p>
</li>
</ul>
</li>
</ul>
<hr>
<p>按照以上推理，我们可以得出状态转移方程</p>
<p>$$ d(i, j) &#x3D; 
  \begin{cases}
    0, &amp; \text{if $i&#x3D;0$ or $j&#x3D;0$} \\
    d(i-1, j), &amp; \text{if $d(i-1, j) &gt; d(i-1, j-W_{i-1}) + V_{i-1}$} \\
    d(i-1, j-W_{i-1}) + V_{i-1}, &amp; \text{otherwise} \\
  \end{cases} 
$$</p>
<h2 id="Golang-实现-2"><a href="#Golang-实现-2" class="headerlink" title="Golang 实现">Golang 实现</a></h2><p>以上面的例子为例</p>
<h3 id="main-2"><a href="#main-2" class="headerlink" title="main">main</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backpack</span><span class="params">(w, v []<span class="type">int</span>, W <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">  size := <span class="built_in">len</span>(w)</span><br><span class="line">  dp := <span class="built_in">make</span>([][]<span class="type">int</span>, W+<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= W; j++ &#123;</span><br><span class="line">    dp[j] = <span class="built_in">make</span>([]<span class="type">int</span>, size+<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= W; j++ &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= size; i++ &#123;</span><br><span class="line">      weight := w[i<span class="number">-1</span>]</span><br><span class="line">      <span class="keyword">if</span> weight &gt; j &#123;</span><br><span class="line">        dp[j][i] = dp[j][i<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      dp[j][i] = dp[j-weight][i<span class="number">-1</span>] + v[i<span class="number">-1</span>]</span><br><span class="line">      <span class="keyword">if</span> dp[j][i<span class="number">-1</span>] &gt; dp[j][i] &#123;</span><br><span class="line">        dp[j][i] = dp[j][i<span class="number">-1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[W][size]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="unit-test-3"><a href="#unit-test-3" class="headerlink" title="unit test">unit test</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_backpack</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  <span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">    w []<span class="type">int</span></span><br><span class="line">    v []<span class="type">int</span></span><br><span class="line">    W <span class="type">int</span></span><br><span class="line">  &#125;</span><br><span class="line">  tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    args args</span><br><span class="line">    want <span class="type">int</span></span><br><span class="line">  &#125;&#123;</span><br><span class="line">    &#123;<span class="string">&quot;13&quot;</span>, args&#123;</span><br><span class="line">      []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">6</span>&#125;,</span><br><span class="line">      []<span class="type">int</span>&#123;<span class="number">12</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">6</span>&#125;,</span><br><span class="line">      <span class="number">13</span>&#125;, <span class="number">22</span>&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">    t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> got := backpack(tt.args.w, tt.args.v, tt.args.W); got != tt.want &#123;</span><br><span class="line">        t.Errorf(<span class="string">&quot;backpack() = %v, want %v&quot;</span>, got, tt.want)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接">参考链接</a></h1><ul>
<li><a href="http://www.hawstein.com/posts/dp-novice-to-advanced.html">《动态规划：从新手到专家》 - Hawstein</a></li>
<li><a href="http://www.hawstein.com/posts/dp-knapsack.html">《动态规划之背包问题（一）》 - Hawstein</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98">背包问题 - (维基百科)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30959069">《0-1背包问题的动态规划算法》 - 知乎·Bat特白</a></li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter 环境搭建</title>
    <url>//2019/flutter-starting/</url>
    <content><![CDATA[<p>最近在学习 Flutter 补充移动端开发的技术栈，刚好换电脑，特此从 0 开始重新搭建 Flutter 开发环境</p>
<blockquote>
<p>整个安装环境是基于 macOS 操作系统的，如果你使用的是 Windows 操作系统，可以参考其他教程或本博文大致思路</p>
</blockquote>
<h1 id="1-环境安装包下载"><a href="#1-环境安装包下载" class="headerlink" title="1. 环境安装包下载">1. 环境安装包下载</a></h1><p>以下几个安装包体积较大，所以在观看本教程前需要提前进行下载</p>
<ul>
<li><a href="https://flutter.dev/docs/get-started/install">Flutter SDK</a> (提供 Flutter 相关命令行)</li>
<li><a href="http://developer.apple.com/xcode">XCode</a> (提供 iOS 模拟器和编译环境)</li>
<li><a href="https://developer.android.com/studio">Android Studio</a> (提供 Android 模拟器和编译环境)</li>
</ul>
<h1 id="2-Flutter-SDK-安装"><a href="#2-Flutter-SDK-安装" class="headerlink" title="2. Flutter SDK 安装">2. Flutter SDK 安装</a></h1><p>下载好 Flutter SDK 后，解压到一个存放 SDK 的目录，我这里存放在 <code>~/.flutter-sdk</code> 下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.flutter-sdk</span><br><span class="line"><span class="built_in">cd</span> ~/.flutter-sdk</span><br><span class="line">unzip ~/Downloads/flutter_macos_v1.7.8+hotfix.4-stable.zip</span><br></pre></td></tr></table></figure>

<p>然后将 Flutter SDK 的安装目录暴露给环境变量，在 <code>~/.zshrc</code> 或 <code>~/.bashrc</code> 文件中增加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Flutter</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.flutter-sdk/flutter/bin&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后你还可以下载 Flutter 在未来会需要的二进制包（可选的，也可以在未来下载）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter precache</span><br></pre></td></tr></table></figure>

<p>最后运行检查工具 <code>flutter doctor</code> ，来检查你的 Flutter 是否可以正常运行, 如果出现下面的信息，就说明你安装 Flutter SDK 成功啦</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br><span class="line"></span><br><span class="line">➜  .flutter-sdk flutter doctor</span><br><span class="line">[✓] Flutter (Channel stable, v1.7.8+hotfix.4, on Mac OS X 10.14.5 18F132, locale en-CN)</span><br><span class="line">    • Flutter version 1.7.8+hotfix.4 at /Users/yourusername/.flutter-sdk/flutter</span><br><span class="line">    • Framework revision 20e59316b8 (6 weeks ago), 2019-07-18 20:04:33 -0700</span><br><span class="line">    • Engine revision fee001c93f</span><br><span class="line">    • Dart version 2.4.0</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="3-Android-环境安装"><a href="#3-Android-环境安装" class="headerlink" title="3. Android 环境安装">3. Android 环境安装</a></h1><p>首先运行我们下载并安装好的 Android Studio</p>
<p>首次运行会依次询问是否导入已有配置、是否允许匿名上报统计信息</p>
<p>接下来会弹出 “Android Studio Setup Wizard” 对话框，我们选择 “Standard” 默认方式安装，接下来等待需要的安装包下载完毕</p>
<p>安装完毕后会弹出 “Welcome to Android Studio” 对话框，不着急关掉它，我们接下来创建一个安卓模拟器</p>
<p>选择 “Configure -&gt; AVD Manager” 弹出 “Android Virtual Device Manager” 对话框， 选择 “Create Virtual Device”，然后选择一个你喜爱的机型和系统版本，等待安装完毕即可关掉 Android Studio</p>
<p>运行 <code>flutter doctor --android-licenses</code> 来同意 Android Studio 的协议</p>
<h1 id="4-XCode-环境安装"><a href="#4-XCode-环境安装" class="headerlink" title="4. XCode 环境安装">4. XCode 环境安装</a></h1><p>安装好我们下载的 XCode 后，需要执行以下命令来注册 XCode 并且同意它的 License</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class="line">sudo xcodebuild -license accept</span><br></pre></td></tr></table></figure>

<p>接下来使用 brew 安装 iOS 开发相关的 tools</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --HEAD usbmuxd</span><br><span class="line">brew <span class="built_in">link</span> usbmuxd</span><br><span class="line">brew install --HEAD libimobiledevice</span><br><span class="line">brew install ideviceinstaller ios-deploy cocoapods</span><br></pre></td></tr></table></figure>

<h1 id="5-开发环境配置"><a href="#5-开发环境配置" class="headerlink" title="5. 开发环境配置">5. 开发环境配置</a></h1><h2 id="5-1-Visual-Studio-Code"><a href="#5-1-Visual-Studio-Code" class="headerlink" title="5.1 Visual Studio Code">5.1 Visual Studio Code</a></h2><p>如果你使用 VSCode 进行 Flutter 应用的开发，需要安装 Flutter 拓展</p>
<p>在应用市场中搜索 “Flutter” 安装第一个扩展即可</p>
<h2 id="5-2-Android-Studio"><a href="#5-2-Android-Studio" class="headerlink" title="5.2 Android Studio">5.2 Android Studio</a></h2><p>如果你使用 Android Studio 进行开发，则需要安装 Flutter 插件</p>
<p>点击 “Configure -&gt; Plugins” 在 Marketplace 中搜索 flutter 安装即可</p>
<h1 id="6-检查安装环境"><a href="#6-检查安装环境" class="headerlink" title="6. 检查安装环境">6. 检查安装环境</a></h1><p>所有步骤进行完毕后，连接手机，使用 <code>flutter doctor</code> 查看是否正常安装完毕，</p>
<p><img src="https://static.mutoe.com/2019/flutter-starting/flutter-doctor.png" alt="flutter-doctor"></p>
<p>如果你的某一步不是对勾的话可以检查下是什么问题，也可以在博客下方留言，我会尽可能的帮助你来解决问题 😊</p>
<h1 id="7-Hello-world"><a href="#7-Hello-world" class="headerlink" title="7. Hello world!">7. Hello world!</a></h1><blockquote>
<p>我使用 VSCode 进行开发，所以这里就不再演示 Android Studio 下的 Hello world 了</p>
</blockquote>
<p>启动 VSCode，按 <code>Command``Shift``P</code> 然后输入 <code>flutter new</code> 按回车建立一个 Flutter 项目，输入项目名 “hello_world”</p>
<blockquote>
<p>如果出现这个错误</p>
<p><img src="https://static.mutoe.com/2019/flutter-starting/vscode-load-flutter-sdk.png" alt="vscode-load-flutter-sdk"></p>
<p>需要手动配置一下 Flutter SDK 的位置，打开 VSCode 设置，搜索 “flutterSdkPath”，输入地址 <code>~/.flutter-sdk/flutter/bin</code>，然后重启一下 VSCode 就好啦</p>
</blockquote>
<p>然后选择一个项目目录用于存放 Flutter 代码, 如果看见以下目录，则说明我们的 Flutter 项目创建成功啦！</p>
<p><img src="https://static.mutoe.com/2019/flutter-starting/hello-world.png" alt="hello-world"></p>
<p>直接按 F5 启动项目，选择一个模拟器或者是真机，愉快的开启我们的 Flutter 之旅吧！</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档">参考文档</a></h1><ul>
<li><a href="https://flutter.dev/docs/get-started">Flutter Get Started</a></li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 学习笔记</title>
    <url>//2020/flutter-study-notes/</url>
    <content><![CDATA[<p>这里记录了一些个人学习 Flutter 时遇到的一些问题, 可以作为避免踩坑和速查手册. 如有疑问欢迎留言.</p>
<span id="more"></span>

<h1 id="我该选择什么布局容器"><a href="#我该选择什么布局容器" class="headerlink" title="我该选择什么布局容器?">我该选择什么布局容器?</a></h1><h2 id="我想自定义大小"><a href="#我想自定义大小" class="headerlink" title="我想自定义大小">我想自定义大小</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Container-class.html">Container</a>
<a href="https://api.flutter.dev/flutter/widgets/SizedBox-class.html">SizedBox</a>
<a href="https://api.flutter.dev/flutter/widgets/SizedOverflowBox-class.html">SizedOverflowBox</a></p>
<h2 id="我想增加内边距"><a href="#我想增加内边距" class="headerlink" title="我想增加内边距">我想增加内边距</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Padding-class.html">Padding</a>
<a href="https://api.flutter.dev/flutter/widgets/Container-class.html">Container</a></p>
<h2 id="我想将子元素进行对齐"><a href="#我想将子元素进行对齐" class="headerlink" title="我想将子元素进行对齐">我想将子元素进行对齐</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Center-class.html">Center</a> 居中对齐
<a href="https://api.flutter.dev/flutter/widgets/Align-class.html">Align</a> 选择任意一个位置
[Baseline][] 根据基线对齐</p>
<h2 id="我想让子元素的宽高按父元素进行适应"><a href="#我想让子元素的宽高按父元素进行适应" class="headerlink" title="我想让子元素的宽高按父元素进行适应">我想让子元素的宽高按父元素进行适应</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/FittedBox-class.html">FittedBox</a></p>
<h2 id="我想指定元素的宽高比"><a href="#我想指定元素的宽高比" class="headerlink" title="我想指定元素的宽高比">我想指定元素的宽高比</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/AspectRatio-class.html">AspectRatio</a></p>
<h2 id="我想约束子元素的宽高"><a href="#我想约束子元素的宽高" class="headerlink" title="我想约束子元素的宽高">我想约束子元素的宽高</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/ConstrainedBox-class.html">ConstrainedBox</a>
<a href="https://api.flutter.dev/flutter/widgets/FractionallySizeedBox-class.html">FractionallySizeedBox</a>
<a href="https://api.flutter.dev/flutter/widgets/IntrinsicHeight-class.html">IntrinsicHeight</a>
<a href="https://api.flutter.dev/flutter/widgets/IntrinsicWidth-class.html">IntrinsicWidth</a>
<a href="https://api.flutter.dev/flutter/widgets/LimitedBox-class.html">LimitedBox</a></p>
<h2 id="我想控制子-Widget-的显示与隐藏"><a href="#我想控制子-Widget-的显示与隐藏" class="headerlink" title="我想控制子 Widget 的显示与隐藏">我想控制子 Widget 的显示与隐藏</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Offstage-class.html">Offstage</a></p>
<h2 id="我想让子元素溢出父元素显示"><a href="#我想让子元素溢出父元素显示" class="headerlink" title="我想让子元素溢出父元素显示">我想让子元素溢出父元素显示</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/OverflowBox-class.html">OverflowBox</a>
<a href="https://api.flutter.dev/flutter/widgets/SizedOverflowBox-class.html">SizedOverflowBox</a></p>
<h2 id="我想让子元素旋转或平移"><a href="#我想让子元素旋转或平移" class="headerlink" title="我想让子元素旋转或平移">我想让子元素旋转或平移</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Transform-class.html">Transform</a></p>
<h2 id="我想让子元素水平排列"><a href="#我想让子元素水平排列" class="headerlink" title="我想让子元素水平排列">我想让子元素水平排列</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Row-class.html">Row</a></p>
<h2 id="我想让子元素垂直排列"><a href="#我想让子元素垂直排列" class="headerlink" title="我想让子元素垂直排列">我想让子元素垂直排列</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Column-class.html">Column</a></p>
<h2 id="我想让子元素们堆叠在一起"><a href="#我想让子元素们堆叠在一起" class="headerlink" title="我想让子元素们堆叠在一起">我想让子元素们堆叠在一起</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Stack-class.html">Stack</a>
<a href="https://api.flutter.dev/flutter/widgets/IndexedStack-class.html">IndexedStack</a></p>
<h2 id="我想让子元素进行流式布局"><a href="#我想让子元素进行流式布局" class="headerlink" title="我想让子元素进行流式布局">我想让子元素进行流式布局</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Flow-class.html">Flow</a>
<a href="https://api.flutter.dev/flutter/widgets/Wrap-class.html">Wrap</a>
<a href="https://api.flutter.dev/flutter/widgets/ListBody-class.html">ListBody</a>
<a href="https://api.flutter.dev/flutter/widgets/ListView-class.html">ListView</a></p>
<h2 id="我想让子元素可滚动显示"><a href="#我想让子元素可滚动显示" class="headerlink" title="我想让子元素可滚动显示">我想让子元素可滚动显示</a></h2><p>解决 <code>BOTTOM OVERFLOWED BY xx PIXELS</code> 的问题</p>
<p><a href="https://api.flutter.dev/flutter/widgets/SingleChildScrollView-class.html">SingleChildScrollView</a></p>
<h2 id="我想让子元素使用表格布局"><a href="#我想让子元素使用表格布局" class="headerlink" title="我想让子元素使用表格布局">我想让子元素使用表格布局</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Table-class.html">Table</a></p>
<h2 id="我想自定义子元素的排列"><a href="#我想自定义子元素的排列" class="headerlink" title="我想自定义子元素的排列">我想自定义子元素的排列</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/CustomSingleChildLayout-class.html">CustomSingleChildLayout</a>
<a href="https://api.flutter.dev/flutter/widgets/CustomMultiChildLayout-class.html">CustomMultiChildLayout</a>
<a href="https://api.flutter.dev/flutter/widgets/LayoutBuilder-class.html">LayoutBuilder</a></p>
<h2 id="我想将很多可滚动的组件拼在一起组成一个大滚动组件"><a href="#我想将很多可滚动的组件拼在一起组成一个大滚动组件" class="headerlink" title="我想将很多可滚动的组件拼在一起组成一个大滚动组件">我想将很多可滚动的组件拼在一起组成一个大滚动组件</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/CustomScrollView-class.html">CustomScrollView</a></p>
<p>需要注意 <code>CustomScrollView</code> 该组件只支持 Sliver 系列组件, 常用的有这些</p>
<p><a href="https://api.flutter.dev/flutter/widgets/SliverAppBar-class.html">SliverAppBar</a>
<a href="https://api.flutter.dev/flutter/widgets/SliverPersistentHeader-class.html">SliverPersistentHeader</a>
<a href="https://api.flutter.dev/flutter/widgets/SliverFillRemaining-class.html">SliverFillRemaining</a>
<a href="https://api.flutter.dev/flutter/widgets/SliverToBoxAdapter-class.html">SliverToBoxAdapter</a>
<a href="https://api.flutter.dev/flutter/widgets/SliverPadding-class.html">SliverPadding</a>
<a href="https://api.flutter.dev/flutter/widgets/SliverList-class.html">SliverList</a>
<a href="https://api.flutter.dev/flutter/widgets/SliverGrid-class.html">SliverGrid</a></p>
<h2 id="我想显示标签栏-Material"><a href="#我想显示标签栏-Material" class="headerlink" title="我想显示标签栏 (Material)">我想显示标签栏 (Material)</a></h2><p><a href="https://api.flutter.dev/flutter/material/TabBar-class.html">TabBar</a>
<a href="https://api.flutter.dev/flutter/material/TabBarView-class.html">TabBarView</a>
<a href="https://api.flutter.dev/flutter/material/DefaultTabController-class.html">DefaultTabController</a></p>
<p>TabBar 通常配合 TabBarView 组件使用</p>
<details>
<summary>如何使用 TabBar</summary>

<ol>
<li>使用 DefaultTabController</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Tab&gt; tabs;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; pages;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  build(context) &#123;</span><br><span class="line">    <span class="keyword">return</span> DefaultTabController(</span><br><span class="line">      length: <span class="number">3</span>,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;title&#x27;</span>),</span><br><span class="line">          bottom: TabBar(tabs: tabs),</span><br><span class="line">        ),</span><br><span class="line">        body: TabBarView(children: pages),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用自定义的 controller</li>
</ol>
<blockquote>
<p>注意类后面的 <code>with TickerProviderStateMixin</code></p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyWidget</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _tabController;</span><br><span class="line">  <span class="built_in">List</span>&lt;Tab&gt; tabs;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; pages;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  initState(() &#123;</span><br><span class="line">    _tabController = TabController(length: <span class="number">3</span>, vsync: <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  build(context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;title&#x27;</span>),</span><br><span class="line">        bottom: TabBar(tabs: tabs, controller: _tabController),</span><br><span class="line">      ),</span><br><span class="line">      body: TabBarView(children: pages, controller: _tabController),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h1 id="我该选择什么组件填充内容"><a href="#我该选择什么组件填充内容" class="headerlink" title="我该选择什么组件填充内容?">我该选择什么组件填充内容?</a></h1><h2 id="我想显示文本"><a href="#我想显示文本" class="headerlink" title="我想显示文本">我想显示文本</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Text-class.html">Text</a></p>
<h2 id="我想显示图片"><a href="#我想显示图片" class="headerlink" title="我想显示图片">我想显示图片</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Image-class.html">Image</a>
<a href="https://api.flutter.dev/flutter/widgets/RawImage-class.html">RawImage</a></p>
<h2 id="我想显示图标"><a href="#我想显示图标" class="headerlink" title="我想显示图标">我想显示图标</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Icon-class.html">Icon</a></p>
<h2 id="我想显示按钮"><a href="#我想显示按钮" class="headerlink" title="我想显示按钮">我想显示按钮</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/RaisedButton-class.html">RaisedButton</a></p>
<h2 id="我想创建一个表单"><a href="#我想创建一个表单" class="headerlink" title="我想创建一个表单">我想创建一个表单</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/Form-class.html">Form</a>
<a href="https://api.flutter.dev/flutter/widgets/FormField-class.html">FormField</a></p>
<h2 id="我想监听用户键盘按键"><a href="#我想监听用户键盘按键" class="headerlink" title="我想监听用户键盘按键">我想监听用户键盘按键</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/RawKeyboardListener-class.html">RawKeyboardListener</a></p>
<h2 id="我想添加渐变"><a href="#我想添加渐变" class="headerlink" title="我想添加渐变">我想添加渐变</a></h2><p><a href="https://api.flutter.dev/flutter/painting/LinearGradient-class.html">LinearGradient</a></p>
<h2 id="我想添加动画"><a href="#我想添加动画" class="headerlink" title="我想添加动画">我想添加动画</a></h2><p><a href="https://api.flutter.dev/flutter/widgets/AnimatedContainer-class.html">AnimatedContainer</a> - 状态变换时使用线性算法
<a href="https://api.flutter.dev/flutter/widgets/AnimatedBuilder-class.html">AnimatedBuilder</a>
<a href="https://api.flutter.dev/flutter/widgets/DecoratedBoxTransition-class.html">DecoratedBoxTransition</a> - Decorated 变换时使用线性算法</p>
<p><a href="https://api.flutter.dev/flutter/widgets/AnimatedCrossFade-class.html">AnimatedCrossFade</a> - 在两个子组件之间切换</p>
<p><a href="https://api.flutter.dev/flutter/widgets/Hero-class.html">Hero</a> - 在不同屏幕之间保持同一个元素的切换动画</p>
<h1 id="我想"><a href="#我想" class="headerlink" title="我想">我想</a></h1><h2 id="我想调用震动功能"><a href="#我想调用震动功能" class="headerlink" title="我想调用震动功能">我想调用震动功能</a></h2><p>使用 <a href="https://github.com/benjamindean/flutter_vibration"><code>vibration</code></a> 库，该库支持自定义震动强度和时间，比如具有线性马达的手机可以通过设置较短的持续时间来实现触摸反馈的功能。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">await</span> Vibration.hasVibrator()) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">await</span> Vibration.hasAmplitudeControl()) &#123;</span><br><span class="line">    <span class="comment">// 震动强度检测</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;amplitude&#x27;</span>);</span><br><span class="line">    Vibration.vibrate(amplitude: <span class="number">128</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">await</span> Vibration.hasCustomVibrationsSupport()) &#123;</span><br><span class="line">    <span class="comment">// 震动持续时间检测 (Android 8.0+)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;custom vibrations&#x27;</span>);</span><br><span class="line">    Vibration.vibrate(duration: <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 普通震动</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;normal&#x27;</span>);</span><br><span class="line">    Vibration.vibrate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="我想获取计步器的数据"><a href="#我想获取计步器的数据" class="headerlink" title="我想获取计步器的数据">我想获取计步器的数据</a></h2><p>使用 <a href="https://pub.dev/packages/pedometer"><code>pedometer</code></a> 库</p>
<h1 id="MacOS-APP"><a href="#MacOS-APP" class="headerlink" title="MacOS APP">MacOS APP</a></h1><p>编译到 MacOS 运行时的一些问题</p>
<h2 id="无法连接网络怎么办？"><a href="#无法连接网络怎么办？" class="headerlink" title="无法连接网络怎么办？">无法连接网络怎么办？</a></h2><p>编译到 macos 后无法发起网络请求、加载网络图片等</p>
<p>在 <code>macos/Runner/DebugProfile.entitlements</code> 中设置 <code>com.apple.security.network.client</code> 为 <code>true</code> ，然后重新编译即可</p>
<figure class="highlight xml"><figcaption><span>macos/Runner/DebugProfile.entitlements</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.app-sandbox<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.cs.allow-jit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.network.server<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.network.client<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇">插件篇</a></h1><h2 id="Sqflite"><a href="#Sqflite" class="headerlink" title="Sqflite">Sqflite</a></h2><h3 id="执行-SQL-时提示-no-such-table"><a href="#执行-SQL-时提示-no-such-table" class="headerlink" title="执行 SQL 时提示 no such table">执行 SQL 时提示 no such table</a></h3><p>数据表没有创建好, 检查创建数据表的 SQL 语句是否正确.</p>
<p>另外需要注意的是, <code>sqflite</code> 在执行 <code>db.execute()</code> 时, <strong>不支持一次执行多行命令</strong>, 所以多个语句需要拆成多个命令分别执行.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future dbImportSql(Database db, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; sqlStatements) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> batch = db.batch();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> statement <span class="keyword">in</span> sqlStatements) &#123;</span><br><span class="line">    batch.execute(statement);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> batch.commit(noResult: <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://github.com/tekartik/sqflite/issues/87#issuecomment-451411459">Creating database from SQL Scheme - tekartik&#x2F;sqflite#87</a></li>
</ul>
<!-- prettier-ignore-start -->
<!-- prettier-ignore-end -->
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>换了M1后，我的前端测试提速了10倍！</title>
    <url>//2022/frontend-test-optimize-diary/</url>
    <content><![CDATA[<blockquote>
<p>标题党，勿全信；<br>这是一篇关于前端单元测试的优化心得，讲述了一个中型团队坎坷的痛与泪的故事；<br>长文预警，建议当短篇小说看；<br>干货在末尾。  </p>
</blockquote>
<p>就在前几天，我拿到了心心念念的 MacBook M1 Pro，上手第一件事就是跑一下项目上的前端测试，期待着久仰大名的 M1 处理器一显神威。</p>
<p>为什么这么着急用 M1 跑测试？这个故事要从半年前说起。</p>
<h2 id="1-越来越痛的测试"><a href="#1-越来越痛的测试" class="headerlink" title="1. 越来越痛的测试">1. 越来越痛的测试</a></h2><p><img src="https://static.mutoe.com/2022/frontend-test-optimize-diary/1-slowly-tests.png">
小半年前，项目规模越来越大，随着十几轮冲刺后，我们有两个前端库的代码量和测试也越来越多，于是出现了上面的对话</p>
<p>不知从什么时候开始，项目代码里的测试成了我们的痛点，推代码时会触发全量的测试，而在这推代码的10多分钟里，我是什么都做不了的，电脑卡的要命，不得不站起来去接杯水或上个厕所。</p>
<p>从某种角度来说，也挺好，能时不时的提醒我站起来活动活动，放松一下肩颈和眼睛，看看博客摸摸鱼（不是）。</p>
<p>但问题是 Pipeline 上的速度也是稳定慢，从开始 Build 到 Deploy to Dev，更是达到了离谱的 30 分钟左右，Pipeline 甚至还触发了客户设定的 300 小时&#x2F;月的限流。</p>
<h2 id="2-法外狂徒"><a href="#2-法外狂徒" class="headerlink" title="2. 法外狂徒">2. 法外狂徒</a></h2><p><img src="https://static.mutoe.com/2022/frontend-test-optimize-diary/2-git-push-no-verify.png"></p>
<p><code>git push --no-verify</code> 成了我们项目的常态。</p>
<span id="more"></span>

<p>有时 QA 小伙伴急着验证某功能、或者我做了好几天的卡准备 Desk Check 却发现一个小问题时，我花了 10 分钟定位并解决了代码，然后推代码触发 git hooks 跑测试，保守计算10min，然后 pipeline 在不用排队的情况下 30min。一切顺利，在我推代码后的 40min 左右才能在环境上看到生效的代码。</p>
<p>而最坏情况下，我将在 10min 后发现某个看起来不相关的测试挂了或覆盖率不达标，修好后再来 10min，推上去后发现 Pipeline 被限流，在仅有 1 个 agent 可用的情况下需要排队（通常发生在月末），这又是 1-30min 左右的等待，排好队后是 30 分钟 build。这将会是 1 小时左右的反馈周期，哪怕我可能只用了几分钟来定位并修复问题，这效率低的简直让人抓狂。</p>
<p>而本地联调也有一些问题，在微服务的环境下，想要本地联调需要至少启动1个前端，1个BFF，3个后端服务，让我本就垃圾的电脑更是负重不堪，电脑经常卡的像是在播放 PPT。</p>
<p>聪明的我想到了一个办法，艺高人胆大，我可以在 <code>--no-verify</code> 后在本地同时跑测试（危险动作，请勿模仿），本地挂了就立马停掉 Pipeline，让本地测试和 Pipeline 并行起来，能节约个10多分钟。但人在河边走，哪有不湿鞋，偶尔会 block 其他小伙伴的部署，这使我无地自容。</p>
<p>于是我们在 <ruby>Tech Huddle<rt>技术研讨会</rt></ruby> 上几次提出此问题，大家提出了一些解决方案：</p>
<ul>
<li>从代码层面找出跑得慢的问题</li>
<li>等着换性能强劲的 M1</li>
<li>申请云端机器来跑测试</li>
</ul>
<p>当时，换 M1 是不可能换的，向 TechOps 同事询问，啥时候能换 M1 呀，啥时候，啥时候……我都觉得自己有点烦，但还是忍不住想问，谁能经得住 M1 的诱惑呢 😍</p>
<p>这条路是暂时行不通了，同时我们在分头寻找其他解决办法。组里一位大佬为我们申请了 AWS 经费，这给了我们实现选项 3 的一些可能。不过大家似乎觉得麻烦，机房在国外，有延迟，体验也不好，有人用了一下后就没怎么用了。</p>
<p>代码层面，项目上前来支援的一位前端大佬开始从代码层面分析问题，某一个测试文件从开始到跑完，竟然会花到50、60秒（大佬还贴心的用 Excel 来跟踪跑的慢的测试）</p>
<p><img src="https://static.mutoe.com/2022/frontend-test-optimize-diary/3-slow-test-analysis.png"></p>
<p>经过大佬的一番研究，竟然发现了……</p>
<h2 id="3-信仰崩塌了"><a href="#3-信仰崩塌了" class="headerlink" title="3. 信仰崩塌了">3. 信仰崩塌了</a></h2><p>项目上的测试一直选用的是 Jest + React Testing Library，初期我们对 Enzyme or Testing Library 的选型也有过一些研究，最终我们选择了偏向黑盒的 Testing Library。</p>
<p>而我则完全 Follow Testing Library 的思想，使用 <code>fireEvent</code> 模拟用户的点击、输入行为，好处不言而喻，为重构代码带来了很多便利。</p>
<p>而为了满足可访问性的要求，我还建议组员使用 <code>getByRole</code> 来获取元素，这样既可以增强可访问性，养成好习惯，也可以按照 Testing Library 的思想来模拟用户的寻找行为而不是使用 <code>data-testid</code> 来获取 DOM。</p>
<p>问题就出在这 <code>getByRole</code> 上。经过大佬的测试，把这些测试其中的 <code>getByRole</code> 换成了 <code>getByTestId</code>，瞬间快了不少。可以在上图看到，在她的电脑上提升比较大的已经从 92s 缩短到了 19s，也就出现了第一张图中提到的 “竟然能在 600s 内跑完”。而在我的电脑上也表现不错（图里从开始的 600s 到修改前的 377s 的提速用了一些不方便透露的黑魔法）</p>
<p><img src="https://static.mutoe.com/2022/frontend-test-optimize-diary/4-slowly-get-by-role.png"></p>
<p>啊！我的 <code>getByRole</code>，一直以来的信仰，崩塌了。</p>
<p>以后就都得回到给元素加 <code>data-testid</code> 的时代了吗？</p>
<p>不甘心的我又找到了一个叫做 <code>getByLabelText</code> 的方法，也可以根据 DOM 中声明的 <code>aria-label</code> 来查找元素，除了参数列表不一样，查找性能是比 <code>getByRole</code> 高一些。</p>
<p>我已经不知道前端项目的测试是不是都是这样了。于是我在公司前端社区和内部论坛向大家调查了一下，结果是大家项目的测试都不会这么慢，区别是有些测试跑得快的项目组，他们没有测 TSX。</p>
<p>那也就是说，测试时虚拟 DOM 的渲染会让效率降低？</p>
<p>于是我和项目组的小伙伴在很长的一段时间里都认为：“Testing Library 的思想很不错，但太慢了，如果有下个项目，我们还是会选择 Enzyme，测 shallow mount 一定会比 render dom tree 快”。</p>
<p>但，真的是这样吗？</p>
<h2 id="4-世上无难事，只要肯放弃"><a href="#4-世上无难事，只要肯放弃" class="headerlink" title="4. 世上无难事，只要肯放弃">4. 世上无难事，只要肯放弃</a></h2><p><img src="https://static.mutoe.com/2022/frontend-test-optimize-diary/5-example-unit-test.png"></p>
<p>在正则+全局替换掉 <code>getByRole</code> 后，我们的测试快了一些。不过感觉还是不够，只能这样了吗？</p>
<p>随后我深入进行了一番研究，发现单个测试用例不慢，只有几十毫秒。它慢在从执行命令开始，到第一个测试用例开始执行的这段时间很久。于是我进行了一些简单的分析：</p>
<ul>
<li>项目用的语言是 TypeScript，要交给 Jest执行需要一个编译的步骤；</li>
<li>启动测试前有一个初始化测试环境的过程，这个脚本位于 setupTest.ts 中；</li>
<li>测 TSX 时需要一个虚拟 DOM 环境，启动这个环境需要耗时；</li>
</ul>
<p>以上就是从按下按键到测试实际开始执行中大致执行的步骤，按照上面的清单，我：</p>
<ul>
<li>先是替换了 <code>ts-jest</code> 改用 <code>swc-jest</code> 来编译 TS，无果；</li>
<li>然后在 <code>setupTest.ts</code> 的第一行和最后一行打了时间戳，发现第一行开始时已经是十几秒后了，不是这个原因；</li>
<li>是虚拟 DOM 的原因吗？把 <code>jest-environment-jsdom-sixteen</code> 换成 <code>jest-dom</code>，结果测试都跑不起来了……</li>
</ul>
<p>看来只有不测 TSX 了，遂放弃。</p>
<h2 id="5-解决了，但没有完全解决"><a href="#5-解决了，但没有完全解决" class="headerlink" title="5. 解决了，但没有完全解决">5. 解决了，但没有完全解决</a></h2><p><img src="https://static.mutoe.com/2022/frontend-test-optimize-diary/6-unresolved-problem.png"></p>
<p>就这样将就了几个月，团队里另一位前端大佬忍不了了，抽时间写了一份 Git hook 脚本，用于 push 前检查代码的改动影响到的相关文件，然后利用 Jest 的 <code>findRelatedTests</code> 功能来找出相关文件的相关测试，达到增量跑测试的目的。</p>
<p>我试用了一下，体验很棒，在我改一些纯文本的静态文件时，没有找到相关的测试文件（我们规定了静态内容不测），会自动帮我跳过测试。</p>
<p>而当我改动了某个 Hook 文件时，这位大佬的脚本会找到所有涉及到这个 Hook 的组件，和所有用到这个组件的其他组件，然后传递给 Jest，Jest 帮我找到这些文件的相关测试，最后只用跑十几个测试文件就可以推代码了。</p>
<p>这让痛苦万分的我们从以前每次都要跑 1300 多个 case 变为了只用跑几十个 case，算是巨大的进步了。</p>
<p>本地推代码的问题解决了，但没有完全解决。几十个测试也是要跑几分钟的，同样的，期间什么也做不了，CI 上也是一样的需要缓慢的跑全量测试。</p>
<p>不过本地推代码的问题是解决了一些，稍微减缓了一点我使用 <code>--no-verify</code> 的心理负担，感觉还是不错 😌</p>
<h2 id="6-心心念念的-M1"><a href="#6-心心念念的-M1" class="headerlink" title="6. 心心念念的 M1">6. 心心念念的 M1</a></h2><p>随着时间一步步推移，眼看就要到 4 月换 M1 的日子了。（公司电脑 3 年一换，4月份该换新款 M1 了）</p>
<p>4月，度日如年。</p>
<p>终于，一天下午收到了公司设备管理部门通知我领新电脑的邮件！我的将死之心重新被点燃！我要赶紧设置好环境，期待着在3分钟内跑完项目的测试。</p>
<p>经过一下午和晚上的忙碌，我终于在晚上 11 点下载好了项目代码，配置好了环境。拿出下午在旧电脑跑的测试截图，准备好测试，在新的 M1 上按下了 Enter 键。</p>
<p>然而，测试还没跑完，我的心已经凉了一半。时间已经过去了5分钟，400个测试文件才跑了一半。而测试跑完时，10分钟已经过去了。</p>
<p>快得吓人？</p>
<p><img src="https://static.mutoe.com/2022/frontend-test-optimize-diary/7-m1-frighteningly-fast.png"></p>
<p>我在期待什么？</p>
<p>故事还没结束。</p>
<p>在第二天的工作中，我明显感觉到启动环境和索引代码的速度比以往快了不少，切换 APP 也如丝般顺滑。</p>
<p>组里的一位数据大佬拿着他的祖传脚本，说要与我的 M1 一较高下，结果同样的代码，在他的18款 Macbook Pro 上跑了 4 分半，而在我的 M1 上只花了 2 分多，整整有一倍的性能差距。</p>
<p>以上种种事实，让我觉得事情没有那么简单。</p>
<h2 id="7-水落石出"><a href="#7-水落石出" class="headerlink" title="7. 水落石出">7. 水落石出</a></h2><p>“有没有一种可能，是我们的代码写的太垃圾了？”</p>
<p>“不可能，绝对不可能！[狗头] ”</p>
<p><img src="https://static.mutoe.com/2022/frontend-test-optimize-diary/%E6%9B%B9%E6%93%8D-%E4%B8%8D%E5%8F%AF%E8%83%BD.gif"></p>
<p>于是我拿出了我年前写的一份开源代码，技术栈差不太多，跑了一次测试，那测试快的如丝般顺滑。</p>
<p>我不由自主的开始吐槽，念叨着“我们这代码，乔布斯活过来都拯救不了。” 这发言引来了同桌的围观，我们就对那份代码开始了一步步的探索之旅。</p>
<p>首先观察了依赖的版本，不一致。遂调整成一致的版本，依旧龟速。然后观察了 Jest 的配置，不一致。遂调整成一致，依旧龟速。</p>
<p>于是我将项目中的一个测试文件复制到了那个项目中，把那个组件用到的依赖给新项目装上，发现新项目的测试也变慢了。</p>
<p>哼，事情开始变得有趣了起来 😏</p>
<p>我和同桌都觉得很有意思，于是我们决定将那个示例组件中的疑点代码逐步移除，看看到底是我们的什么垃圾代码导致的问题。</p>
<p>这个文件的测试总共花费了 20s。我们先是移除了一个第三方幻灯片组件，无果。随后移除了一个看起来内部很复杂的 Hook，依旧无果，这时代码里只剩一些 <code>if</code> <code>else</code> 渲染分支了。</p>
<p>我们索性删除所有代码，直接 <code>return</code> 了一个空 <code>div</code>，这次测试在 3s 就完成了。情理之中，意料之外。</p>
<p>这让我们的将死之心泛起了一大片浪花，我们有救了！！！</p>
<p>撤销代码！ 最后没有删掉的那个代码是 Material UI 的 <code>Button</code>，<code>Button</code> 内还有一个 Material UI 的 <code>Icon</code>。删掉 <code>Icon</code>，再跑。</p>
<p>3s！</p>
<p>随后我们将项目中的图标库使用 Jest 代理掉（<code>moduleNameMapper</code>），所有图标返回一个空的 <code>svg</code> 元素。</p>
<p>于是</p>
<p><img src="https://static.mutoe.com/2022/frontend-test-optimize-diary/8-the-fast-test-result.png"></p>
<p>此刻，伴随着颤抖的双手，激动的心情，我想哭得心都有了，太久没有见到过项目如此丝滑的测试了！</p>
<p>358 个文件，2106 个测试，61.98 秒！</p>
<p>这才是单元测试应该有的速度！</p>
<p>Pipeline 的速度也由 27 分钟降到了 15 分钟左右！</p>
<p>信仰捡起来！Testing Library 吹起来！说什么不测 TSX 抽 Hook？TSX 就该测！<code>getByRole</code> 什么的影响不大，用起来！</p>
<p>所以 M1 到底快不快？</p>
<p>代码推上去后，同桌和其他前端小伙伴也迫不及待的也跑起了测试，在他们的电脑上却要花费 120s 左右。</p>
<p><img src="https://static.mutoe.com/2022/frontend-test-optimize-diary/9-compare-macbooks.png"></p>
<p>快得吓人。</p>
<h2 id="8-反思"><a href="#8-反思" class="headerlink" title="8. 反思">8. 反思</a></h2><p>困扰了项目组半年之久的问题，竟然是因为一个图标库。</p>
<p><strong>我不知道。不知道它是什么时候被引入的。</strong> 或许是 1 年前，或许是更久。但这不重要，重要的是代码少的时候你感觉不出，代码量变大时才会越来越痛。</p>
<p>问题的原因和推导的过程并不复杂，也不难找到原因，但问题是我为什么没有早点想到这个办法？</p>
<p><strong>我不知道。不知道为什么没有早点想到这个办法。</strong> 或许是我时常在想 ”磨刀不误砍柴工“，我又在想 “想不通的就不要去想了，明天就想通了“，到底是后者胜利了。</p>
<p>又或许是温水煮青蛙，期间我甚至已经没有去想，正常的测试应该是怎样的。我尝试去找原因，找到了但又没有找到，最后只将希望寄托在 M1 上。最后即使是快得吓人的 M1 也于事无补，才回归到了代码本身正视代码问题。</p>
<p><strong>我不知道。不知道如果不换 M1，我会不会带着崩塌的信仰，到下个项目鼓吹 Enzyme 贬低 Testing Library。</strong></p>
<p>完。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结">总结</a></h2><p>如果发现项目前端测试慢（参考速度 2100 个测试 60 ~ 120 秒左右），可以从以下几个方面着手优化</p>
<ul>
<li>找出一个慢的测试，连带组件放到新建的项目里试试，然后逐步的排查；</li>
<li>编写脚本，找到 <code>git origin/master</code> 和 <code>HEAD</code> 间的文件变动，然后利用 Jest 的 <code>findRelatedTests</code> 功能，增量测试；</li>
<li>如果用了 Testing Library 的 <code>getByRole</code>，可以尝试替换为 <code>getByLabelText</code>，不丢失可访问性的同时，可能会有奇效；</li>
<li>在 <code>setupTest</code> 中打一些时间戳，排查初始化测试环境的问题；</li>
<li>更换 <code>ts-jest</code> 为 <code>swc-jest</code>，SWC 是一个基于 Rust 的高性能 TypeScript 编译器套件，生产环境没试过；</li>
<li>放弃测 UI 组件，严格控制 UI 组件内不能有复杂逻辑，这点可以通过设置 Coverage 针对文件类型生效；</li>
<li>修改测试策略，不测不重要或代价大收益低的东西，比如纯文本、绘制逻辑、第三方库；</li>
<li>打开 Activity Monitor (或 windows 下的任务管理器) 然后跑测试，看看机器里什么进程在大量占用内存和 CPU，可能会有新发现；</li>
<li>在别的机器上跑测试，比如项目的 Monitor 或客户的云机器，注意安全要求；</li>
<li>向领导申请换 M1，快得吓人。</li>
</ul>
<p>最后感谢项目里外为此作出贡献的大佬们：Yue、Xin、Yuexie、Yi、Qirong</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Jenkins 中产出由 Cypress 生成的测试视频</title>
    <url>//2019/generate-cypress-video-report-in-jenkins/</url>
    <content><![CDATA[<p>最近在使用 Cypress 作为前端项目的 E2E 测试，发布到 CI 环境时自动运行。</p>
<p>运行时发现在 Pipeline 测试报告中有生成 mp4 格式的视频，这才想起来 Cypress 自带生成视频快照的功能，结合 Jenkins 收集报告产物，不就可以拿到视频快照了吗？</p>
<p>哈哈，talk is cheap, show my code!</p>
<p>下面是 jenkins 配置</p>
<figure class="highlight groovy"><figcaption><span>Jenkinsfile</span></figcaption><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent any</span><br><span class="line"></span><br><span class="line">  environment &#123;</span><br><span class="line">    CHROME_BIN = <span class="string">&#x27;/bin/google-chrome&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">&#x27;Environment&#x27;</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;uname -a&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;apt-get update&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;apt-get install -y xvfb libgtk-3-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 ttf-wqy-zenhei&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;fc-cache -v&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;yarn install&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;Test&#x27;</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;yarn test:e2e --headless&#x27;</span></span><br><span class="line">        junit <span class="string">&#x27;reporter/output.xml&#x27;</span></span><br><span class="line">        archiveArtifacts <span class="string">&#x27;tests/e2e/videos/*.mp4&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>ttf-wqy-zenhei</code> 是用来解决 Ubuntu 系统中没有中文字体等问题，否则生成的视频报告中的中文都为方框乱码。</p>
<blockquote>
<p>如果是在 CentOS 中，执行 <code>yum -y groupinstall chinese-support</code> 解决中文问题</p>
</blockquote>
<blockquote>
<p>如果不知道 Jenkins 所属运行环境，使用 <code>uname -a</code> 查看系统信息</p>
</blockquote>
<p><code>archiveArtifacts</code> 用来收集报告产物</p>
<p><code>junit</code> 用来收集测试报告，但 Cypress 默认是不生成报告的，需要在 <code>cypress.json</code> 中增加以下内容</p>
<figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;reporter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;junit&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;reporterOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mochaFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;reporter/output.xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;toConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>效果图</strong></p>
<p><img src="https://static.mutoe.com/2019/generate-cypress-video-report-in-jenkins/output-screenshot.png" alt="output"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://or2.in/2016/05/31/Cutycapt-webSnapshot/">Linux+Cutycapt+Xvfb 实现网页快照</a></li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Cypress</tag>
        <tag>CI/CD</tag>
        <tag>DevOps</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>将 GitHub Pages 绑定到自己的域名</title>
    <url>//2016/github-pages-custom-domain/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作">准备工作</a></h3><ul>
<li>一个域名</li>
<li>一个创建好 GitHub Pages 的项目</li>
</ul>
<h3 id="1-解析域名"><a href="#1-解析域名" class="headerlink" title="1 解析域名">1 解析域名</a></h3><p>登录到你购买域名的服务商, 找到解析入口, 这里我以万网提供的解析为例</p>
<p><img src="//static.mutoe.com/2016/github-pages-custom-domain/analysis.png" alt="analysis"></p>
<p>添加一条 CNAME 记录, 将您的 www 或自己定义的子域名解析到您的 GitHub Pages 上.</p>
<p><img src="//static.mutoe.com/2016/github-pages-custom-domain/cname.png" alt="cname"></p>
<blockquote>
<p>如果您打算直接用 <code>www.xxx.com</code> 或 <code>xxx.com</code> 作为您的博客地址, 那么就分别创建主机记录为 www 和 @ 的记录指向到你的 GitHub Pages 上.</p>
</blockquote>
<span id="more"></span>

<h3 id="2-配置-GitHub-Pages-项目"><a href="#2-配置-GitHub-Pages-项目" class="headerlink" title="2 配置 GitHub Pages 项目">2 配置 GitHub Pages 项目</a></h3><p>在你项目的 “Setting” 页面中找到 “GitHub Pages” 子栏目, 在 “Custom domain” 中填上你刚才设置好的解析地址.</p>


<p>稍等片刻, 你就可以访问这个域名了.
但是接下来还有一步要做的工作, 就是在这个项目下创建一个 CNAME 文件, 来保证以后生成的静态页面下都含有该文件, 避免出现无法解析的情况.</p>
<h3 id="3-创建-CNAME-文件"><a href="#3-创建-CNAME-文件" class="headerlink" title="3 创建 CNAME 文件">3 创建 CNAME 文件</a></h3><p>打开你本地保存项目的目录, 找到 <code>./source/</code> , 在该目录下创建一个文件, 文件名为 <code>CNAME</code>, 注意没有后缀, 文件内容就是你的域名.</p>


<p>保存后使用 hexo 生成并发布就可以啦.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d <span class="comment"># -d 参数用来在生成静态文件时同时发布</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 GitHub Pages 和 Hexo 搭建自己的静态博客</title>
    <url>//2016/github-pages-hexo-blog/</url>
    <content><![CDATA[<blockquote>
<p>本文于 2019-08-02 更新, 主要内容是修正一些现在已经无法正常进行的步骤, 包管理器更换为 yarn</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作">准备工作</a></h2><ul>
<li>github 帐号</li>
<li>node 环境</li>
<li>yarn</li>
<li>科学上网 (尽量)</li>
</ul>
<p>如果你还不知道 github 或者 node, 建议您简单了解一下 git &#x2F; github 、 node 工作原理, 以便快速上手该教程, 这里就不再阐述了.</p>
<p>yarn 包管理器是一个 npm 的增强版, 自带国内加速, 什么 cnpm 、 代理之类的都不用啦, 安装方式也很简单: <code>npm i -g yarn</code></p>
<h2 id="1-搭建-Github-Pages"><a href="#1-搭建-Github-Pages" class="headerlink" title="1 搭建 Github Pages">1 搭建 Github Pages</a></h2><h3 id="1-1-新建一个-GitHub-Pages-个人主页项目"><a href="#1-1-新建一个-GitHub-Pages-个人主页项目" class="headerlink" title="1.1 新建一个 GitHub Pages 个人主页项目">1.1 新建一个 GitHub Pages 个人主页项目</a></h3><p>注意项目名要填 <code>用户名.github.io</code> , 比如我的github用户名是mutoe, 那我的项目名就必须填 <code>mutoe.github.io</code> , 如果不这样做的话你的主页就会变成类似 <code>http://mutoe.github.io/project-name</code> 这样的子目录了.</p>
<p><img src="//static.mutoe.com/2016/github-pages-hexo-blog/github-pages-project.jpg" alt="github-pages-project"></p>
<p>填完项目名直接确认就好, 其它不用设置.</p>
<span id="more"></span>

<h2 id="2-搭建本地-git-环境"><a href="#2-搭建本地-git-环境" class="headerlink" title="2 搭建本地 git 环境">2 搭建本地 git 环境</a></h2><p>如果你已经搭建好了 git 环境, 如安装了 github 客户端或其他 git 客户端, 那么您就可以跳过此步.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn global add git</span><br></pre></td></tr></table></figure>

<h2 id="3-搭建本地-Hexo-环境"><a href="#3-搭建本地-Hexo-环境" class="headerlink" title="3 搭建本地 Hexo 环境">3 搭建本地 Hexo 环境</a></h2><h3 id="3-1-安装-Hexo-框架"><a href="#3-1-安装-Hexo-框架" class="headerlink" title="3.1 安装 Hexo 框架">3.1 安装 Hexo 框架</a></h3><p>首先确认您的 node 是 6.9 及以上版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v12.5.0</span><br></pre></td></tr></table></figure>

<p>然后安装 Hexo 到全局空间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn global add hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="3-2-初始化-Hexo-项目目录"><a href="#3-2-初始化-Hexo-项目目录" class="headerlink" title="3.2 初始化 Hexo 项目目录">3.2 初始化 Hexo 项目目录</a></h3><p>在 bash 内切换到你准备在本地保存博客文档 ( markdown ) 的目录.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /www/blog</span><br></pre></td></tr></table></figure>

<p>在执行以下代码前__请尽量确保您正在科学上网__, 否则会让您苦等甚至觉得它卡死了.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<p>这里首先会以 git 方式下载 Hexo 所依赖的程序, 如果您电脑内还没有安装 git 或下载速度过慢, 它会自动切换到 npm 方式下载依赖程序.</p>
<blockquote>
<p>某些地区或时段可能会出现git拉仓库过慢的情况, 所以尽量科学上网.</p>
</blockquote>
<h3 id="3-3-创建一个文章"><a href="#3-3-创建一个文章" class="headerlink" title="3.3 创建一个文章">3.3 创建一个文章</a></h3><p>在 Hexo 中文章叫做 post, 我们新建一个示例文章.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;my first article&quot;</span></span><br></pre></td></tr></table></figure>
<p>_我们第一篇文章名字不起 <code>Hello world!</code> 的原因是 Hexo 自带了一篇示例文章, 就叫做 <code>Hello world!</code> [滑稽][滑稽] _</p>
<p>这条命令执行完之后就新建了一个空白的文章, 它放在 <code>./source/_posts/my-first-article.md</code> 了, 你可以用喜欢的编辑器来写它, 它是 Markdown 标准的文档, 随后会被 Hexo 渲染成 html 形式显示在网页上.</p>
<h3 id="3-4-渲染这篇文章"><a href="#3-4-渲染这篇文章" class="headerlink" title="3.4 渲染这篇文章">3.4 渲染这篇文章</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate <span class="comment"># 这条命令的缩写是 &#x27;hexo g&#x27; , 它们的效果是一样的.</span></span><br></pre></td></tr></table></figure>

<p>然后你就可以在 <code>./public/</code> 找到这篇文章的 html 源码了, 但是你现在还不能够直接打开它, 因为它需要服务器的支持.</p>
<h3 id="3-5-启动-Hexo-内置服务器"><a href="#3-5-启动-Hexo-内置服务器" class="headerlink" title="3.5 启动 Hexo 内置服务器">3.5 启动 Hexo 内置服务器</a></h3><p>如果您的机器上有其他的服务器软件, 可以将虚拟目录指向这个项目, 然后运行. 如果您没有服务器软件, 则可以使用 Hexo 内置的临时服务器进行预览.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server <span class="comment"># 这条命令的缩写是 &#x27;hexo s&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>hexo server</code> 命令默认启动 4000 端口, 您可以使用参数 <code>-p xxxx</code> 来指定一个端口号.</p>
</blockquote>
<p>然后您就可以在浏览器中输入 <code>localhost:4000</code> 查看您的博客啦.</p>
<blockquote>
<p>使服务器停止运行可以使用快捷键 <code>ctrl + c</code></p>
</blockquote>
<h3 id="3-6-关于-Hexo-的更多内容"><a href="#3-6-关于-Hexo-的更多内容" class="headerlink" title="3.6 关于 Hexo 的更多内容">3.6 关于 Hexo 的更多内容</a></h3><p>你可以在 <a href="https://hexo.io/zh-cn/docs/index.html">Hexo 官方文档 ( 简体中文 ) </a> 中查看详细的使用说明.</p>
<h2 id="4-将-Hexo-绑定到-github"><a href="#4-将-Hexo-绑定到-github" class="headerlink" title="4 将 Hexo 绑定到 github">4 将 Hexo 绑定到 github</a></h2><h3 id="4-1-在-Hexo-中填写-GitHub-Pages-地址"><a href="#4-1-在-Hexo-中填写-GitHub-Pages-地址" class="headerlink" title="4.1 在 Hexo 中填写 GitHub Pages 地址">4.1 在 Hexo 中填写 GitHub Pages 地址</a></h3><p>打开项目根目录下 <code>./_config.yml</code> 文件, 找到下面这一行</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span></span><br></pre></td></tr></table></figure>

<p>将 type 的值改为以下内容, 其中 repo 填你的 GitHub Pages 项目地址, branch 填 master.</p>
<blockquote>
<p>在 GitHub Pages 中, 如果你需要将代码渲染为页面, 只能在 master 分支中放置代码.</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/mutoe/mutoe.github.io.git</span> <span class="comment"># 这里改为你自己的 GitHub Pages 地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-将编译好的文件发布到-GitHub-Pages-代码库中"><a href="#4-2-将编译好的文件发布到-GitHub-Pages-代码库中" class="headerlink" title="4.2 将编译好的文件发布到 GitHub Pages 代码库中">4.2 将编译好的文件发布到 GitHub Pages 代码库中</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add -D hexo-deployer-git</span><br><span class="line">$ hexo deploy <span class="comment"># 这条命令的缩写是 &#x27;hexo d&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在这过程中可能会提示您输入 github 帐号密码, 按提示输入即可.</p>
<blockquote>
<p>你可以在未来的编写中使用 <code>hexo g -d</code> 来编译并提交, 他是 <code>hexo generate --deploy</code> 的缩写, 更多命令请<a href="https://hexo.io/zh-cn/docs/commands#generate">参考这里</a></p>
</blockquote>
<h3 id="4-3-访问-GitHub-Pages"><a href="#4-3-访问-GitHub-Pages" class="headerlink" title="4.3 访问 GitHub Pages">4.3 访问 GitHub Pages</a></h3><p>接下来在浏览器中输入您的 GitHub Pages 地址就可以看到用 Hexo 搭建好的个人博客啦.</p>
<hr>
<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读">拓展阅读</a></h2><ul>
<li><a href="https://hexo.io/zh-cn/docs/index.html">Hexo 官方文档 ( 简体中文 ) </a></li>
<li><a href="/2016/github-pages-custom-domain/" title="将 GitHub Pages 绑定到自己的域名">将 GitHub Pages 绑定到自己的域名</a></li>
<li><a href="/2016/hexo-post-livereload-edit/" title="Hexo 实现实时预览编辑">Hexo 实现实时预览编辑</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Hexo 中方便的使用插图</title>
    <url>//2016/hexo-image-plugin/</url>
    <content><![CDATA[<h2 id="如何在-Hexo-中使用插图"><a href="#如何在-Hexo-中使用插图" class="headerlink" title="如何在 Hexo 中使用插图">如何在 Hexo 中使用插图</a></h2><p>我们编辑文章时或有或无的需要佐上那么几张图片来表达自己的想法,  Hexo 中编辑文章的方式是直接写 Markdown 文件, 又没有直接上传图片的接口, 以下是博主从网上收集来的一些 Hexo 中引用图片的办法合集.</p>
<span id="more"></span>

<h3 id="办法1-直接使用-Markdown-提供的引用方法"><a href="#办法1-直接使用-Markdown-提供的引用方法" class="headerlink" title="办法1 直接使用 Markdown 提供的引用方法">办法1 直接使用 Markdown 提供的引用方法</a></h3><p>在 <code>./source/images/</code> 目录下放置图片, 在 Markdown 中这样写</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% asset<span class="emphasis">_img /images/example.png example %&#125;</span></span><br></pre></td></tr></table></figure>
<p>这种方法很方便, 配合 livereload 或 browsersync 插件无论是在本地还是在线上都能看到效果, 但是如果您是用的 Markdown 编辑器, 这似乎就有些难受了, 因为在 Markdown 编辑器中是无法识别这样的图片路径的.</p>
<p>所以对图片的支持程度较差, 您放在 source_dir 下的图片引用后不会正确的显示在本地调试环境或线上, 二者只能取其一, 感觉很难受.</p>
<h3 id="办法2-使用在线图片存储服务"><a href="#办法2-使用在线图片存储服务" class="headerlink" title="办法2 使用在线图片存储服务.">办法2 使用在线图片存储服务.</a></h3><p>引用图片时, 将图片先上传到一个另外的服务器上, 得到该图片的在线地址, 然后在 Markdown 中引用.</p>
<p>国内外用户&#x2F;服务商有很多提供类似图床或对象存储的服务, 即外链.</p>
<ul>
<li><a href="http://pic.gimhoy.com/">Gimhoy图床</a></li>
<li><a href="http://yotuku.cn/">极简图床</a></li>
<li><a href="http://www.qiniu.com/">七牛</a></li>
<li><del><a href="http://weibotuchuang.sinaapp.com/bookmark.html">微博是个好图床</a> ( 2016.12.16 已挂 )</del></li>
</ul>
<p>这些在线图片存储服务使用便捷, 还自带 CDN 加速功能, 但缺点也很明显了, 图片存在别人服务器里面说不定哪天图就挂了, 总觉得不太放心.</p>
<h3 id="办法3-使用-Hexo-asset-image-插件"><a href="#办法3-使用-Hexo-asset-image-插件" class="headerlink" title="办法3 使用 Hexo-asset-image 插件">办法3 使用 Hexo-asset-image 插件</a></h3><p><strong>2017年4月1日 在这个插件更新前 (当前版本 v0.0.3) , 不推荐使用这个插件.
原因是使用该插件后导致编译出的 html 文件中文字符会被转化为 unicode 编码, 不利于站内搜索和 SEO 优化.
你可以直接跳到办法4</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p><em>非官方插件, 该插件由 CodeFalling 维护, 底部有项目地址</em></p>
<p>安装该插件后在您项目根目录的 <code>./_config.yml</code> 中寻找到下面这一行, 将 <code>post_asset_folder</code> 的值设置为 <code>true</code>.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>该设置会在您使用 <code>hexo new &quot;new post&quot;</code> 时在文章所在目录下生成一个同名文件夹, 您只需将图片放入该文件夹, 然后在需要放置图片的位置写入以下代码即可解决 办法1 出现的问题.</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% asset<span class="emphasis">_img example.png example %&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="办法4-使用官方提供的办法"><a href="#办法4-使用官方提供的办法" class="headerlink" title="办法4 使用官方提供的办法">办法4 使用官方提供的办法</a></h3><p>2017年4月1日更新</p>
<p>该方法类似办法3, 只是使用图片的方法由原生的 <code>![]()</code> 改为 Hexo 标签插件.</p>
<p>首先在您项目根目录的 <code>./_config.yml</code> 中寻找到下面这一行, 将 <code>post_asset_folder</code> 的值设置为 <code>true</code>. 原因办法3中已经介绍, 这里不再阐述.</p>
<p>然后在需要引用图片的地方写入以下代码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img example.jpg this is title %&#125;</span><br></pre></td></tr></table></figure>

<p>如果你之前使用了 <code>hexo-asset-image</code> 插件的办法, 你可以使用我写的正则表达式一键替换.</p>
<p>查找</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">!\[([\S ]+)\]\((\S+)\)</span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img $2 $1 %&#125;</span><br></pre></td></tr></table></figure>

<p>配合我的另一篇文章 <a href="//blog.mutoe.com/2016/hexo-post-livereload-edit/">实时预览</a> , 写文章简直美滋滋.</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结">小结</a></h3><p>三种解决办法各有优劣, 博主做个简单的小结.</p>
<table>
<thead>
<tr>
<th>-</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>1 直接使用 Markdown 引用方法</td>
<td>图片资源统一存放, 便于管理</td>
<td>实时预览时排版效果不好</td>
</tr>
<tr>
<td>2 使用在线图片存储服务</td>
<td>方便移植, 不占用本地空间</td>
<td>使用不稳定, 不便于管理</td>
</tr>
<tr>
<td>3 使用 Hexo-asset-image 插件</td>
<td>文件结构更有条理</td>
<td>对中文支持不友好</td>
</tr>
<tr>
<td>4 使用官方提供的办法</td>
<td>官方支持</td>
<td>不适用原生 md 语法</td>
</tr>
</tbody></table>
<p>您可以根据自己的实际情况来进行选择, 不能说哪个办法是最好的, 但肯定有一个最适合您的.</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章">参考文章</a></h2><ul>
<li><a href="http://codefalling.com/2015/12/19/no-pains-with-hexo-local-image/">在 Hexo 中无痛使用本地图片</a> – codefalling ( 原文似乎挂了 <a href="http://www.tuicool.com/articles/umEBVfI">推酷快照</a> )</li>
<li><a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a></li>
<li><a href="https://github.com/CodeFalling/hexo-asset-image/issues/12">CodeFalling&#x2F;hexo-asset-image#12 中文编码问题</a></li>
<li><a href="https://hexo.io/zh-cn/docs/asset-folders.html">资源文件夹 | hexo.io</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 实现实时预览编辑</title>
    <url>//2016/hexo-post-livereload-edit/</url>
    <content><![CDATA[<p>在用了一段时间 Hexo 后, 发现写 Hexo 文章时需要到在线的 Markdown 编辑器中实时预览, 感觉还是有些不方便.</p>
<p>找到官方文档, 在服务器部分有这样一段话</p>
<blockquote>
<p>安装完成后，输入以下命令以启动服务器，您的网站会在 <a href="http://localhost:4000/">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>片子, 根本没有自动更新( 可能是我姿势不对? ).</p>
<span id="more"></span>

<p>期间根据知乎 <a href="https://www.zhihu.com/question/27384681/answer/87037317"><em>@leeon</em></a> 同学的建议, 在 sublime text 和 Chrome 上安装 livereload 插件, 配合 <code>hexo s -g</code> 命令来实时编辑, 思路很棒, 也有用户实验成功, 但我怎么试都不成功, 可能是 hexo 版本的问题.</p>
<p>在网上一番寻找之后, 发现了一个插件: <a href="https://github.com/hexojs/hexo-browsersync/">hexo-browsersync</a>, 这是一个移植插件, 项目主页上基本没有过多的介绍. 下面写一些我自己使用的心得吧.</p>
<h2 id="Hexo-Browsersync-使用方法"><a href="#Hexo-Browsersync-使用方法" class="headerlink" title="Hexo-Browsersync 使用方法">Hexo-Browsersync 使用方法</a></h2><p>首先在项目目录下安装 <code>hexo-browsersync</code> 插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo_project/</span><br><span class="line">$ npm install hexo-browsersync --save</span><br></pre></td></tr></table></figure>

<p>然后运行 hexo server, 看到以下内容就说明启动成功啦.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">[BS] Access URLs:</span><br><span class="line"> --------------------------------------</span><br><span class="line">          UI: http://localhost:3001</span><br><span class="line"> --------------------------------------</span><br><span class="line"> UI External: http://192.168.191.1:3001</span><br><span class="line"> --------------------------------------</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>其中 3001 端口是 browsersync 的配置页面, 4000 端口就是我们的调试页面了.</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章">参考文章</a></h2><ul>
<li><a href="https://yq.aliyun.com/articles/3060">Hexo Server 的一个迷の bug</a> – 潘佳邦</li>
<li><a href="https://github.com/hexojs/hexo-browsersync/issues/12">https://github.com/hexojs/hexo-browsersync/issues/12</a></li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>家庭网络折腾记</title>
    <url>//2021/home-network-infra-notes/</url>
    <content><![CDATA[<p>最近把家里的网络折腾了一下，整体用下来感觉还不错，这里记录下来分享给大家，大家一起学习交流~</p>
<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/infra.png" alt="Infrastructure"></p>
<p>痛点：</p>
<ul>
<li>科学上网。现在家里的网络总是觉得有些不尽人意，本人最大的爱好就是周末宅在家里搞搞开源、打打游戏。遇到问题了 Google &#x2F; StackOverflow 效率是比 Baidu 高，而每个设备自己科学上网比较繁琐，需要各自管理白名单，太麻烦…</li>
<li>NAS 访问慢。和爱人出去玩偶尔会拍一些照片和 Vlog，这些都是美好珍贵的记忆，目前存在自己的私有云上，想看了拿出来看看，照片列表加载缓慢，视频进度拖拉卡顿…</li>
<li>WIFI 信号。之前路由器是放在客厅，信号到卧室床头比较曲折，有时关门后甚至断网，网络体验极差…</li>
</ul>
<p>折腾后：</p>
<ul>
<li>全屋设备科学上网。在软路由里根据 IP 地址分流，国外 IP 走代理，国内直连。终端无需单独开软件，无需在意是否国内外网站。</li>
<li>广告过滤。同上。</li>
<li>内网全千兆访问。访问 NAS 资源、各设备之间文件互传速度大幅提升，堪比本地访问。</li>
<li>Docker。开发时如果需要容器资源，内外网都可使用路由器的 Docker，节约开发机资源，目前资源是 4C8G。</li>
<li>数据安全。之前 NAS 是直接暴露在公网的，且没有开启 HTTP，现在公网访问内网设备需要 VPN，访问 NAS 强制 HTTPS。</li>
<li>扩大 WIFI 信号覆盖。未来搬去新家后智能设备增多，WIFI6 是必不可少的。出于成本考虑，WIFI6 AP 放在客厅，现有垃圾 AP 放在卧室。</li>
</ul>
<p>硬件改造成本共 1135 元</p>
<ul>
<li>软路由： J4105，8G DDR4 + 64G SATA固态 咸鱼 750 元</li>
<li>交换机： 水星SG108C 塑料8口 JD 69元</li>
<li>AP： 华为AX3Pro 咸鱼 295 元</li>
<li>网线： 绿联6类线 0.5m x3 JD 21元</li>
</ul>
<blockquote>
<p>哭，现在设备各种涨价， ax3pro 暴涨 150 元，蹲了二周才蹲到低于 300 元的 AP，J4105 也涨了 100 多，不知道是不是受了这一波矿潮影响…</p>
</blockquote>
<p>总之，想把网络环境做好，最大的变化就是没有变化，让用户感觉不到就成功了，只需要默默地提供稳定的服务就好~</p>
<span id="more"></span>

<h1 id="软路由"><a href="#软路由" class="headerlink" title="软路由">软路由</a></h1><p>首先科普一下软路由，和普通的路由器有什么区别呢？</p>
<p>一般家庭宽带入户都是光纤，这个光信号是不能直接用来接入一般路由器或电脑的（特殊网卡除外），所以需要一台机器将光信号转化为电信号，这个机器就是 <strong>调制解调器</strong> 啦，俗称光猫。</p>
<p>光猫接入光信号，输出弱电信号（通常是 RJ45 端口）。</p>
<p>IPTV 的网口的设置一般也会在光猫中内置的路由中设置。装网的师傅也会在光猫里帮你设置好拨号，那么你的设备只需要将网线插入光猫的 LAN 口即可上网。</p>
<p>如果你不是用的光猫作为 WIFI 发射器，那么你还会买入一个 WIFI 路由器（我们简称硬路由），将它的 WAN 或 LAN 口和光猫的 LAN 口相连，设置一下 WIFI 密码，你的手机也可以无线上网了。</p>
<p>到这里为止，宽带师傅就收钱（设备调试费）跑了。那么我们得到一张下面的图</p>
<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/router.png" alt="Router"></p>
<p>他们承担了以下 4 项工作</p>
<ul>
<li>调制解调器：Modem，负责光电信号转换</li>
<li>路由器： Router，负责对数据进行分发</li>
<li>交换机： Switch，负责设备之间的数据交换</li>
<li>AP： Access Point，把有线网络转化为无线网络</li>
</ul>
<p>有同学就会问了，那光猫不是把这四件事都做了，还需要路由器做什么？是因为光猫为了成本考虑，只有一个千兆 LAN 端口，其他 LAN 口都是百兆，并且自带的 AP 接入点只是用来做设备调试的，实际使用卡到爆。所以你才需要一个额外的路由器。</p>
<p>那我为什么还需要软路由呢？因为路由器提供的功能不满足个人需求使用，比如科学上网等，软路由相当于购入一台微型电脑，路由只是它其中一项功能。性能好的硬路由成本太高（Ax86u说你呢），所以我们采用分体设计的方案。</p>
<p>交换机实现内网数据交换，不消耗路由器资源。当然如果你有线设备不多，也可以省去交换机，直接使用千兆无线路由器即可。</p>
<h1 id="Openwrt"><a href="#Openwrt" class="headerlink" title="Openwrt">Openwrt</a></h1><p>我使用的软路由机器是 J4105 (以下简称这台机器为软路由)，机器购入后，由于是咸鱼二手，测试了一下硬件什么的，没问题后开始刷机，系统是 <a href="https://openwrt.club/dl">openwrt.club</a> 的精品小包。本来想刷高大全版的，连上后一直找不到 wan 口，遂放弃。</p>
<p>刷机参考 <a href="https://www.bilibili.com/video/BV1w541157Uo">B站 BraveRu</a> 的视频，非常详细。刷机成功后进入管理页面，看到 4C8G 和 2个千兆端口，啊，舒服</p>
<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/openwrt.png" alt="OpenWrt"></p>
<h2 id="WAN-口"><a href="#WAN-口" class="headerlink" title="WAN 口">WAN 口</a></h2><p>如果你装了宽带，并且是光纤入户的话（或者电话线入户），需要有一台机器将光信号转化为电信号，这个就是光猫啦，学名调制解调器。</p>
<p>首先登入光猫管理页面，将千兆网口连接方式改为桥接（如果有 IPTV 的话可以保留其他端口），之后这个千兆网口接入软路由。</p>
<p>然后登录 OpenWrt 管理页面，找到 网络-接口-WAN，协议修改为 PPPOE，填入宽带帐号密码。如果不知道的话就打电话问装宽带的人。</p>
<blockquote>
<p>宽带用户名密码我是直接从光猫管理页面的 HTML 里扒出来的，可怕。。</p>
</blockquote>
<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/wan-dial-up.png" alt="Dial-up"></p>
<h2 id="LAN"><a href="#LAN" class="headerlink" title="LAN">LAN</a></h2><p>LAN 口没什么可设置的，就用了 OpenWrt 默认的 <code>192.168.5.1/24</code> 网段，开启 DHCP，修改了下 DHCP 租期为 7 天。</p>
<p>默认设备分配 100-250 地址（100 以下想保留给固定设备，比如 NAS、AP 管理页面等）</p>
<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/dhcp-static-address.png" alt="DHCP static address"></p>
<h2 id="AP"><a href="#AP" class="headerlink" title="AP">AP</a></h2><p>然后登录原来的路由器管理页面（以下简称这台机器为AP），找到 LAN 口设置，关闭 DHCP，我们只用软路由分配 IP 地址。</p>
<p>关闭 DHCP 后，我们需要手动指定一下这台路由器的 IP 地址，按照上图设置为保留的 <code>192.168.5.3</code>, 掩码 <code>255.255.255.0</code>，这台路由器我们就制作为 AP 使用啦。</p>
<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/ap-settings.png" alt="AP Settings"></p>
<p>未来如果想要修改 WIFI 密码什么的，可以登录 <code>192.168.5.3</code> 或静态地址分配里设置的主机名 <code>tplink.lan</code> 访问这个 AP</p>
<h1 id="酸酸乳"><a href="#酸酸乳" class="headerlink" title="酸酸乳">酸酸乳</a></h1><p>这里就不过多介绍了。。小命要紧，小命要紧，就一张图。前段时间华为云活动，领了个香港机器做备用节点，是蛮快的，平时还是走自己的韩国节点。</p>
<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/ssr.png" alt="酸酸乳"></p>
<p>运行模式设置为绕过大陆 IP 模式，这样就可以实现全屋设备上网啦~</p>
<p>其他的广告过滤和解锁网易云都可以用，还可以代理 Netflix，不过我的节点不支持，我也不太需要就算咯。</p>
<h1 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS">DDNS</a></h1><p>那么如果身处外网，想要访问家里的设备怎么办呢？如果你的宽带有公网 IP，那么你就可以通过家里的公网 IP 地址，然后直接访问路由器中的服务。</p>
<p>但是这个 IP 地址是动态的，每隔一段时间就会变，所以我们需要一个动态 DNS 服务来将一个固定的域名解析到我们 IP 随时会发生变化的路由器上，这个服务就叫做 DDNS。</p>
<p>成都联通有一点比较好的是入户默认开了公网 IP，让外网访问变得简单了许多，不过缺点就是封锁了 80 端口，不过没关系，我的核心业务还是在云上的，毕竟可靠一点，家里的机器就做些边缘的事情就好。</p>
<p>如果你是移动用户的话，基本不可能申请到公网 IP，因为移动本身就没有多少可用的 IP 地址，这时候就需要使用内网穿透技术了，这里不做过多介绍，可以自行搜索。</p>
<p>有了公网 IP，接下来就需要设置一个动态 DNS 解析的机制了，毕竟公网 IP 三天一小变，五天一大变。我的域名是放在 Aliyun 解析的，创建子账户后分配好 DNS 权限，交给 OpenWrt 去做就好，比较省心。</p>
<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/ddns.png" alt="DDNS"></p>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全">安全</a></h1><p>由于内网有 NAS 和摄像头，数据可不能随便被弄出去了，数据安全是非常重要的，检查下 网络-防火墙 设置。端口转发和规则都在这里设置，只保留需要的端口即可。</p>
<p>由于本人技术垃圾，不想直接将端口暴露在公网，太危险了，鬼知道什么妖魔鬼怪进来安装个勒索程序或者挖矿脚本什么的。所以如果想在外面访问家里内网的话，连接 VPN 即可回家。</p>
<p>Update: 2024-01-21 随着时代进步，第一代 VPN-IPSec 技术已经无法在现代的手机上使用，但是第二代我不知道为什么一直设置不成功，所以这里不再推荐使用 VPN-IPSec 技术，而是使用 OpenVPN 服务器。</p>
<details>
<summary>点击展开 IPSec VPN 第一代教程 (不推荐)</summary> 
找到 "VPN-IPSec VPN 服务器" 点击启用，设置好地址、用户名密码即可，然后 Android 或 iOS 使用系统自带的 VPN 功能即可回家。

<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/ipsec.png" alt="IPSec"></p>
<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/android-vpn.jpg" alt="Android VPN"></p>
</details>

<p><img src="https://static.mutoe.com/2024/home-network-infra-notes/setup-openvpn.png"></p>
<p>其中 DDNS 域名是上面提到的 DDNS 服务中你设置的域名。</p>
<p>按照此步骤设置 OpenVPN 服务器，然后下载 OpenVPN 客户端，导入配置文件即可，这里就不做过多介绍了。 </p>
<h1 id="NAS"><a href="#NAS" class="headerlink" title="NAS">NAS</a></h1><p>前面我们在路由表里为 NAS 设置了静态路由，现在需要进入到 NAS 里将 IP 地址固定下来</p>
<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/qnap-lan-settings.png" alt="QNAP LAN settings"></p>
<p>然后把 Container Station 和各种服务关了，之后就专注存储吧。</p>
<p>经朋友提醒，想实现内网全千兆的话还需要 NAS 硬盘支持千兆读写，看了一下我这款红盘速度还可以，平均 150MB&#x2F;s 读写，勉强打到千兆水平。</p>
<p>现有方案是单硬盘 + 每天归档存储至 Aliyun 对象存储，后续可以组 RAID0 稍微提一提速。。。可能不是很有必要，其他设施得要 2.5Gbps 支持了</p>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker">Docker</a></h1><p>话说这个机器性能完全过剩了啊，根据国外大佬的测评，千兆网速 Vmess 跑满也才 50% 负载，二话不说，上 Docker。</p>
<p>由于 OpenWrt 内置的 Docker 没有开启远程访问，我们需要修改 Docker daemon 的启动参数以支持远程访问。</p>
<p>先远程联入系统，然后找到 <code>/etc/config/dockerd</code> 文件, 修改启动参数 hosts</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@openwrt.lan</span><br><span class="line">vim /etc/config/dockerd</span><br></pre></td></tr></table></figure>

<p>找到 <code>config globals &#39;globals&#39;</code> 加入下面一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list hosts &#x27;tcp://0.0.0.0:2375&#x27;</span><br></pre></td></tr></table></figure>

<p>然后重启 Docker daemon 即可远程接入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/dockerd restart</span><br></pre></td></tr></table></figure>

<p><img src="https://static.mutoe.com/2021/home-network-infra-notes/idea-docker.png" alt="IDEA Docker"></p>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh">zsh</a></h2><p>能终端接入的话不说了 Zsh、Zinit 安排起来。</p>
<p>在 OpenWrt 上折腾可以参考这篇帖子，<a href="https://itcao.com/2020/06031516.html">在openwrt中最小化安装oh-my-zsh</a>。</p>
<blockquote>
<p>我遇到了一个奇怪的问题，使用非默认 sh 的时候（OpenWrt 默认为 ash），按退格会变成空格，网上找了一番，在 <code>.zshrc</code> 中设置如下配置即可，可能是我用 Tmux 时设置了 TERM 的原因</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export TERM=vt100</span><br></pre></td></tr></table></figure>
</blockquote>
<p>好啦，这就是本篇博客的所有内容啦，欢迎大家分享自己的家庭网络架构，一起学习一起折腾~</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>家庭网络</tag>
        <tag>Openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用好 git</title>
    <url>//2017/how-to-use-git-better/</url>
    <content><![CDATA[<p>自己在使用 git 的过程中遇到了不少问题, 最终我都会花时间把它们解决. 这里记录下我遇到这些场景时的解决办法, 并总结一下各种方法的优缺点, 让大家少走点弯路.</p>
<h1 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例">使用案例</a></h1><h2 id="正在做一个功能-这时临时需要做别的修改"><a href="#正在做一个功能-这时临时需要做别的修改" class="headerlink" title="正在做一个功能, 这时临时需要做别的修改">正在做一个功能, 这时临时需要做别的修改</a></h2><p>你可能会遇到这种情况: 当你正在做一个功能(feature-A)时, 这个功能并没有开发完, 但这时有同学喊你紧急修复一个线上 bug 或者要你 pull 一下代码. 这种情况下你会怎么做呢 ?</p>
<ul>
<li><p>A.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .               // 将当前改动提交至暂存区</span><br><span class="line">git commit -am <span class="string">&quot;save&quot;</span>   // <span class="string">&quot;保存&quot;</span>一下这些改动</span><br><span class="line">git checkout master     // 切换到 master 分支</span><br><span class="line">// some change commit</span><br><span class="line">git push origin master  // 修复完成后提交</span><br><span class="line">git checkout feature-A  // 切换回功能分支继续开发</span><br></pre></td></tr></table></figure></li>
<li><p>B.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -am <span class="string">&quot;temp&quot;</span>   // 临时<span class="string">&quot;保存&quot;</span>一下这些改动, 因为我最后会撤销它</span><br><span class="line">git checkout master</span><br><span class="line">// some change commit</span><br><span class="line">git push origin master</span><br><span class="line">git checkout feature-A  // 切换回开发分支</span><br><span class="line">git reset --mixed HEAD^ // 撤销上一次提交并恢复工作区</span><br></pre></td></tr></table></figure>
</li>
<li><p>C.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash               // 存储工作区和暂存区</span><br><span class="line">git checkout master</span><br><span class="line">// some change commit</span><br><span class="line">git push origin master</span><br><span class="line">git checkout feature-A  // 切换回开发分支</span><br><span class="line">git stash pop           // 还原工作区和暂存区</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="正确姿势"><a href="#正确姿势" class="headerlink" title="正确姿势">正确姿势</a></h3><p>C. 使用 <code>git stash</code> 功能</p>
<span id="more"></span>

<p><code>git stash</code> 用来将当前工作区和暂存区的内容存储起来并清空它们. 以便于你进行其他操作 ( 如 pull &#x2F; checkout 等)</p>
<p><a href="https://gist.github.com/subchen/3409a16cb46327ca7691">Git Stash 用法 - subchen</a></p>
<blockquote>
<h3 id="git-stash-用于保存和恢复工作进度"><a href="#git-stash-用于保存和恢复工作进度" class="headerlink" title="git stash 用于保存和恢复工作进度">git stash 用于保存和恢复工作进度</a></h3></blockquote>
<blockquote>
<ul>
<li><code>git stash</code>
  保存当前的工作进度。会分别对暂存区和工作区的状态进行保存</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><code>git stash save &quot;message...&quot;</code>
  这条命令实际上是第一条 <code>git stash</code> 命令的完整版</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><code>git stash list</code>
  显示进度列表。此命令显然暗示了 <code>git stash</code> 可以多次保存工作进度，并用在恢复时候进行选择</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><code>git stash pop [--index] [&lt;stash&gt;]</code>
  如果不使用任何参数，会恢复最新保存的工作进度，并将恢复的工作进度从存储的工作进度列表中清除。
  如果提供 <code>&lt;stash&gt;</code> 参数（来自 <code>git stash list</code> 显示的列表），则从该 <code>&lt;stash&gt;</code> 中恢复。恢复完毕也将从进度列表中删除 <code>&lt;stash&gt;</code>。
  选项 <code>--index</code> 除了恢复工作区的文件外，还尝试恢复暂存区。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><code>git stash apply [--index] [&lt;stash&gt;]</code>
  除了不删除恢复的进度之外，其余和 <code>git stash pop</code> 命令一样</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><code>git stash clear</code>
  删除所有存储的进度</li>
</ul>
</blockquote>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续">未完待续</a></h1><h2 id="push-代码的时候被拒绝-pull-的时候有冲突"><a href="#push-代码的时候被拒绝-pull-的时候有冲突" class="headerlink" title="push 代码的时候被拒绝, pull 的时候有冲突">push 代码的时候被拒绝, pull 的时候有冲突</a></h2><h2 id="查看-commit-log-的时候很乱-做-code-review-的时候没有头绪"><a href="#查看-commit-log-的时候很乱-做-code-review-的时候没有头绪" class="headerlink" title="查看 commit log 的时候很乱, 做 code review 的时候没有头绪">查看 commit log 的时候很乱, 做 code review 的时候没有头绪</a></h2>]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>在 macOS 上安装 Docker Compose v2</title>
    <url>//2024/install-docker-compose-v2-in-macos/</url>
    <content><![CDATA[<p>在 macOS 上很久了都没有用上 <code>docker compose</code> 这个子命令，今天终于把它解决了特此记录一下以备后续之需。</p>
<h2 id="1-找到适合你系统架构的镜像"><a href="#1-找到适合你系统架构的镜像" class="headerlink" title="1. 找到适合你系统架构的镜像">1. 找到适合你系统架构的镜像</a></h2><p>前往 Docker compose 官方仓库的 Release 页面，找到适合你系统架构的镜像下载地址，复制下载链接。</p>
<p><a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p>
<p>macOS 系统架构为 <code>darwin</code>, 如果你是 M 系列芯片的 Mac，那么你需要下载 <code>darwin-aarch64</code> 版本的镜像。否则下载 <code>darwin-x86_64</code> 版本的镜像。</p>
<h2 id="2-下载并安装"><a href="#2-下载并安装" class="headerlink" title="2. 下载并安装">2. 下载并安装</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DOCKER_CONFIG=$&#123;DOCKER_CONFIG:-$HOME/.docker&#125;</span><br><span class="line">mkdir -p $DOCKER_CONFIG/cli-plugins</span><br><span class="line">curl -SL [粘贴你复制的链接] -o $DOCKER_CONFIG/cli-plugins/docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="3-添加执行权限"><a href="#3-添加执行权限" class="headerlink" title="3. 添加执行权限">3. 添加执行权限</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="4-验证安装"><a href="#4-验证安装" class="headerlink" title="4. 验证安装">4. 验证安装</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker compose version</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h2><ul>
<li><a href="https://docs.docker.com/compose/install/linux/#install-the-plugin-manually">Install the plugin manually - Docker</a></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Lima</tag>
        <tag>Docker Compose</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Shell 脚本中进行交互的一些心得</title>
    <url>//2019/interactive-command-in-shell/</url>
    <content><![CDATA[<p>我们在写 shell 脚本时经常会遇到一些需要交互的操作，比如修改某个文件，或是使用 <code>yum install</code> <code>ssh-keygen</code> <code>certbot --nginx</code> 等操作时，需要输入一些指令如 “y”, “Enter” 和其他的一些信息。</p>
<p>我们写脚本就是为了自动操作，怎么可以等命令执行一会之后在按个回车进行下一步呢？既然我知道接下来要输入什么命令，我告诉你你帮我输入了不就得了？</p>
<p><ruby>聪明<rt>tōu lǎn<rt></ruby>的我们想到了一些办法来避免这种无谓的等待，记录下来分享给大家</p>
<span id="more"></span>

<h1 id="1-自动化输入"><a href="#1-自动化输入" class="headerlink" title="1. 自动化输入">1. 自动化输入</a></h1><h2 id="1-1-输入单个指令"><a href="#1-1-输入单个指令" class="headerlink" title="1.1 输入单个指令">1.1 输入单个指令</a></h2><p>这里用 <code>yum install</code> 来进行演示 （假设不使用 <code>-y</code> 参数）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;y&quot;</span> | yum install wget</span><br></pre></td></tr></table></figure>

<p>如果要求输入回车，可以使用 echo 指令的参数 <code>-e</code> + <code>\n</code> 进行操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\n&quot;</span> | yum remove wget</span><br></pre></td></tr></table></figure>

<details>
<summary>**`echo -e` 的小知识**</summary>

<p>若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：<br><code>\a</code> 发出警告声；<br><code>\b</code> 删除前一个字符；<br><code>\c</code> 最后不加上换行符号；<br><code>\f</code> 换行但光标仍旧停留在原来的位置；<br><code>\v</code> 与\f 相同；<br><code>\n</code> 换行且光标移至行首；<br><code>\r</code> 光标移至行首，但不换行；<br><code>\t</code> 插入 <code>tab</code> 符号；<br><code>\\</code> 插入 ‘&#39; 字符；<br><code>\nnn</code> 插入 nnn（八进制）所代表的 ASCII 字符；</p>
</details>

<h2 id="1-2-输入多行指令"><a href="#1-2-输入多行指令" class="headerlink" title="1.2 输入多行指令">1.2 输入多行指令</a></h2><p>输入多行指令我们需要借助输入重定向操作符 <code>&lt;&lt;</code></p>
<p>以下面这个脚本为例</p>
<figure class="highlight bash"><figcaption><span>multi.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;enter number:&quot;</span> no</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;enter name:&quot;</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;you have entered <span class="variable">$no</span>, <span class="variable">$name</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>借助 <code>&lt;&lt;</code> 符号进行自动化输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sh multi.sh &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">mutoe</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>但是有时候这种方法并不生效，比如 <code>ssh-keygen</code> 命令，那只有借助强大的 <code>expect</code> 命令了</p>
<h2 id="1-3-借助-expect-进行交互"><a href="#1-3-借助-expect-进行交互" class="headerlink" title="1.3 借助 expect 进行交互">1.3 借助 <code>expect</code> 进行交互</a></h2><p>在使用 <code>expect</code> 前需要进行安装，方法很简单，以 CentOS 为例，只需要运行 <code>yum install -y expect</code> 即可</p>
<p>expect 有两种用法，一种是直接写 expect 解释器的脚本，和 bash 类似，以 <code>#!/usr/bin/expect</code> 开头</p>
<p>下面是一个合格的 expect 脚本示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/expect</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> IP     [lindex <span class="variable">$argv</span> 0] <span class="comment"># 读取第1个参数设置为 IP 变量</span></span><br><span class="line"><span class="built_in">set</span> PASSWD [lindex <span class="variable">$argv</span> 1] <span class="comment"># 读取第2个参数设置为 PASSWD 变量</span></span><br><span class="line"><span class="built_in">set</span> CMD    [lindex <span class="variable">$argv</span> 2] <span class="comment"># 读取第3个参数设置为 CMD 变量</span></span><br><span class="line"></span><br><span class="line">spawn ssh <span class="variable">$IP</span> <span class="variable">$CMD</span> <span class="comment"># spawn 来给命令加壳，以便于断言输出</span></span><br><span class="line">expect &#123; <span class="comment"># expect 是断言命令</span></span><br><span class="line">  <span class="comment"># 如果读取到屏幕上输出 (yes/no) 信息，则输入 &quot;yes&quot; 并按下回车键</span></span><br><span class="line">  <span class="comment"># exp_continue 是继续等待花括号内的断言, 如果不加这一句会直接跳出 expect</span></span><br><span class="line">  <span class="string">&quot;(yes/no)?&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>; exp_continue &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$PASSWD</span>\r&quot;</span> &#125; <span class="comment"># 如果读取到屏幕上输出 password 信息，则输入 PASSWD 变量中的内容</span></span><br><span class="line">  <span class="string">&quot;*host &quot;</span> &#123; <span class="built_in">exit</span> 1 &#125; <span class="comment"># 如果读取到 &quot;No route to host&quot; 等内容， 就以非0状态退出</span></span><br><span class="line">&#125;</span><br><span class="line">expect eof <span class="comment"># 等待命令执行结束</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，在 expect 解释器内， 除了几个特定关键字的命令，其他命令都不可用，这种方式适用于执行命令较少，单次需要交互较多的自动化脚本</p>
<p>第二种用法是在 bash 脚本中执行 expect 配合重定向操作符, 在有大量脚本需要执行的情况下推荐使用该方式</p>
<p>下面是我在 <code>certbot</code> 命令时使用的 shell 脚本，以供参考</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">sudo expect &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">spawn certbot --nginx</span></span><br><span class="line"><span class="string">expect &#123;</span></span><br><span class="line"><span class="string">  &quot;Enter email address&quot; &#123; send &quot;mutoe@foxmail.com\n&quot;;exp_continue&#125;</span></span><br><span class="line"><span class="string">  &quot;Please read the Terms of Service&quot; &#123;send &quot;A\n&quot;;exp_continue&#125;</span></span><br><span class="line"><span class="string">  &quot;Would you be willing to share your email address&quot; &#123;send &quot;N\n&quot;;exp_continue&#125;</span></span><br><span class="line"><span class="string">  &quot;Which names would you like to activate HTTPS for&quot; &#123;send &quot;\n&quot;;exp_continue&#125;</span></span><br><span class="line"><span class="string">  &quot;You have an existing certificate that has exactly the same domains&quot; &#123;send &quot;1\n&quot;;exp_continue&#125;</span></span><br><span class="line"><span class="string">  &quot;Please choose whether or not to redirect HTTP traffic to HTTPS&quot; &#123;send &quot;2\n&quot;;exp_continue&#125;</span></span><br><span class="line"><span class="string">  eof</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2. 修改文件">2. 修改文件</a></h1><h2 id="2-1-在文件中增加内容"><a href="#2-1-在文件中增加内容" class="headerlink" title="2.1 在文件中增加内容">2.1 在文件中增加内容</a></h2><p>我们想要将某个命令的输出写入到文件中进行保存，比如日志、新增一行配置，可以借助输出重定向符号 <code>&gt;</code> <code>&gt;&gt;</code> 来实现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">who</span> &gt; log.txt <span class="comment"># &gt; 符号将会先清空 log.txt 然后以 who 的输出写入到文件中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;append&quot;</span> &gt;&gt; log.txt <span class="comment"># &gt;&gt; 符号会追加字符串 &quot;append&quot; 到文件的尾行</span></span><br></pre></td></tr></table></figure>

<p>那如果需要写入多行该怎么办呢？虽然也可以借助 <code>echo -e</code> + <code>\n</code> 来实现，但是我们还有其他更优雅的办法</p>
<p>借助 <code>cat</code> 命令配合 <code>&lt;&lt;</code> 符号也可以达到我们的目的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; log.txt &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">我有很多行</span></span><br><span class="line"><span class="string">很多行</span></span><br><span class="line"><span class="string">行</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>WHY?</strong><br><code>cat</code> 命令如果不接受任何参数，将会进入交互式界面，输入什么就会输出什么；<br>配合 <code>&gt;</code> 符号将 <code>cat</code> 的输出写入到文件 <code>log.txt</code> 中；<br>而 <code>&lt;&lt;</code> 我们前面介绍过，会将多行输入重定向到前面的命令 <code>cat</code> 中</p>
</blockquote>
<h2 id="2-2-修改文件的内容"><a href="#2-2-修改文件的内容" class="headerlink" title="2.2 修改文件的内容">2.2 修改文件的内容</a></h2><p>关于修改文件的内容，如何在不借助 vim 等工具情况下进行呢？</p>
<p>有请我们强大的 <code>sed</code> 命令登场！！</p>
<p><code>sed [选项] 指令 文件</code></p>
<p>其中选项有</p>
<ul>
<li><code>-n</code> 忽略没有修改的内容</li>
<li><code>-i</code> 原地修改文件而不输出</li>
<li><code>-r</code> 拓展正则表达式</li>
</ul>
<p>指令为一个字符串，由 2 个部分组成 <code>条件</code> <code>命令</code>，条件用于约束，指令进行操作</p>
<p>一个正常的替换命令长这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;/^user/ s/nginx/mutoe/&quot;</span> /paht/to/nginx.conf</span><br></pre></td></tr></table></figure>

<p>其中<br><code>/^user/</code> 为条件，查找以 “user” 开头的一行;<br><code>s/nginx/mutoe/</code> 为命令，<code>s</code>是替换，这条命令意思是将 <code>nginx</code> 替换为 <code>mutoe</code></p>
<p>sed 支持的命令有很多，约有 15 中，列举一些常见的命令</p>
<ul>
<li><code>i</code> 插入</li>
<li><code>a</code> 追加</li>
<li><code>d</code> 删除行</li>
<li><code>c</code> 替换行</li>
<li><code>s</code> 替换指定内容</li>
</ul>
<blockquote>
<p>关于 <code>sed</code> 的更多用法，可以参考我的 <a href="/2017/linux-study-notes/#sed-%E9%9D%9E%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BC%96%E8%BE%91">《Linux 学习笔记》 “sed 非交互式编辑”</a> 部分</p>
</blockquote>
<p>以下面的 nginx 配置片段为例</p>
<figure class="highlight nginx"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">  <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete me</span></span><br></pre></td></tr></table></figure>

<p>首先我们将 nginx 的启动用户改为自定义用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;1c user mutoe;&quot;</span> /path/to/nginx.conf</span><br></pre></td></tr></table></figure>

<p><code>-i</code> 意思是将输出 “in-placed” 直接替换文件内容而不是作为输出<br>“1c user mutoe;” 是指将第 1 行替换(c)为”user mutoe;”</p>
<p>接下来我们去除 <code>#gzip on;</code> 前的空格，难度在于我们并不知道改行配置位于哪一行，没关系，我们借助正则表达式先找到这一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;/#gzip\s+on;/s/#//&quot;</span> /path/to/nginx.conf</span><br></pre></td></tr></table></figure>

<p>最后我们删除文件的最后一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&quot;<span class="variable">$d</span>&quot;</span> /path/to/nginx.conf</span><br></pre></td></tr></table></figure>

<p>好了，所有内容到这里就结束啦，如果看的不过瘾，<a href="https://gist.github.com/mutoe/c7f86167d648d697e9c28a68db74ae0e">这里</a>有我在实际使用中的一些脚本，以供参考。</p>
<p>如果你有任何疑问或是支持，欢迎在下方留言。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://man.linuxde.net/echo">echo 命令 - Linux 命令大全</a></li>
<li><a href="https://www.runoob.com/linux/linux-shell-io-redirections.html">Shell 输入&#x2F;输出重定向 - Runoob</a></li>
<li><a href="https://blog.csdn.net/lufubo/article/details/7627393">shell 中交互输入自动化 - lufubo</a></li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转 javascript 正则表达式</title>
    <url>//2019/javascript-regexp/</url>
    <content><![CDATA[<h1 id="正则表达式是什么"><a href="#正则表达式是什么" class="headerlink" title="正则表达式是什么">正则表达式是什么</a></h1><p>正则表达式可以从一段文本中提取特定内容的功能, 几乎所有编程语言都支持. 使用在爬虫、检查用户输入合法性、XSS 过滤等.</p>
<p>在整个学习过程中, 给大家推荐一个可视化正则表达式的网站 <a href="https://jex.im/regulex/">https://jex.im/regulex/</a></p>
<p>他可以根据你输入的正则表达式动态的生成匹配图, 帮助你理解一个复杂的正则表达式. 像下面这样</p>
<iframe frameborder="0" style="width: 100%;" height="236" src="https://jex.im/regulex/#!embed=true&flags=&re=%5Ehttps%3F%3A%5C%2F%5C%2F(%3F%3A%5B%5Cw-%5D%2B%5C.)%2B%5B%5Cw-%5D%2B(%3F%3A%2F%5B%5Cw-.%2F%3F%23%25%26%3D%5D*)%3F%24"></iframe>

<p>**更新(2023-07-07)**：现在推荐这个网站，它支持最新的具名分组和后行断言语法 <a href="https://wangwl.net/static/projects/visualRegex">https://wangwl.net/static/projects/visualRegex</a></p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法">语法</a></h1><p>javascript 中支持 3 种正则表达式语法: 字面量、构造函数和工厂符号, 他们的签名如下</p>
<pre><code>    /pattern/flags
    new RegExp(pattern, [, flags])
    RegExp(pattern, [, flags])
</code></pre>
<span id="more"></span>

<h2 id="pattern"><a href="#pattern" class="headerlink" title="pattern">pattern</a></h2><p>正则表达式的匹配文本, 支持的内容有普通字符(如 <code>abcd</code> <code>0123</code> 等)与特殊字符(如 <code>\w&#123;1,4&#125;</code> <code>(\n+)</code> <code>.*</code> 等)</p>
<h2 id="flags"><a href="#flags" class="headerlink" title="flags">flags</a></h2><p>修饰标志. 有以下的任意组合</p>
<ul>
<li><code>g</code>: 全局匹配. 找到所有匹配, 而不是在第一个匹配后停止.</li>
<li><code>i</code>: 忽略大小写.</li>
<li><code>m</code>: 多行匹配. 作用与开始字符(<code>^</code>)和结束字符(<code>$</code>), 视为在每一行中匹配而非在整串文本中匹配.</li>
<li><code>u</code>: <em>(*ES2015)</em> 用于正确处理大雨 <code>\uFFFF</code> 的 Unicode 模式.</li>
<li><code>y</code>: <em>(*ES2015)</em> 粘性匹配. 与 <code>g</code> 相似, 仅匹配此正则表达式的 <code>lastIndex</code> 属性指示的索引之后的子串.</li>
<li><code>s</code>: <em>(*ES2018)</em> dotAll 模式. 将 <code>.</code> 符号修改为匹配任意字符</li>
</ul>
<hr>
<p>例如, 下面的三行语句将创建相同的正则表达式, 他们将匹配 <code>abcd</code> <code>ABBBc</code> <code>0AbC</code> 等.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/ab+c/i</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;ab+c&#x27;</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/ab+c/</span>, <span class="string">&#x27;i&#x27;</span>) <span class="comment">// ES6 之前不支持第二个参数, 传入第二个参数会覆盖字面量中的修饰符</span></span><br></pre></td></tr></table></figure>

<p>正则表达式的构造函数提供了正则表达式运行时编译. 所以如果你事先不知道将要使用什么模式进行匹配, 你可以使用构造函数传入变量的方法进行匹配, 如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="string">&#x27;ab+c&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RegExp</span>(pattern) <span class="comment">// =&gt; /ab+c/</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是, 当使用字符串构造正则表达式时, 需要将字符串中的<a href="#%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6">特殊字符</a>进行转义(在前面加反斜杠 <code>\</code>), 如下面两行是等价的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\w+&#x27;</span>)</span><br><span class="line">/\w+/</span><br></pre></td></tr></table></figure>

<h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符">特殊字符</a></h1><blockquote>
<p>这里只作为速查食用, 如需详细解释请前往 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_in_regular_expressions">MDN RegExp 文档</a></p>
</blockquote>
<h2 id="字符类别-Character-Classes"><a href="#字符类别-Character-Classes" class="headerlink" title="字符类别 Character Classes">字符类别 Character Classes</a></h2><ul>
<li><code>.</code> 匹配任意单个字符，但是行结束符除外. 在集合 <code>[]</code> 中, <code>.</code> 将被解释作字面量含义</li>
<li><code>\d</code> 匹配任意阿拉伯数字. 等价于 <code>[0-9]</code>. </li>
<li><code>\D</code> 匹配任意一个不是阿拉伯数字的字符. 等价于 <code>[^0-9]</code>. </li>
<li><code>\w</code> 匹配字母表中的字母、数字和下划线. 等价于 <code>[A-Za-z0-9_]</code></li>
<li><code>\W</code> 匹配非字母表中的字母、数字和下划线. 等价于 <code>[^A-Za-z0-9_]</code></li>
<li><code>\s</code> 匹配一个空白字符. 等价于 <code>[ \f\n\r\t\v]</code> 和一些 Unicode 空格</li>
<li><code>\S</code> 匹配一个非空白字符. 等价于 <code>[^ \f\n\r\t\v]</code> 和一些 Unicode 空格</li>
<li><code>\t</code> 匹配一个水平制表符（tab）</li>
<li><code>\r</code> 匹配一个回车符（carriage return）</li>
<li><code>\n</code> 匹配一个换行符（linefeed）</li>
<li><code>\v</code> 匹配一个垂直制表符（vertical tab）</li>
<li><code>\f</code> 匹配一个换页符（form-feed）</li>
<li><code>[\b]</code> 匹配一个退格符（backspace）（不要与 <code>\b</code> 混淆）</li>
<li><code>\0</code> 匹配一个 NUL 字符. 不要在此后面跟小数点. </li>
<li><code>\cX</code> X 是 A-Z 的一个字母. 匹配字符串中的一个控制字符. </li>
<li><code>\xhh</code> 匹配编码为 hh （两个十六进制数字）的字符. </li>
<li><code>\uhhhh</code> 匹配 Unicode 值为 hhhh （四个十六进制数字）的字符. </li>
<li><code>\p&#123;Name&#125;</code> <em>(*ES2018)</em> 匹配符合 Unicode 某属性的所有字符. <a href="http://es6.ruanyifeng.com/#docs/regex#Unicode-%E5%B1%9E%E6%80%A7%E7%B1%BB">参见这里</a></li>
<li><code>\</code> 转义符. 将特殊字符转化为字面量含义.</li>
</ul>
<h2 id="字符集合-Character-Set"><a href="#字符集合-Character-Set" class="headerlink" title="字符集合 Character Set">字符集合 Character Set</a></h2><ul>
<li><code>[xyz]</code> 一个字符集合，也叫字符组. 匹配集合中的任意一个字符. 你可以使用连字符 <code>-</code> 指定一个范围. </li>
<li><code>[^xyz]</code> 一个反义或补充字符集，也叫反义字符组. 也就是说，它匹配任意不在括号内的字符. 你也可以通过使用连字符 ‘-‘ 指定一个范围内的字符.</li>
</ul>
<h2 id="边界-Boundaries"><a href="#边界-Boundaries" class="headerlink" title="边界 Boundaries">边界 Boundaries</a></h2><ul>
<li><code>^</code> 匹配输入开始. 如果多行修饰符 <code>m</code> 被开启，该字符也会匹配一个断行符后的开始处. </li>
<li><code>$</code> 匹配输入结尾. 如果多行修饰符 <code>m</code> 被开启，该字符也会匹配一个断行符的前的结尾处. </li>
<li><code>\b</code> 匹配一个零宽单词边界，如一个字母与一个空格之间. （不要和 [\b] 混淆）</li>
<li><code>\B</code> 匹配一个零宽非单词边界，如两个字母之间或两个空格之间.</li>
</ul>
<h2 id="分组与反向引用-Group-amp-Back-Reference"><a href="#分组与反向引用-Group-amp-Back-Reference" class="headerlink" title="分组与反向引用 Group &amp; Back Reference">分组与反向引用 Group &amp; Back Reference</a></h2><ul>
<li><code>(x)</code> 捕获括号. 匹配 <code>x</code> 并捕获匹配项.</li>
<li><code>\n</code> 反向引用. n 是一个正整数, 指向正则表达式中的第 n 个括号中匹配的子串.</li>
<li><code>(?:x)</code> 非捕获括号. 匹配 <code>x</code> 但不捕获, 用于分组.</li>
<li><code>(?&lt;name&gt;x)</code> <em>(*ES2018)</em> 具名分组. 匹配 <code>x</code> 并将捕获到的组可以 <code>name</code> 属性访问. <a href="http://es6.ruanyifeng.com/#docs/regex#%E5%85%B7%E5%90%8D%E7%BB%84%E5%8C%B9%E9%85%8D">参考这里</a></li>
</ul>
<h2 id="量词-Quantifiers"><a href="#量词-Quantifiers" class="headerlink" title="量词 Quantifiers">量词 Quantifiers</a></h2><ul>
<li><code>x&#123;n&#125;</code> n 为正整数, 匹配 <code>x</code> 连续出现 n 次</li>
<li><code>x&#123;n,&#125;</code> n 为正整数, 匹配 <code>x</code> 至少连续出现 n 次</li>
<li><code>x&#123;n,m&#125;</code> n,m 为正整数, 匹配 <code>x</code> 至少连续出现 n 次, 至多出现 m 次</li>
<li><code>x*</code> 匹配前面的模式 <code>x</code> 0 或多次. </li>
<li><code>x+</code> 匹配前面的模式 <code>x</code> 至少出现 1 次. 等价于 <code>x&#123;1,&#125;</code></li>
<li><code>x*?</code> 非贪婪模式匹配 <code>x*</code> (有关<a href="">贪婪模式</a>)</li>
<li><code>x+?</code> 非贪婪模式匹配 <code>x+</code> (有关<a href="">贪婪模式</a>)</li>
<li><code>x?</code> 匹配 <code>x</code> 0 或 1 次. 等价于 <code>x&#123;0,1&#125;</code></li>
<li><code>x|y</code> 匹配 <code>x</code> 或 <code>y</code></li>
</ul>
<h2 id="断言-Assertions"><a href="#断言-Assertions" class="headerlink" title="断言 Assertions">断言 Assertions</a></h2><ul>
<li><code>x(?=y)</code> 只有当 <code>x</code> 在 <code>y</code> 前面时，才匹配 <code>x</code>. </li>
<li><code>x(?!y)</code> 只有当 <code>x</code> 不在 <code>y</code> 前面时，才匹配 <code>x</code>. </li>
<li><code>x(?&lt;=y)</code> <em>(*ES2018)</em> 后行断言. 只有当 <code>x</code> 在 <code>y</code> 后面时，才匹配 <code>x</code>.</li>
<li><code>x(?&lt;!y)</code> <em>(*ES2018)</em> 后行断言. 只有当 <code>x</code> 不在 <code>y</code> 后面时，才匹配 <code>x</code>.</li>
</ul>
<blockquote>
<p>注: 断言的部分是不在匹配结果中的</p>
</blockquote>
<blockquote>
<p>注: 后行断言中的部分将会在组中以从右到左的方式计算引用</p>
</blockquote>
<h1 id="常用的正则表达式参考"><a href="#常用的正则表达式参考" class="headerlink" title="常用的正则表达式参考">常用的正则表达式参考</a></h1><h2 id="汉字"><a href="#汉字" class="headerlink" title="汉字">汉字</a></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/[\u4e00-\u9fa5]/</span><br></pre></td></tr></table></figure>

<h2 id="手机号码"><a href="#手机号码" class="headerlink" title="手机号码">手机号码</a></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^<span class="number">1</span>[<span class="number">3456789</span>]\d&#123;<span class="number">9</span>&#125;$/</span><br></pre></td></tr></table></figure>

<h2 id="身份证号码"><a href="#身份证号码" class="headerlink" title="身份证号码">身份证号码</a></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/(^[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">5</span>&#125;(<span class="number">18</span>|<span class="number">19</span>|([<span class="number">23</span>]\d))\d&#123;<span class="number">2</span>&#125;((<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>])|(<span class="number">10</span>|<span class="number">11</span>|<span class="number">12</span>))(([<span class="number">0</span>-<span class="number">2</span>][<span class="number">1</span>-<span class="number">9</span>])|<span class="number">10</span>|<span class="number">20</span>|<span class="number">30</span>|<span class="number">31</span>)\d&#123;<span class="number">3</span>&#125;[<span class="number">0</span>-9Xx]$)|(^[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">5</span>&#125;\d&#123;<span class="number">2</span>&#125;((<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>])|(<span class="number">10</span>|<span class="number">11</span>|<span class="number">12</span>))(([<span class="number">0</span>-<span class="number">2</span>][<span class="number">1</span>-<span class="number">9</span>])|<span class="number">10</span>|<span class="number">20</span>|<span class="number">30</span>|<span class="number">31</span>)\d&#123;<span class="number">3</span>&#125;$)/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注: 不要依赖正则表达式来校验身份证号码, 正则只用来验证格式, 无法验证校验码</p>
</blockquote>
<h2 id="Email-地址"><a href="#Email-地址" class="headerlink" title="Email 地址">Email 地址</a></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^[a-zA-<span class="variable constant_">Z0</span>-9_-]+@[a-zA-<span class="variable constant_">Z0</span>-9_-]+(\.[a-zA-<span class="variable constant_">Z0</span>-9_-]+)+$/</span><br></pre></td></tr></table></figure>

<h2 id="HTTP-URL"><a href="#HTTP-URL" class="headerlink" title="HTTP URL">HTTP URL</a></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^(https?|ftp|file):\/\/[-A-<span class="title class_">Za</span>-z0-<span class="number">9</span>+&amp;@#/%?=~_|!:,.;]+[-A-<span class="title class_">Za</span>-z0-<span class="number">9</span>+&amp;@#/%=~_|]$/</span><br></pre></td></tr></table></figure>

<h1 id="Regex-Tuesday-挑战"><a href="#Regex-Tuesday-挑战" class="headerlink" title="Regex Tuesday 挑战">Regex Tuesday 挑战</a></h1><p>好了, javascript 中的正则表达式差不多就到这里了, 如果有实战兴趣的话, 不妨来挑战一下?</p>
<p><strong><a href="http://callumacrae.github.io/regex-tuesday/">Regex Tuesday</a></strong> (可能需要科学上网)</p>
<p>下面是自己做的 regex-tuesday 答案</p>
<h2 id="Week-1-Repeated-words"><a href="#Week-1-Repeated-words" class="headerlink" title="Week 1. Repeated words">Week 1. <a href="http://callumacrae.github.io/regex-tuesday/challenge1.html">Repeated words</a></a></h2><p>考察点: <code>反向引用</code> <code>边界</code></p>
<details>
<summary>查看答案</summary>

<p>这个比较简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/(\b\S+\b) (\b\<span class="number">1</span>\b)/gi <span class="comment">// pattern</span></span><br><span class="line"><span class="string">&#x27;$1 &lt;strong&gt;$2&lt;/strong&gt;&#x27;</span> <span class="comment">// replacer</span></span><br></pre></td></tr></table></figure>
</details>

<h2 id="Week-2-Grayscale-colours"><a href="#Week-2-Grayscale-colours" class="headerlink" title="Week 2. Grayscale colours">Week 2. <a href="http://callumacrae.github.io/regex-tuesday/challenge2.html">Grayscale colours</a></a></h2><p>考察点: <code>反向引用</code> <code>分组</code> <code>量词</code></p>
<details>
<summary>查看答案</summary>

<p>这个可怕的正则表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^(?:#([<span class="number">0</span>-9a-f]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)\<span class="number">1</span>\<span class="number">1</span>|rgba?\(((?:<span class="number">0</span>|[<span class="number">1</span>-<span class="number">9</span>]\d?|<span class="number">1</span>\d&#123;<span class="number">2</span>&#125;|<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]\d|<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>])(?:\.\d+)?|(?:[<span class="number">1</span>-<span class="number">9</span>]\d?(?:\.\d+)?|<span class="number">100</span>)%), *<span class="number">0</span>*\<span class="number">2</span> *, *<span class="number">0</span>*\<span class="number">2</span>(?: *, *(?:<span class="number">0</span>(?:\.\d+)?|<span class="number">1</span>|(?:[<span class="number">1</span>-<span class="number">9</span>]\d?(?:\.\d+)?|<span class="number">100</span>)%) *)?\)|hsla?\((?:.+, *<span class="number">0</span>%? *,.+|.+,.+, *(?:<span class="number">0</span>%?|<span class="number">100</span>%))(?: *,.+)?\))$/i <span class="comment">// pattern</span></span><br></pre></td></tr></table></figure>

<p><img src="//static.mutoe.com/2019/javascript-regexp/regex-tuesday-2-grayscale-colours.png" alt="regex-tuesday-2-grayscale-colours"></p>
</details>

<h2 id="Week-3-Dates"><a href="#Week-3-Dates" class="headerlink" title="Week 3. Dates">Week 3. <a href="http://callumacrae.github.io/regex-tuesday/challenge3.html">Dates</a></a></h2><details>
<summary>查看答案</summary>

<p>考察点: <code>分组</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^(<span class="number">1</span>\d&#123;<span class="number">3</span>&#125;|<span class="number">200</span>\d|<span class="number">201</span>[<span class="number">0</span>-<span class="number">2</span>])\/(<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])\/(<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>]|[<span class="number">1</span>-<span class="number">2</span>]\d|<span class="number">30</span>) ([<span class="number">01</span>]\d|<span class="number">2</span>[<span class="number">0</span>-<span class="number">3</span>]):([<span class="number">0</span>-<span class="number">5</span>]\d)(?::([<span class="number">0</span>-<span class="number">5</span>]\d))?$/</span><br></pre></td></tr></table></figure>

<p><img src="//static.mutoe.com/2019/javascript-regexp/regex-tuesday-3-dates.png" alt="regex-tuesday-3-dates"></p>
</details>

<h2 id="Week-4-Italic-Markdown"><a href="#Week-4-Italic-Markdown" class="headerlink" title="Week 4. Italic Markdown">Week 4. <a href="http://callumacrae.github.io/regex-tuesday/challenge4.html">Italic Markdown</a></a></h2><details>
<summary>查看答案</summary>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通版本</span></span><br><span class="line">/(^|[^*])\*((?:[\w .]|\*\*)+)\*<span class="regexp">/g /</span><span class="regexp">/ pattern</span></span><br><span class="line"><span class="regexp">&#x27;$1&lt;em&gt;$2&lt;/</span>em&gt;<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 后行断言版本 (ES2018语法, 并非所有浏览器都支持)</span></span><br><span class="line"><span class="string">/(?&lt;!\*)\*((?:[\w .]|\*\*)+)\*/g // pattern</span></span><br><span class="line"><span class="string">&#x27;</span>&lt;em&gt;$1&lt;<span class="regexp">/em&gt;&#x27; /</span><span class="regexp">/ replacer</span></span><br><span class="line"><span class="regexp"></span></span><br></pre></td></tr></table></figure>
</details>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp">RegExp - MDN</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/regex">正则的扩展 - 阮一峰·ECMAScript6</a></li>
<li><a href="https://github.com/dt-fe/weekly/blob/master/91.%E7%B2%BE%E8%AF%BB%E3%80%8A%E6%AD%A3%E5%88%99%20ES2018%E3%80%8B.md">精读《正则 ES2018》 - GitHub·dt-fe&#x2F;weekly</a></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>RegExp</tag>
      </tags>
  </entry>
  <entry>
    <title>记一个项目改造为 TypeScript 心得</title>
    <url>//2019/javascript-to-typescript/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言">前言</a></h1><p>现手上有一个小型的 js 项目, 内容比较简单, 就是提供一个单页, 其中引用了 quill 富文本编辑器. </p>
<p>该页面需要嵌入到其他客户端(如 iframe 或 webview) 以提供统一的富文本编辑的用户体验.</p>
<p>项目内部使用 webpack 将 js &#x2F; stylus 打包, 对外提供两个 html, 一个用于大屏的 iframe 显示, 另一个用于小屏的 Android &#x2F; IOS 设备显示.</p>
<p>项目结构如下</p>
<p><img src="//static.mutoe.com/2019/javascript-to-typescript/file-tree.png" alt="file-tree"></p>
<p>你可以参考此项目对自己的项目进行改造, 过程大致相同</p>
<blockquote>
<p>阅读本贴, 你可能需要了解以下前置内容</p>
<ul>
<li>typescript</li>
<li>webpack</li>
<li>yarn</li>
</ul>
</blockquote>
<p><strong>本次改造所有改动可在 github <a href="https://github.com/slimkit/plus-editor/commit/3424d38e0e60ce39eeaa419113fb67cf73411d36">查看 commit 记录</a></strong></p>
<span id="more"></span>

<h1 id="开始改造"><a href="#开始改造" class="headerlink" title="开始改造">开始改造</a></h1><h2 id="1-添加-typescript-依赖和-tsconfig-json"><a href="#1-添加-typescript-依赖和-tsconfig-json" class="headerlink" title="1. 添加 typescript 依赖和 tsconfig.json">1. 添加 <code>typescript</code> 依赖和 <code>tsconfig.json</code></a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add -D typescript</span><br><span class="line">$ yarn tsc --init</span><br></pre></td></tr></table></figure>

<p>其中 <code>yarn tsc --init</code> 使用本地刚安装的 typescript 初始化了一个 <code>tsconfig.json</code> 含有很多默认配置的文件</p>
<p>修改 <code>tsconfig.json</code> 为以下内容 (可自行配置)</p>
<figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看 <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">TypeScript 官方文档</a> 了解更多关于 <code>tsconfig.json</code> 的配置选项。</p>
</blockquote>
<h2 id="2-将所有-js-文件修改为-ts-文件"><a href="#2-将所有-js-文件修改为-ts-文件" class="headerlink" title="2. 将所有 js 文件修改为 ts 文件">2. 将所有 js 文件修改为 ts 文件</a></h2><p>一个一个替换后缀名太麻烦了, 我们使用几行命令批量替换. (注意我们只需要批量替换 src 目录下的 js 文件)</p>
<p>linux &#x2F; mac 下执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> src</span><br><span class="line">$ find . -name <span class="string">&quot;*.js&quot;</span> | sed <span class="string">&#x27;s/.js//&#x27;</span> | xargs -n1 -I &#123;&#125; <span class="built_in">mv</span> &#123;&#125;.js &#123;&#125;.ts</span><br></pre></td></tr></table></figure>

<p>windows 下参考 <a href="https://www.google.com/search?q=windows+%E9%80%92%E5%BD%92+%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80">这里(google)</a> 或 <a href="https://www.baidu.com/baidu?wd=windows+%E9%80%92%E5%BD%92+%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80">这里(baidu)</a></p>
<h2 id="3-修复出错的-ts-文件"><a href="#3-修复出错的-ts-文件" class="headerlink" title="3. 修复出错的 ts 文件">3. 修复出错的 ts 文件</a></h2><p>执行以下命令来检查有多少个文件需要修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn tsc</span><br></pre></td></tr></table></figure>

<p><img src="//static.mutoe.com/2019/javascript-to-typescript/tscompile-errors.png" alt="tscompile-errors"></p>
<p>意料之中, 我们得到了 29 个错误, 分了下类, 大约有下面几种类型, 逐一解决之</p>
<ul>
<li><a href="#TS2307">error TS2307: Cannot find module ‘xxx’.</a></li>
<li><a href="#TS2339">error TS2339: Property ‘xxx’ does not exist on type ‘yyy’.</a></li>
<li><a href="#TS2554">error TS2554: Expected 2-3 arguments, but got 1.</a></li>
<li><a href="#TS2322">error TS2322: Type ‘any’ is not assignable to type ‘never’.</a></li>
</ul>
<h2 id="4-让-webpack-支持编译-typescript"><a href="#4-让-webpack-支持编译-typescript" class="headerlink" title="4. 让 webpack 支持编译 typescript">4. 让 webpack 支持编译 typescript</a></h2><p>我们接下来我们需要让 webpack 认识 ts 文件并且以 typescript 自己的编译器进行转化, 安装 <code>ts-loader</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add -D ts-loader</span><br></pre></td></tr></table></figure>

<p>然后添加 <code>webpack.config.js</code> 文件中对 ts 文件的解析 (自行追加)</p>
<figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts?$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [ <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span> ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看 <a href="https://webpack.docschina.org/concepts/configuration/">Webpack 中文文档</a> 了解更多关于 <code>webpack.config.js</code> 的配置选项。</p>
</blockquote>
<h1 id="改造后常见-TS-错误-持续更新"><a href="#改造后常见-TS-错误-持续更新" class="headerlink" title="改造后常见 TS 错误 (持续更新)">改造后常见 TS 错误 (持续更新)</a></h1><blockquote>
<p>如果你想了解一些常见的 TS 错误, 可以参见我的另一篇帖子 – <a href="/2019/typescript-errors">《TypeScript 常见错误整理》</a></p>
</blockquote>
<div id="TS2307"></div>

<h2 id="TS2307-Cannot-find-module-‘moduleA’"><a href="#TS2307-Cannot-find-module-‘moduleA’" class="headerlink" title="TS2307: Cannot find module ‘moduleA’.">TS2307: Cannot find module ‘moduleA’.</a></h2><p>假设我们有一个导入语句 <code>import &#123; a &#125; from &quot;moduleA&quot;</code>, 为了去检查任何对 <code>a</code> 的使用, 编译器回去寻找关于它的定义, 这会去向上寻找 <code>moduelA</code>.</p>
<p>但 moduleA 会写在某个 <code>.ts</code> 或是 <code>.d.ts</code> 文件中, 如果没有找到对应的类型定义去解析这个模块, 可能会抛出一个 <code>error TS2307: Cannot find module &#39;moduleA&#39;.</code></p>
<p><strong>解决办法</strong><br>给 <code>moduleA</code> 声明定义文件, 如果导入的是一个第三方 npm 包, 可以去社区找到对应的 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.cn.md">@types</a></p>
<details>
<summary>本示例项目中出现的 TS2307 错误</summary>

<p><strong><code>error TS2307: Cannot find module &#39;quill&#39;.</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/blots/divider.ts:1:19 - error TS2307: Cannot find module &#x27;quill&#x27;.</span><br><span class="line"></span><br><span class="line">1 import Quill from &#x27;quill&#x27;</span><br></pre></td></tr></table></figure>

<p>需要安装 <code>@types/quill</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add -D @types/quill</span><br></pre></td></tr></table></figure>

<p><strong><code>error TS2307: Cannot find module &#39;source-map&#39;.</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node_modules/@types/uglify-js/index.d.ts:9:30 - error TS2307: Cannot find module <span class="string">&#x27;source-map&#x27;</span>.</span><br><span class="line"></span><br><span class="line">9 import &#123; RawSourceMap &#125; from <span class="string">&#x27;source-map&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>我尝试安装 @types&#x2F;source-map 但是不起作用, 于是去 google 这个问题, 在 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/issues/23649#issuecomment-424355987">DefinitelyTyped#23649</a> 找到了解决办法:</p>
<p>安装 <code>source-map</code> 并且设置 <code>tsconfig.json</code> 中的 <code>moduleResolution</code></p>
<figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</details>

<hr>
<div id="TS2339"></div>

<h2 id="TS2339-Property-‘xxx’-does-not-exist-on-type-‘yyy’"><a href="#TS2339-Property-‘xxx’-does-not-exist-on-type-‘yyy’" class="headerlink" title="TS2339: Property ‘xxx’ does not exist on type ‘yyy’.">TS2339: Property ‘xxx’ does not exist on type ‘yyy’.</a></h2><p>当使用表达式 <code>window.xxx</code> 时, typescript 会尝试从 <code>yyy</code> 对象上解析 <code>xxx</code> 属性, 如果没有找到对应的定义, 则会抛出一个 <code>error TS2339: Property &#39;xxx&#39; does not exist on type &#39;yyy&#39;.</code></p>
<p><strong>解决办法</strong></p>
<p>给 <code>yyy</code> 对象定义正确的类型</p>
<p>需要注意的是, 如果 <code>yyy</code> 是 window 对象, 则需要定义全局的声明文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">    <span class="attr">xxx</span>: <span class="built_in">any</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里还是建议 xxx 应该有自己的类型而不是 any.</p>
<details>
<summary>本示例项目中出现的 TS2339 错误</summary>

<p><strong><code>error TS2339: Property &#39;id&#39; does not exist on type &#39;never&#39;.</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/index.ts:64:51 - error TS2339: Property &#x27;id&#x27; does not exist on type &#x27;never&#x27;.</span><br><span class="line"></span><br><span class="line">64     const index = images.findIndex(image =&gt; image.id === item.id)</span><br></pre></td></tr></table></figure>

<p>这里是因为我在初始化 <code>images</code> 数组时书写了以下内容 </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> images = []</span><br></pre></td></tr></table></figure>

<p>TS 认为 <code>images</code> 数组是一个空数组并且不可拓展, 于是遍历数组时 TS 认为每个元素都是 <code>never</code> 类型, 而 <code>id</code> 属性并不在 <code>never</code> 类型上面. 我们给这个数组补充声明一个类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 上传的图片 */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UploadImage</span> &#123;</span><br><span class="line">  <span class="comment">/** 图片标识 */</span></span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="comment">/** 图片地址 */</span></span><br><span class="line">  src?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 上传的图片列表 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">images</span>: <span class="title class_">UploadImage</span>[] = []</span><br></pre></td></tr></table></figure>

<p><strong><code>error TS2339: Property &#39;launcher&#39; does not exist on type &#39;Window&#39;.</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/caller.ts:2:14 - error TS2339: Property &#x27;launcher&#x27; does not exist on type &#x27;Window&#x27;.</span><br><span class="line"></span><br><span class="line">2   if (window.launcher) &#123;</span><br></pre></td></tr></table></figure>

<p>在入口 <code>index.ts</code> 文件顶部增加以下内容</p>
<figure class="highlight ts"><figcaption><span>index.ts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">    <span class="attr">quill</span>: <span class="title class_">Quill</span></span><br><span class="line">    <span class="comment">/** Android 端注入 webview 中的对象 */</span></span><br><span class="line">    <span class="attr">launcher</span>: <span class="built_in">any</span></span><br><span class="line">    <span class="comment">/** IOS 端注入 webview 中的对象 */</span></span><br><span class="line">    <span class="attr">webkit</span>: <span class="built_in">any</span></span><br><span class="line">    <span class="comment">/** 接收图片预览地址的钩子 */</span></span><br><span class="line">    <span class="attr">imagePreviewReceiver</span>: <span class="function">(<span class="params">src: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 接收图片实际地址的钩子 */</span></span><br><span class="line">    <span class="attr">imageUrlReceiver</span>: <span class="function">(<span class="params">src: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    <span class="comment">/** 接收提交请求的钩子, 会触发各端对应的提交事件 */</span></span><br><span class="line">    <span class="attr">editorSubmitReceiver</span>: <span class="function">(<span class="params">src: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至于 <code>launcher</code> 和 <code>webkit</code> 为什么是 <code>any</code> 类型, 这两个变量是 android 和 ios 端分别注入在 window 中的 sdk, 所以保证他内部逻辑不会出错就可以啦.</p>
</details>

<hr>
<div id="TS2531"></div>

<h2 id="TS2531-Object-is-possibly-‘null’"><a href="#TS2531-Object-is-possibly-‘null’" class="headerlink" title="TS2531: Object is possibly ‘null’.">TS2531: Object is possibly ‘null’.</a></h2><p>在访问一个对象上的属性时, 如果该对象可能为 <code>null</code> 则抛出 <code>error TS2531: Object is possibly &#39;null&#39;.</code></p>
<p><strong>解决办法</strong></p>
<p>在访问可能为空的对象前判断该对象是否为空</p>
<details>
<summary>本示例项目中出现的 TS2531 错误</summary>

<p><strong><code>error TS2531: Object is possibly &#39;null&#39;.</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    const range = quill.getSelection()</span><br><span class="line">    quill.insertEmbed(range.index, &#x27;image&#x27;, item.base64, &#x27;user&#x27;)</span><br><span class="line">    </span><br><span class="line">const range: RangeStatic | null</span><br><span class="line">Object is possibly &#x27;null&#x27;.ts(2531)</span><br></pre></td></tr></table></figure>

<p>这是由于 <code>range</code> 对象是调用 <code>quill.getSelection()</code> 得到的, 而该方法的返回值包含了 <code>RangeStatic | null</code>. </p>
<p>如果 <code>range</code> 为空的话, 我们在生产环境访问 <code>range.index</code> 就不好了… Fix it.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> index = (range &amp;&amp; range.<span class="property">index</span>) || <span class="number">0</span></span><br><span class="line">quill.<span class="title function_">insertEmbed</span>(index, <span class="string">&#x27;image&#x27;</span>, item.<span class="property">base64</span>, <span class="string">&#x27;user&#x27;</span>)</span><br></pre></td></tr></table></figure>
</details>

<hr>
<div id="TS2554"></div>

<h2 id="TS2554-Expected-2-arguments-but-got-1"><a href="#TS2554-Expected-2-arguments-but-got-1" class="headerlink" title="TS2554: Expected 2 arguments, but got 1.">TS2554: Expected 2 arguments, but got 1.</a></h2><p>这是由于调用函数时, <strong>传入参数</strong> 与 <strong>期望的参数</strong> 数量不一致时, 会抛出 <code>error TS2554: Expected 2 arguments, but got 1.</code></p>
<p><strong>解决办法</strong></p>
<ul>
<li>如果是自定义函数类型定义的问题, 修改函数的 interface.</li>
<li>如果是调用时传参的问题, 恭喜你, 提前发现了一个错误, Fix it.</li>
</ul>
<details>
<summary>本示例项目中出现的 TS2554 错误</summary>

<p><strong><code>error TS2554: Expected 2-3 arguments, but got 1.</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    window.top.postMessage(&#123; funcName: fnName, params &#125;)</span><br><span class="line"></span><br><span class="line">Expected 2-3 arguments, but got 1.ts(2554)</span><br><span class="line">lib.dom.d.ts(17233, 31): An argument for &#x27;targetOrigin&#x27; was not provided.</span><br></pre></td></tr></table></figure>

<p>这是由于调用 <code>window.postMessage</code> 方法时传参不严谨导致的问题, 该方法期望接受第二个参数 <code>targetOrigin</code> 用于增强安全性, 补充之.  </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">top</span>.<span class="title function_">postMessage</span>(&#123; <span class="attr">funcName</span>: fnName, params &#125;, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>注: 虽然该方法不传入第二个参数也可调用成功, 但是在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">postMessage 文档</a> 中该方法是必选的.  </p>
<br>
**`error TS2554: Expected 2 arguments, but got 1.`**

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    inWebview = callMethod(&#x27;chooseImage&#x27;)</span><br><span class="line"></span><br><span class="line">(alias) callMethod(fnName: any, params: any): boolean</span><br><span class="line">import callMethod</span><br><span class="line">Expected 2 arguments, but got 1.ts(2554)</span><br><span class="line">caller.ts(1, 36): An argument for &#x27;params&#x27; was not provided.</span><br></pre></td></tr></table></figure>

<p>该问题是由于自己定义的方法 <code>callMethod</code> 第二个参数是可选的, 但是忘记书写默认值, 导致问题出现. 修正 <code>callMethod</code> 类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">callMethod</span>(<span class="params">fnName: <span class="built_in">string</span>, params: <span class="built_in">any</span> = &#123;&#125;</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<h1 id="心得总结"><a href="#心得总结" class="headerlink" title="心得总结">心得总结</a></h1><p><em>如果你自己改造的过程中遇到了什么问题, 可以在下面留言, 我会第一时间回复并尽可能的帮助你解决一些改造过程中遇到的问题.</em></p>
<h2 id="平滑过渡到-typescript"><a href="#平滑过渡到-typescript" class="headerlink" title="平滑过渡到 typescript">平滑过渡到 typescript</a></h2><p>为了减小过渡到 typescript 的成本, 我添加了 <code>&quot;noImplicitAny&quot;: false</code> 如果你的项目不大, 可以移除改行逐一替换 any 类型</p>
<p>当然中大型项目后期是需要逐渐移除 any 类型的, 不然就成了 anyscript 😂</p>
<h2 id="关于批量替换文件名"><a href="#关于批量替换文件名" class="headerlink" title="关于批量替换文件名">关于批量替换文件名</a></h2><p>在替换文件名时一开始尝试使用 <code>for i in *.js; do mv &quot;$i&quot; &quot;$&#123;i%.js&#125;.ts&quot;;done</code> 命令, 发现该命令只能替换当前目录下的文件, 不能递归替换子目录, 遂放弃之.</p>
<h2 id="错误数量巨大"><a href="#错误数量巨大" class="headerlink" title="错误数量巨大">错误数量巨大</a></h2><p>很多时候刚改造完项目编译发现成百上千个错误, 这时候千万不能怕, 很多错其实都是联动发生的, 你只要找对了根源修复它, 一次可以减少很多数量的错误.</p>
<p>像这次改造, 开始有 30 个错误, 每次调整同类型的错误都能减少很多, 改到最后 0 个问题, 心里还是觉得蛮有成就感的.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/react-&-webpack.html">React &amp; Webpack(EN) - TypeScript</a></li>
<li><a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html">Module Resolution(EN) - TypeScript</a></li>
<li><a href="https://webpack.docschina.org/guides/typescript/">TypeScript - Webpack中文文档</a></li>
<li><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.cn.md">DefinitelyTyped(CN) - GitHub</a></li>
<li><a href="https://jkchao.github.io/typescript-book-chinese/typings/migrating.html">从 JavaScript 迁移 - 《深入理解 TypeScript[译]》</a></li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>“懒惰”的客户</title>
    <url>//2017/lazy-customer/</url>
    <content><![CDATA[<p>前几天我的姐姐让我帮她做一个公众号的头像, 也作为她以后店谱的 LOGO, 举手之劳的事情就答应了, 但我也不是很清楚她喜欢哪种风格的, 我就随便选了几种风格列了一个简单的表格给她选, 她也随手选了一两个比较喜欢的.</p>
<p>为了做出让她更满意的头像, 也怕我对风格理解的偏差, 我就给了她一个素材网站, 从里面选出自己喜欢的元素, 并让她选好后告诉我.</p>
<p>第二天我问她的时候, 她也没有上去选, 我说那我直接帮你做了吧, 她说好, 并且她本也是这么打算的. 最后我就按她之前选得风格, 添加了一些我觉得比较好看的元素, 做好后就给她了, 最后她也很满意.</p>
<p><img src="//static.mutoe.com/2017/lazy-customer/logo-avatar.png" alt="logo-avatar">
<em>图: 我帮她设计的公众号头像</em></p>
<hr>
<p>通过一件这么小的事, 突然想起了以前帮客户设计网页的时候也遇到过类似的情况. 你觉得按照自己喜欢的方式完成客户的目标, 总有种 “ 不是最完美 “ – 达不到客户心中想要的那种结果的感觉.</p>
<p>以前看书的时候, 看到那些 “ 把客户当作傻子, 当作一个刚学会说话的小孩 “ 这样的字句的时候不以为然, 客户应当有他们自己的想法. 但现在看来事实本应如此, 是我在当前领域涉及较深时, 思考问题总喜欢复杂一些, 全面一些, 考虑的很多. 但__客户的要求有时候并不是那么高__, 甚至他们有时候不介意去 “ 抄 “ 别人的页面.</p>
<p>所以说, 隔行如隔山. 他们需要的是你的专业知识, 他们也不清楚到底这样的设计有怎样的思考, 怎样的用途, 你尽管按照自己的想法去做好每一个环节, 而不要想着尽量让客户参与进来, 这样有时反而会耽误工期或让客户觉得你不太专业.</p>
<p><strong>客户总是懒惰的.</strong></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 学习笔记</title>
    <url>//2017/linux-study-notes/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言">前言</a></h1><p>这里是一篇个人学习使用 Linux 操作系统时遇到的一些常见问题以及资料的集合. 用来在日后的操作中做一个 QA 索引. 如果它也能帮到你就再好不过了.</p>
<span id="more"></span>

<h1 id="命令"><a href="#命令" class="headerlink" title="命令">命令</a></h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键">快捷键</a></h2><p>在 Linux 命令行中有一些快捷键可供方便的敲出命令</p>
<table>
<thead>
<tr>
<th>光标移动</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl-b</code> &#x2F; <code>Ctrl-f</code></td>
<td>将光标移向左&#x2F;右移动一位</td>
</tr>
<tr>
<td><code>M-b</code> &#x2F; <code>M-f</code></td>
<td>将光标移向左&#x2F;右移动一个词</td>
</tr>
<tr>
<td><code>Ctrl-a</code> &#x2F; <code>Ctrl-e</code></td>
<td>将光标移到行首&#x2F;尾</td>
</tr>
<tr>
<td><code>Ctrl-xx</code></td>
<td>光标在当前位置与行尾之前切换</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>编辑</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl-h</code> &#x2F; <code>Ctrl-d</code></td>
<td>剪切光标前&#x2F;后的字符</td>
</tr>
<tr>
<td><code>Ctrl-t</code></td>
<td>交换当前字符与前一个字符</td>
</tr>
<tr>
<td><code>Ctrl-w</code> &#x2F; <code>Alt-d</code></td>
<td>剪切光标位置到词首&#x2F;尾</td>
</tr>
<tr>
<td><code>Ctrl-k</code></td>
<td>剪切到行尾</td>
</tr>
<tr>
<td><code>Ctrl-u</code></td>
<td>剪切整行</td>
</tr>
<tr>
<td><code>Ctrl-y</code></td>
<td>粘贴上述命令删除的内容</td>
</tr>
<tr>
<td><code>Alt-.</code></td>
<td>使用上一条命令的最后一个参数</td>
</tr>
<tr>
<td><code>Ctrl-_</code></td>
<td>撤销</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>历史命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl-p</code> <code>⬆</code></td>
<td>回溯上一个命令</td>
</tr>
<tr>
<td><code>Ctrl-n</code> <code>⬇</code></td>
<td>回溯下一个命令</td>
</tr>
<tr>
<td><code>Ctrl-r</code>&#x2F; <code>Ctrl-g</code></td>
<td>查找历史命令 &#x2F; 退出查找</td>
</tr>
<tr>
<td><code>!!</code></td>
<td>执行上一条命令</td>
</tr>
<tr>
<td><code>!wget</code></td>
<td>执行最近一条以 wget 开头的命令</td>
</tr>
<tr>
<td><code>!wget:p</code></td>
<td>dry-run (打印最近一条以 wget 开头的命令, 不执行)</td>
</tr>
<tr>
<td><code>!*</code></td>
<td>输入上一条命令的所有参数</td>
</tr>
<tr>
<td><code>^abc</code></td>
<td>删除上一条命令的 abc</td>
</tr>
<tr>
<td><code>!-n</code></td>
<td>执行前 n 条命令</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>控制命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl-l</code></td>
<td>清空屏幕上的内容</td>
</tr>
<tr>
<td><code>Ctrl-o</code></td>
<td>执行当前命令并选择上一条命令</td>
</tr>
<tr>
<td><code>Ctrl-s</code> &#x2F; <code>Ctrl-q</code></td>
<td>阻止&#x2F;允许屏幕输出</td>
</tr>
<tr>
<td><code>Ctrl-c</code> &#x2F; <code>Ctrl-z</code></td>
<td>中止&#x2F;挂起进程</td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li>macOS 下 <code>Alt</code> 键对应 <kbd>Option</kbd>；如果按出特殊字符则需要关闭相应的特殊字符输出设定，参考 <a href="https://juejin.cn/post/6844903709152018439">Mac 禁用 options 特殊字符</a></li>
<li><code>M-b</code> 为按住 <kbd>Esc</kbd> 再按 <kbd>b</kbd></li>
</ul>
</blockquote>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名">别名</a></h2><p>在使用 yum 安装 remi 源的 php7 时，需要执行 <code>yum install php70</code>，安装完成后执行 php cli 的命令为 <code>php70 -v</code>，比较不方便，这时可以使用 alias 给 <code>php70</code> 设置一个别名。</p>
<p>执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> php=`php70`</span><br></pre></td></tr></table></figure>

<p>注意等号前后不可以有空格，否则会报错。</p>
<h1 id="进程"><a href="#进程" class="headerlink" title="进程">进程</a></h1><h2 id="挂起与恢复"><a href="#挂起与恢复" class="headerlink" title="挂起与恢复">挂起与恢复</a></h2><table>
<thead>
<tr>
<th>快捷键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>ctrl-c</td>
<td align="left">发送中断信号强制中断前台进程</td>
</tr>
<tr>
<td>ctrl-z</td>
<td align="left">发送挂起信号挂起一个前台进程，挂起后使用 <code>fg</code> &#x2F; <code>bg</code> 恢复进程</td>
</tr>
<tr>
<td>ctrl-d</td>
<td align="left">模拟输入 <code>.exit</code> 退出当前进程</td>
</tr>
</tbody></table>
<h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动">开机启动</a></h2><table>
<thead>
<tr>
<th>命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>chkconfig [service]</code></td>
<td align="left">查看某个 service 是否在开机启动状态</td>
</tr>
<tr>
<td><code>chkconfig [service] on</code></td>
<td align="left">允许开机启动某个 service</td>
</tr>
<tr>
<td><code>chkconfig [service] off</code></td>
<td align="left">禁止开机启动某个 service</td>
</tr>
</tbody></table>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全">安全</a></h1><h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户">创建新用户</a></h2><table>
<thead>
<tr>
<th>命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>adduser</code></td>
<td align="left">自动创建新用户</td>
</tr>
<tr>
<td><code>useradd</code></td>
<td align="left">需要使用参数选项创建新用户</td>
</tr>
</tbody></table>
<h3 id="adduser-自动创建新用户"><a href="#adduser-自动创建新用户" class="headerlink" title="adduser 自动创建新用户"><code>adduser</code> 自动创建新用户</a></h3><p>会自动为创建的用户指定主目录、系统 shell 版本.</p>
<h3 id="useradd-自定义创建新用户"><a href="#useradd-自定义创建新用户" class="headerlink" title="useradd 自定义创建新用户"><code>useradd</code> 自定义创建新用户</a></h3><p>需要使用参数选项指定上述基本设置，如果不使用任何参数，则创建的用户无密码、无主目录、没有指定 shell 版本。</p>
<ul>
<li><code>-d [path]</code> 为其设置主目录.</li>
<li><code>-g [gid|groupname]</code> 为其指定一个主用户组. 可以接组 ID 或组名称</li>
<li><code>-G [gid|groupname,...]</code> 为其指定一个附加用户组. 可以用逗号分隔开(不要加空格).</li>
<li><code>-m</code> 如果主目录不存在则创建; 存在则不再创建, 并且这个目录不属于新用户.</li>
<li><code>-M</code> 不创建主目录.</li>
<li><code>-N</code> 不为用户创建一个同名的用户组.</li>
<li><code>-s [shell]</code> 指定用户登陆的 shell 版本</li>
<li><code>-u [uid]</code> 指定用户 uid</li>
</ul>
<p>example.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo user add -d <span class="string">&quot;/home/xxx&quot;</span> -m -s <span class="string">&quot;/bin/bash&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>useradd</code> 命令是有默认值的, 其值与 <code>/etc/default/useradd</code> 中的内容相同.</p>
</blockquote>
<h2 id="指定用户密码"><a href="#指定用户密码" class="headerlink" title="指定用户密码">指定用户密码</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置当前用户的密码</span></span><br><span class="line">passwd</span><br><span class="line"><span class="comment"># 设置任意用户的密码</span></span><br><span class="line">passwd your_username       <span class="comment"># 在 root 用户时</span></span><br><span class="line">sudo passwd your_username  <span class="comment"># 在普通用户时</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>安全起见，请不要使用弱密码。最好使用 1password, BitWarden 或其他密码管理器来管理此密码，然后为其设置密钥登陆。</p>
</blockquote>
<h2 id="将用户添加进一个用户组中"><a href="#将用户添加进一个用户组中" class="headerlink" title="将用户添加进一个用户组中">将用户添加进一个用户组中</a></h2><table>
<thead>
<tr>
<th>命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>groupadd</code></td>
<td align="left">创建一个用户组</td>
</tr>
<tr>
<td><code>usermod</code></td>
<td align="left">更改用户信息</td>
</tr>
</tbody></table>
<h3 id="usermod-创建一个用户组"><a href="#usermod-创建一个用户组" class="headerlink" title="usermod 创建一个用户组"><code>usermod</code> 创建一个用户组</a></h3><p>参考 <code>useradd</code></p>
<ul>
<li><code>-a</code> 配合 <code>-G</code> 使用, 附加用户组.</li>
<li><code>-l [username]</code> 修改用户名.</li>
<li><code>-L</code> 锁定用户密码, 使密码无效.</li>
<li><code>-U</code> 解除密码锁定.</li>
</ul>
<h2 id="为普通用户添加-root-权限"><a href="#为普通用户添加-root-权限" class="headerlink" title="为普通用户添加 root 权限">为普通用户添加 root 权限</a></h2><p>编辑 sudoers 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>找到这行 <code>root ALL=(ALL) ALL</code>, 在它下面添加一行, 将 root 替换为你的用户名</p>
<blockquote>
<p>你可以 sudoers 添加下面四行中任意一条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youuser            ALL=(ALL)                ALL</span><br><span class="line">%youuser           ALL=(ALL)                ALL</span><br><span class="line">youuser            ALL=(ALL)                NOPASSWD: ALL</span><br><span class="line">%youuser           ALL=(ALL)                NOPASSWD: ALL</span><br></pre></td></tr></table></figure>

<p>第一行:允许用户 youuser 执行 sudo 命令(需要输入密码).<br>第二行:允许用户组 youuser 里面的用户执行 sudo 命令(需要输入密码).<br>第三行:允许用户 youuser 执行 sudo 命令,并且在执行的时候不输入密码.<br>第四行:允许用户组 youuser 里面的用户执行 sudo 命令,并且在执行的时候不输入密码.</p>
</blockquote>
<p>然后使用 <code>:wq!</code> 保存</p>
<h2 id="允许用户使用密钥登陆"><a href="#允许用户使用密钥登陆" class="headerlink" title="允许用户使用密钥登陆">允许用户使用密钥登陆</a></h2><h3 id="新密钥对登陆"><a href="#新密钥对登陆" class="headerlink" title="新密钥对登陆">新密钥对登陆</a></h3><p>在客户端上执行以下命令创建密钥对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su username <span class="comment"># 切换到普通用户</span></span><br><span class="line"><span class="built_in">cd</span> ~ <span class="comment"># 进入 home 目录</span></span><br><span class="line">ssh-keygen -r rsa <span class="comment"># 创建密钥对, 一路回车即可</span></span><br></pre></td></tr></table></figure>

<p>现在你就拥有了一堆密钥对</p>
<h3 id="使用已有密钥对登陆远端主机"><a href="#使用已有密钥对登陆远端主机" class="headerlink" title="使用已有密钥对登陆远端主机">使用已有密钥对登陆远端主机</a></h3><p>将 <code>id_rsa.pub</code> 上传到主机, 并且使用它登陆即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 id_rsa 上传到远端服务器（host改成你服务器的ip或域名，remoteuser改成你自己的用户名）</span></span><br><span class="line">ssh-copy-id remoteuser@host</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用刚上传的密钥对的私钥登陆远端服务器</span></span><br><span class="line">ssh remoteuser@host -i <span class="variable">$HOME</span>/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>你也可以配置 ssh config 以避免每次使用 ssh 登陆时都需要指定私钥</p>
<figure class="highlight plaintext"><figcaption><span>~/.ssh/config</span></figcaption><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line">  # 对所有主机使用以下配置</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa  # 指定登陆使用的密钥文件</span><br><span class="line">  ServerAliveInterval 60      # 每 60s 向服务器发送一次心跳，避免长时间无响应被服务器强制断开连接</span><br><span class="line"></span><br><span class="line">Host customname # customname 可以随意指定，用于后续登陆</span><br><span class="line">  HostName host # host 改成自己的主机ip或域名</span><br><span class="line">  Port 22</span><br><span class="line">  User root     # 如果你使用的不是 root 用户，改成自己的用户名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果登陆失败，需要检查一下你的 <code>.ssh</code> 目录和 <code>.ssh/id_rsa</code> 私钥文件的权限 (将 <code>.ssh</code> 目录设置为 <code>700</code>, 将私钥设置为 <code>644</code>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">ls</span> -al</span><br><span class="line">total 56</span><br><span class="line">drwx------   9 user   staff   288 Jul 21 09:48 .</span><br><span class="line">-rw-r--r--   1 user   staff   475 Jun 25 10:55 config</span><br><span class="line">-rw-------   1 user   staff  2610 Mar 19 01:23 id_rsa</span><br><span class="line">-rw-r--r--   1 user   staff   578 Mar 19 01:23 id_rsa.pub</span><br><span class="line">-rw-------   1 user   staff  1534 Jul 19 16:14 known_hosts</span><br></pre></td></tr></table></figure>

<h1 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录">文件与目录</a></h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录">目录</a></h2><h3 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir 创建目录"><code>mkdir</code> 创建目录</a></h3><ul>
<li><code>-m [prop]</code> 目标属性, 目录权限.</li>
<li><code>-p</code> 递归创建, 如果目标目录上级目录不存在, 则创建.</li>
</ul>
<h3 id="setfacl-getfacl-为文件或目录添加多个用户-组"><a href="#setfacl-getfacl-为文件或目录添加多个用户-组" class="headerlink" title="setfacl getfacl 为文件或目录添加多个用户(组)"><code>setfacl</code> <code>getfacl</code> 为文件或目录添加多个用户(组)</a></h3><ul>
<li><code>setfacl -m g:group:rwx path</code> 为 path 添加 group 用户组</li>
<li><code>setfacl -m u:user:rwx path</code> 为 path 添加 user 用户</li>
<li><code>setfacl -x g:group path</code> 为 path 移除 group 用户组</li>
<li><code>setfacl -x u:user path</code> 为 path 移除 user 用户</li>
<li><code>getfacl path</code> 查看 path 的所有权限</li>
</ul>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作">文件操作</a></h2><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件">复制文件</a></h3><p><code>cp</code> 复制文件</p>
<ul>
<li><p><code>-r</code> 递归复制, 复制目录时使用此参数</p>
</li>
<li><p><code>cp foo.txt foo_copy.txt</code></p>
</li>
<li><p><code>cp -r folder copied_folder</code></p>
</li>
</ul>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件">移动文件</a></h3><p><code>mv</code> 移动文件或目录</p>
<ul>
<li><code>mv file1.txt file2.txt</code></li>
<li><code>mv folder1 folder2</code></li>
</ul>
<h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名">重命名</a></h3><p>使用 <code>mv</code> 亦可进行重命名操作，如果想使用高级用法，可以使用 <code>rename</code> 命令 </p>
<p><code>rename</code> 批量重命名</p>
<p><code>rename [options] oldname newname file</code><br><code>rename [options] &quot;s/oldname/newname/&quot; file</code></p>
<ul>
<li><code>-v</code> verbose 输出详细信息</li>
<li><code>-n</code> <code>--no-act</code> 预览输出而不进行实际操作</li>
<li><code>-o</code> <code>--no-overwrite</code> 不覆盖已存在的文件</li>
<li><code>-s</code> <code>--symlink</code> 同时作用于 symlink</li>
</ul>
<p>其中 <code>file</code> 可支持 <code>?</code> <code>*</code> 通配符， 当指定为 <code>*</code> 时表示匹配当前目录下所有文件</p>
<p>替换命令支持 perl 正则表达式, 匹配捕获组时使用 <code>\1</code> 来保留捕获组</p>
<p>例如当前目录下有 <code>foo1</code> <code>foo2</code> … <code>foo200</code>, 我们想将其重命名为 <code>text_1.txt</code> <code>text_2.txt</code> … <code>text_200.txt</code> 可以使用如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rename &quot;s/foo(\d+)/text_\1.txt/&quot; foo*</span><br></pre></td></tr></table></figure>

<p>将当前目录下所有 <code>file_1.txt</code> <code>file_200.txt</code> 替换为 <code>text_1.txt</code> <code>text_2.txt</code></p>
<h3 id="修改目录名"><a href="#修改目录名" class="headerlink" title="修改目录名">修改目录名</a></h3><p><code>mv</code> 移动文件</p>
<p><code>rename</code> 批量修改文件名</p>
<h2 id="文件内容查阅"><a href="#文件内容查阅" class="headerlink" title="文件内容查阅">文件内容查阅</a></h2><table>
<thead>
<tr>
<th>命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>cat</code></td>
<td align="left">由第一行开始显示文件内容</td>
</tr>
<tr>
<td><code>tac</code></td>
<td align="left">由最后一行开始显示文件内容</td>
</tr>
<tr>
<td><code>nl</code></td>
<td align="left">输出行号显示</td>
</tr>
<tr>
<td><code>more</code></td>
<td align="left">逐页显示内容</td>
</tr>
<tr>
<td><code>less</code></td>
<td align="left">逐页显示内容还可以向上翻页</td>
</tr>
<tr>
<td><code>head</code></td>
<td align="left">输出头部若干行</td>
</tr>
<tr>
<td><code>tail</code></td>
<td align="left">输出尾部若干行</td>
</tr>
<tr>
<td><code>od</code></td>
<td align="left">以二进制输出文件内容</td>
</tr>
</tbody></table>
<h3 id="cat-由第一行开始显示文件内容"><a href="#cat-由第一行开始显示文件内容" class="headerlink" title="cat 由第一行开始显示文件内容"><code>cat</code> 由第一行开始显示文件内容</a></h3><ul>
<li><code>-n</code> 列出行号，包括空行</li>
</ul>
<h3 id="less-分页显示文件内容"><a href="#less-分页显示文件内容" class="headerlink" title="less 分页显示文件内容"><code>less</code> 分页显示文件内容</a></h3><table>
<thead>
<tr>
<th>按键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>space</td>
<td align="left">向下翻一页</td>
</tr>
<tr>
<td>pagedown</td>
<td align="left">向下翻一页</td>
</tr>
<tr>
<td>pageup</td>
<td align="left">向上翻一页</td>
</tr>
<tr>
<td>&#x2F;[字符串]</td>
<td align="left">向下查询 [字符串]</td>
</tr>
<tr>
<td>?[字符串]</td>
<td align="left">向上查询 [字符串]</td>
</tr>
<tr>
<td>n</td>
<td align="left">向下重复一次查询</td>
</tr>
<tr>
<td>N</td>
<td align="left">向上重复一次查询</td>
</tr>
<tr>
<td>q</td>
<td align="left">离开 less</td>
</tr>
</tbody></table>
<h3 id="tail-显示文件尾部内容"><a href="#tail-显示文件尾部内容" class="headerlink" title="tail 显示文件尾部内容"><code>tail</code> 显示文件尾部内容</a></h3><ul>
<li><code>-n</code> 接数字，显示多少行</li>
<li><code>-f</code> 持续检测文件尾部变动，按下 ctrl-c 结束检测</li>
</ul>
<h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件">编辑文件</a></h2><h3 id="非交互式写入"><a href="#非交互式写入" class="headerlink" title="非交互式写入">非交互式写入</a></h3><p>将字符串写入文件（清空原有内容）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;foo&quot;</span> &gt; file.txt</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="built_in">cat</span> &gt; file.txt &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">bar</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>追加在文件尾部</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;foo&quot;</span> &gt;&gt; file.txt</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; file.txt &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">bar</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h3 id="sed-非交互式编辑"><a href="#sed-非交互式编辑" class="headerlink" title="sed 非交互式编辑"><code>sed</code> 非交互式编辑</a></h3><p>处理前置命令的输出结果</p>
<p><code>(std-out) | sed [options]</code>command&#96;&#96;</p>
<p>处理文件</p>
<p><code>sed [-n] [-i]</code>条件 命令<code>file</code></p>
<ul>
<li><code>-n</code> 忽略没有修改的输出</li>
<li><code>-i</code> 直接修改源文件</li>
<li><code>-r</code> 支持拓展正则表达式</li>
</ul>
<table>
<thead>
<tr>
<th>条件</th>
<th>作用</th>
<th>例子</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>行号 命令</td>
<td>对指定行号的行进行操作</td>
<td><code>3p</code></td>
<td>打印第 3 行</td>
</tr>
<tr>
<td>起始行号,终止行号 命令</td>
<td>对范围中的几行进行操作</td>
<td><code>2,6d</code></td>
<td>删除第 2 行到第 6 行</td>
</tr>
<tr>
<td>行号 1 命令 ; 行号 2 命令; ……</td>
<td>对多行进行操作，没有行号先后区分</td>
<td><code>1p;2d</code></td>
<td>打印第 1 行然后删除第 2 行</td>
</tr>
<tr>
<td>起始行号,+附加的行数 命令</td>
<td>从起始行号开始，再加指定行数，这写范围内的所有行进行操作</td>
<td><code>1,+3p</code></td>
<td>打印 1 到 4 行的内容</td>
</tr>
<tr>
<td>起始行号~步长 命令</td>
<td>从起始行号开始，每隔一个步长的每个行进行操作</td>
<td><code>1~2p</code></td>
<td>打印奇数行的内容</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>2~2p</code></td>
<td>打印偶数行的内容</td>
</tr>
<tr>
<td>&#x2F;正则表达式&#x2F;命令</td>
<td>对匹配正则表达式的行进行操作，注意格式要求</td>
<td><code>/^root&#124;^ftp/d<code></td>
<td>删除文件中包以 root 或者 ftp 开头的行</td>
</tr>
<tr>
<td>$命令</td>
<td>对最后一行进行操作</td>
<td><code>$!d</code></td>
<td>最后一行保留，其他全部干掉</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
<th>用法和例子</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>插入文本</td>
<td>条件 i 内容</td>
<td>在指定的行之前插入文本</td>
</tr>
<tr>
<td>a</td>
<td>追加文本</td>
<td>条件 a 内容</td>
<td>在指定的行之后追加文本</td>
</tr>
<tr>
<td>c</td>
<td>替换行</td>
<td>条件 c 内容</td>
<td>把指定行的内容替换，整行都替换掉</td>
</tr>
<tr>
<td>p</td>
<td>打印</td>
<td>条件 p</td>
<td>打印符合条件的内容，注意如果没有-n，sed 默认打印所有</td>
</tr>
<tr>
<td>!p</td>
<td>打印其他</td>
<td>条件!p</td>
<td>不打印符合条件的内容，打印其他的所有</td>
</tr>
<tr>
<td>=</td>
<td>打印行号</td>
<td><code>$=</code></td>
<td>输出文件一共多少行，<code>$</code>代表最后一行，<code>=</code>代表输出行号</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>/^root/=</code></td>
<td>输出以 root 开头的行号</td>
</tr>
<tr>
<td>d</td>
<td>删除</td>
<td>条件 d</td>
<td>删除符合条件的内容</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>$d</code></td>
<td>删除最后一行</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>/^$/d</code></td>
<td>删除所有空行 ，这是正则与之结合的结果</td>
</tr>
<tr>
<td>!d</td>
<td>保留其他</td>
<td>条件!d</td>
<td>符合条件的不删除，其余删除</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>/^root/!d</code></td>
<td>以 root 开头的保留，其余全部删除</td>
</tr>
<tr>
<td>s</td>
<td>替换</td>
<td>条件 s/被替换内容/替换成什么/第几个</td>
<td>把文件中的每个符合条件的行的第几个匹配替换要求的内容进行替换，如果没有这么多个被替换内容就不替换，不写默认第一个</td>
</tr>
<tr>
<td></td>
<td></td>
<td>条件 s/被替换内容/替换成什么/g</td>
<td>把文件中的每个符合条件的行的所有匹配替换要求的内容进行替换</td>
</tr>
<tr>
<td></td>
<td></td>
<td>条件 s/被替换内容/替换成什么/第几个 p</td>
<td>把文件中的每个符合条件的行的第几个匹配替换要求的内容进行替换，然后显示，如果前面有-n，那么就可以完成替换后只显示替换的部分信息</td>
</tr>
<tr>
<td></td>
<td></td>
<td>条件 s#被替换内容#替换成什么#</td>
<td>s 后面紧跟的符号就是控制替换符号，可以是任意字符，包括空格，字符，数字，但是不建议使用</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>2s/student//2p</code></td>
<td>把文件中第二行中第二个 student 替换成空,然后现实替换的内容，可以用作删除</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>1,5s/^a/#a</code></td>
<td>在 1 到 5 行每个以 a 开头的行的前面加上注释</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>6,10s/^#//</code></td>
<td>把 6 到 10 行中的注释的注释标示去掉，让其成为配置</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>99s9\98\97\99\95\98\99gp</code></td>
<td>这里面替换控制符号是 9，他就算把 99 行所有的 98979 替换成 95989 然后输出</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>1s#^.\&#123;&#39;$n&#39;\&#125;..∗..\&#123;&#39;$m&#39;\&#125;$#\1\4\3\2\5#</code></td>
<td>把第 n 个和倒数第 m 个字符对调</td>
</tr>
<tr>
<td>r</td>
<td>导入文件</td>
<td><code>条件 r 文件 2</code></td>
<td>把文件 2（条件指令中的文件）中的内容添加文件 1（sed 命令后操作的文件）中到满足条件的行下</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>sed -n &quot;2 r a.txt&quot; b.txt</code></td>
<td>把 a.txt 的内容添加到 b.txt 的第二行下</td>
</tr>
<tr>
<td>w</td>
<td>导出文件</td>
<td>条件 w 文件 2</td>
<td>把文件 1（sed 命令后操作的文件）中到满足条件的行另存到文件 2 中</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>sed -n &quot;w a.txt&quot; b.txt</code></td>
<td>把 b.txt 的所有内容保存到 a.txt 中</td>
</tr>
<tr>
<td>H</td>
<td>追加复制</td>
<td>条件 H</td>
<td>把符合条件的行的内容写入复制版中</td>
</tr>
<tr>
<td>h</td>
<td>覆盖复制</td>
<td>条件 h</td>
<td>把符合条件的行的内容覆盖写入复制版中</td>
</tr>
<tr>
<td>G</td>
<td>追加粘贴</td>
<td>条件 G</td>
<td>把复制版中的内容追加到符合条件的行后面，注意也没有回车</td>
</tr>
<tr>
<td>g</td>
<td>覆盖粘贴</td>
<td>条件 g</td>
<td>把复制版中的内容覆盖到符合条件的行后面，注意也没有回车</td>
</tr>
</tbody></table>
<p>注意</p>
<ul>
<li>在 sed 中的空格没有太过严格的要求，条件与命令间有没有空格都可以，不影响使用，</li>
<li>如果想让输出有该行在源文件的位置，可以用 <code>cat -n 文件 | sed [选项] 条件 命令</code><br>但是这时候如果用正则匹配，开头匹配就不能用了，因为内容有了改变，原本再文件中开头的数据前面都有了行号，他们就不是在行首了</li>
<li>删除某一行或多行用命令 <code>条件 d</code> ，如果删除某一行或多行中的某一些字段用 <code>条件 s/目标字段//</code><br>替换某一行的内容用<code>条件 c 内容</code> , 如果替换某一行中的某个字段用<code>条件 s/被替换的部分/替换成什么/</code></li>
<li>s 后面紧跟的符号就是控制替换符号，可以是任意字符，包括空格，字符，数字，但是不建议使用</li>
<li>在 sed 的 s 替换中替换成什么，这个部分，符号基本都没有特殊含义，除了 \ 和被选定作为控制替换符号 ， 如果要向替换成 \ 就要打 \ 如果向换成 \ 就打 \\ 依次类推 ， 如果要替换成控制替换符号如 / 就要打 /<br>例如： sed -n <code>s/[A−Z]/\/\\\1:&quot;</code>/gp` 文件 其作用就是把全文所有的大写字母 变成 /\大写字母:" 然后打印出来</li>
<li>一般 sed 中用 ``限定起来如果要用变量可以把中间的条件命令分开来<code>……</code>$变量<code>……</code> 这样就可以了</li>
</ul>
<!-- ## 权限控制

`chmod`
`chown`
`chgrp`
`setfacl`
`getfacl` -->

<h1 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL">SHELL</a></h1><p><em>已移至 <a href="/2023/shell-script-study-notes/">Shell Script 学习笔记</a></em></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><blockquote>
<ul>
<li>《鸟哥的 Linux 私房菜》</li>
<li><a href="https://vimjc.com/linux-vim-tricks.html">10个高效Linux技巧及Vim命令对比 - Vimjc</a></li>
<li><a href="https://www.jianshu.com/p/de98af781829">linux命令行常用光标移动快捷键</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Git 中使用模版来管理配置文件</title>
    <url>//2016/manage-config-template-in-git/</url>
    <content><![CDATA[<p>不知道你们在开发一个项目中有没有遇到过这种情况: 项目小组一起开发一个项目, 建立了一个配置文件用于项目中, 但是在开发阶段每个人本地数据库都不同, 所以修改数据库连接部分的配置后会将自己修改过的配置上传到 Git 库中, 比如 <code>config.php</code>, 其他人 pull 的时候就会把他自己本地的数据库配置给覆盖了, 像下面这样.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 项目配置文件</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&#x27;project&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>      =&gt; <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;version&#x27;</span>   =&gt; <span class="number">1.0</span>.<span class="number">0</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="string">&#x27;database&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;host&#x27;</span>      =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_name&#x27;</span>   =&gt; <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_user&#x27;</span>   =&gt; <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>首先想到的办法是将配置文件中 ‘database’ 部分移入另外一个文件, 比如 <code>database.php</code>, 然后将这个 <code>database.php</code> 加入到 <code>.gitignore</code> 的列表中.</p>
<p>这样导致的问题就是如果使用 <code>.gitignore</code> 将 <code>config.php</code> 加入到忽略列表中, 然后我们在文档中添加一段说明, 让其他开发者将这段代码放在 ‘config.php’ 同级目录下的 ‘database.php’ 中 ( 请注意, 加入到 <code>.gitignore</code> 中的文件是不接受版本控制的, 也就是说其他开发者下载后是没有 <code>database.php</code> 这个文件的 ).</p>
<p>你可能意识到了, 这样做虽然是一种办法, 但是感觉还是有些麻烦, 我想建立一个类似模版的文件, 开发者只需要获得模版, 而不需要这个文件后续的版本控制. 我从 segmentfault 社区找到了一个 “解决办法”.</p>
<blockquote>
<p>@FatGhosta :
已经维护起来的文件，即使加上了gitignore，也无济于事。
用下面这个命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-index --assume-unchanged logs/*.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p>这样每次提交就不会出现logs下面的文件了</p>
</blockquote>
<p>这条命令会让 <code>logs/*.log</code> 文件们暂时不接受 Git 控制, 是一个伪标记.
我试了一下这个办法, 将默认的 <code>database.php</code> 放置在版本库中, 上传到仓库, 然后执行这条命令, 再修改本地数据配置, 似乎用着很方便, 是我想要的结果.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-index --assume-unchanged config/database.php</span><br></pre></td></tr></table></figure>

<p>但是随着投入使用, 似乎还是有点小麻烦, 这条命令需要每个人在本地都执行一遍, 那还不如直接建立配置文档, 反正都不能直接用, 况且 <code>git update-index --assume-unchanged</code> 这条命令的正确用法也不是这样.</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法">解决办法</a></h2><p>一番摸索之后, 又回到了 segmentfault 社区, 在评论区找到了比较合理的解决办法, 到目前为止, 我也正在这么用.</p>
<p><strong>建立一个 <code>database.php.example</code> 文件, 然后将 <code>database.php</code> 加入到 <code>.gitignore</code> 忽略列表中, push 到公共仓库.</strong></p>
<p>使用时复制一个 <code>database.php.example</code> 文件并改名为 <code>database.php</code>. 这样配置文件就不会重新上传到公共仓库了.</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h2><ul>
<li><a href="https://segmentfault.com/q/1010000000430426">git忽略已经被提交的文件</a> - SegmentFault</li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>React Vite 迁移指南</title>
    <url>//2021/react-vite-migration/</url>
    <content><![CDATA[<p>Vite2 发布有一段时间了，其内部使用了 ESBuild 进行打包，ESBuild 有着相对 Webpack 惊人的打包速度。</p>
<p><img src="https://static.mutoe.com/2021/react-vite-migration/esbuild-benchmark.svg" alt="esbuild benchmark">
<em><a href="https://github.com/evanw/esbuild#why">数据来自 github.com&#x2F;evanw&#x2F;esbuild</a></em></p>
<p>React 用户表示令人羡慕，不过 Vite 野心比较大，不止可以用来开发 Vue 项目，类似 Rollup，Vite2 可以使用插件来支持 React 项目。</p>
<p>这就巧了，手上刚好有一个 React 练习项目，使用 Create React App 创建并且进行过 Eject。接下来我们就用这个 React 项目来练练手吧，享受一下飞一般的构建速度！</p>
<span id="more"></span>

<h1 id="1-移除无用依赖"><a href="#1-移除无用依赖" class="headerlink" title="1. 移除无用依赖">1. 移除无用依赖</a></h1><p>如果你的 React 项目是使用 Create React App 创建出来并且没有 Eject 过，那么步骤是非常简单的。</p>
<p>只需要从 <code>package.json</code> 中移除 <code>react-scripts</code> 即可。</p>
<p>如果你进行过 Eject, 那么你需要移除所有 webpack 相关依赖（xxx-loader, xxx-webpack-plugin），只需保留你需要使用的依赖。</p>
<p>最终剩下的有 lint &#x2F; test &#x2F; 工具类以及业务相关依赖。</p>
<h1 id="2-修改静态文件目录结构"><a href="#2-修改静态文件目录结构" class="headerlink" title="2. 修改静态文件目录结构">2. 修改静态文件目录结构</a></h1><p>将 <code>public/index.html</code> 移至根目录（如果不想也可以之后从 vite 配置），其他文件移至 <code>src/assets/</code> 下, 然后移除 <code>public</code> 目录。</p>
<p>然后在 <code>index.html</code> 中添加以下内容至 div#app 后</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;src/index.tsx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<details>
<summary>点击这里查看修改后的 <code>index.html</code></summary>

<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;src/assets/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#000000&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Web site created using create-react-app&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="keyword">const</span> <span class="variable language_">global</span> = globalThis</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;src/index.tsx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</details>

<p>如过 Eject 过， 还需移除 <code>config</code> <code>scripts</code> 目录。</p>
<h1 id="3-安装-Vite"><a href="#3-安装-Vite" class="headerlink" title="3. 安装 Vite">3. 安装 Vite</a></h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -D vite @vitejs/plugin-react-refresh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">yarn add -D vite @vitejs/plugin-react-refresh</span><br></pre></td></tr></table></figure>

<p>然后修改启动脚本</p>
<figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc &amp;&amp; vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>(如果没有使用 TypeScript，可以去除 <code>tsc</code>)</p>
<p>然后创建 vite 配置文件在项目跟目录下，命名为 <code>vite.config.js</code></p>
<figure class="highlight js"><figcaption><span>vite.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> reactRefresh <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-react-refresh&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;src&#x27;</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [ <span class="title function_">reactRefresh</span>() ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="4-修改-tsconfig-json"><a href="#4-修改-tsconfig-json" class="headerlink" title="4. 修改 tsconfig.json">4. 修改 <code>tsconfig.json</code></a></h1><p><em>如不使用 TypeScript 可跳过此步骤</em></p>
<ul>
<li><code>compilerOptions.target</code> 修改为 <code>ESNext</code></li>
<li><code>compilerOptions.types</code> 增加 <code>vite/client</code></li>
</ul>
<details>
<summary>提供一个示例文件，点击查看</summary>

<figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;DOM&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;DOM.Iterable&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;ESNext&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;vite/client&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;jest-dom&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

</details>

<h1 id="5-启动项目"><a href="#5-启动项目" class="headerlink" title="5. 启动项目">5. 启动项目</a></h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<p>享受飞一般的编译速度吧</p>
<p><img src="https://static.mutoe.com/2021/react-vite-migration/webpack-build-result.png" alt="webpack build result">
<em>Webpack build</em></p>
<p><img src="https://static.mutoe.com/2021/react-vite-migration/vite-build-result.png" alt="vite build result">
<em>Vite build</em></p>
<p>可以看到，迁移到 Vite 后，构建速度由原先的34s 提升到了 12s, 提速 2.8 倍，更舒服的是 dev 模式下 vite 几乎是秒开，而 webpack 还是要等 20s 左右。</p>
<p>根据 ESBuild 给出的 benchmark 报告来看，Webpack5 在构建速度上并没有什么进步反而还在倒退。所以目前来说迁移到 Vite 还可以，值得注意的是 Vite2 兼容大部分 rollup
插件，所以对于迁移还是包容度比较高，不过对于生产环境还是建议大家慎重，可以观察一段时间。</p>
<h1 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意">需要注意</a></h1><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性">浏览器兼容性</a></h2><p><a href="https://vitejs.dev/guide/#browser-support">Vite - Browser Support</a></p>
<p>Vite2 使用了 es6-module 特性，不支持 IE (<a href="https://caniuse.com/es6-module">Caniuse</a>)，如果想支持 IE，可以使用 <code>@vitejs/plugin-legacy</code> 插件</p>
<h2 id="process-env-XXX"><a href="#process-env-XXX" class="headerlink" title="process.env.XXX"><code>process.env.XXX</code></a></h2><p><a href="https://vitejs.dev/guide/env-and-mode.html#env-variables-and-modes">Vite - Env Variables and Modes</a></p>
<p>Vite 中不再使用 <code>process.env.XXX</code> 来读取环境变量，取而代之的是使用</p>
<ul>
<li><code>import.meta.env.MODE</code> 运行环境，与 <code>.env.*</code> 文件相关</li>
<li><code>import.meta.env.BASE_URL</code> 项目部署的子路径</li>
<li><code>import.meta.env.PROD</code> 返回 Boolean，是否运行在 Production</li>
<li><code>import.meta.env.DEV</code> 返回 Boolean，是否运行在 Development</li>
</ul>
<p>项目如果指定了二级路径(PUBLIC_URL), 现在需要在 build 时指定 <code>--base=/sub-path/</code> 参数。<br>在代码中读取 path 时由 <code>process.env.PUBLIC_URL</code> 变更为 <code>import.meta.env.BASE_URL</code></p>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy">Proxy</a></h2><p><a href="https://vitejs.dev/config/#server-proxy">Vite - Config(server.proxy)</a></p>
<p>Vite2 中开发环境代理配置在 <code>vite.config.js</code> 中</p>
<figure class="highlight js"><figcaption><span>vite.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// string shorthand</span></span><br><span class="line">      <span class="string">&#x27;/foo&#x27;</span>: <span class="string">&#x27;http://localhost:4567/foo&#x27;</span>,</span><br><span class="line">      <span class="comment">// with options</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// with RegEx</span></span><br><span class="line">      <span class="string">&#x27;^/fallback/.*&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://jsonplaceholder.typicode.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/fallback/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Jest"><a href="#Jest" class="headerlink" title="Jest">Jest</a></h2><p>迁移到 Vite 后单元测试大批的挂，起因是因为我把 babel 相关内容都移除了，</p>
<p>后来根据 Jest 官方文档进行了一波修复 <a href="https://jestjs.io/docs/en/getting-started#using-typescript">Jest - Using TypeScript</a></p>
<p>需要注意的是，如果是通过 CRA 并 Eject 的项目需要移除 <code>transform</code> 和 <code>transformIgnorePatterns</code> 字段</p>
<p>测试环境下需要打开 <code>@babel/preset-env</code> 的 <code>modules</code> 选项，而开发或构建必须关掉，所以需要 <code>babel.config.js</code> 做一些判断</p>
<details>
<summary>附上 Babel 配置和 Jest 配置, 安装相应依赖安装即可</summary>

<figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">api</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isTest = api.<span class="title function_">env</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">presets</span>: [</span><br><span class="line">      [ <span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class="attr">modules</span>: isTest ? <span class="string">&#x27;auto&#x27;</span> : <span class="literal">false</span> &#125; ],</span><br><span class="line">      <span class="string">&#x27;@babel/preset-typescript&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;@babel/preset-react&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;babel-plugin-transform-import-meta&#x27;</span>, <span class="comment">// 用于处理 import.meta 的问题</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;jest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;roots&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;&lt;rootDir&gt;/src&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;testEnvironment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jsdom&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setupFilesAfterEnv&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;&lt;rootDir&gt;/src/setupTests.ts&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;testMatch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;&lt;rootDir&gt;/src/**/__tests__/**/*.&#123;js,jsx,ts,tsx&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;&lt;rootDir&gt;/src/**/*.&#123;spec,test&#125;.&#123;js,jsx,ts,tsx&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleNameMapper&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;^src/(.*)$&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;rootDir&gt;/src/$1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleFileExtensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;js&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tsx&quot;</span><span class="punctuation">,</span> <span class="string">&quot;json&quot;</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

</details>

<h2 id="global-is-not-defined"><a href="#global-is-not-defined" class="headerlink" title="global is not defined"><code>global is not defined</code></a></h2><p>我的项目中使用了 Draftjs, 在加载页面时报了 <code>global is not defined</code>
错误，在社区找到了可行的<a href="https://github.com/aws-amplify/amplify-js/issues/678#issuecomment-384260863">解决方案</a></p>
<p>在 <code>index.html</code> 的 root div 下方加入以下内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="keyword">const</span> <span class="variable language_">global</span> = globalThis</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="vite-config-ts-中无法使用-import-meta-env-读取环境变量"><a href="#vite-config-ts-中无法使用-import-meta-env-读取环境变量" class="headerlink" title="vite.config.ts 中无法使用 import.meta.env 读取环境变量"><code>vite.config.ts</code> 中无法使用 <code>import.meta.env</code> 读取环境变量</a></h2><p><code>vite.config.ts</code> 在执行时处于编译时，所以可以使用 <code>process.env</code> 获取环境变量。</p>
<p>至于获取启动 Vite 的 mode 和 development&#x2F;production，可以参考 <a href="https://vitejs.dev/config/#conditional-config">https://vitejs.dev/config/#conditional-config</a></p>
<h2 id="Webpack-dev-server-中-proxy-配置了-onProxyRes-在-Vite-中失效"><a href="#Webpack-dev-server-中-proxy-配置了-onProxyRes-在-Vite-中失效" class="headerlink" title="Webpack dev server 中 proxy 配置了 onProxyRes 在 Vite 中失效">Webpack dev server 中 proxy 配置了 onProxyRes 在 Vite 中失效</a></h2><p>Vite proxy 底层时用了 <a href="https://github.com/http-party/node-http-proxy#options">node-http-proxy</a>，新的用法如下</p>
<figure class="highlight ts"><figcaption><span>vite.config.ts</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;http://xxx.com&#x27;</span>,</span><br><span class="line">      <span class="attr">configure</span>: <span class="function"><span class="params">proxy</span> =&gt;</span> &#123;</span><br><span class="line">        proxy.<span class="title function_">on</span>(<span class="string">&#x27;proxyRes&#x27;</span>, <span class="function">(<span class="params">proxyRes, req, res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">          res.<span class="title function_">send</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>给 NAS 上的应用配置域名并去除端口号</title>
    <url>//2024/setup-domain-and-remove-port-for-nas-app/</url>
    <content><![CDATA[<p>在上一篇文章 <a href="/2024/deploy-gitea-on-nas/">在 NAS 上部署 Gitea</a> 中，我教大家如何在内网中部署 Gitea 服务。但是，我们在内网中访问 Gitea 时，需要使用 <code>http://192.168.5.5:4000</code> 这样的地址，这样的地址不仅不美观，而且还需要记住端口号，不方便，甚至它还不是 HTTPS 的，也不安全。</p>
<p>那有没有什么办法可以让我们在内网中访问 Gitea 时，使用 <code>https://gitea.lan</code> 这样的地址呢？答案是肯定的，我们可以使用 DNS 和反向代理来实现这个功能。</p>
<h1 id="1-什么是-DNS"><a href="#1-什么是-DNS" class="headerlink" title="1. 什么是 DNS">1. 什么是 DNS</a></h1><p>DNS 是 Domain Name System 的缩写，即域名系统。它的作用是将域名解析为 IP 地址，这样我们就可以通过域名访问网站了。</p>
<p>我们首先要做的一件事就是在 DNS 服务器中添加一条记录，将 <code>gitea.lan</code> 解析到 <code>192.168.5.5</code> 这个 IP 地址上。这样当我们访问这个域名时，就会将请求转发到我们的 NAS 服务器上对应的端口了。 </p>
<p>DNS 服务器是一个树形结构，当你输入一个域名时，DNS 服务器会从最底层的节点向上查找，直到根节点，然后返回对应的 IP 地址。每个节点都缓存有一堆域名和与其对应的 IP 地址。</p>
<p>例如，当我们访问 <code>https://gitea.lan</code> 时，DNS 服务器会：</p>
<ol>
<li>先从浏览器中尝试获取缓存的 IP 地址</li>
<li>如果没有缓存，就会向本机的 DNS 服务器发起请求尝试获取缓存的 IP 地址</li>
<li>如果本机的 DNS 服务器没有缓存，就会尝试向路由器发起请求尝试获取缓存的 IP 地址</li>
<li>如果路由器没有缓存，就会向上级 DNS 服务器（通常是运营商，如中国电信）发起请求尝试获取缓存的 IP 地址</li>
<li>… 以此类推，直到根 DNS 节点</li>
</ol>
<span id="more"></span>

<h1 id="2-DNS-服务器的配置"><a href="#2-DNS-服务器的配置" class="headerlink" title="2. DNS 服务器的配置">2. DNS 服务器的配置</a></h1><p>聪明的你一定已经发现了，如果我们的 Gitea 服务部署在内网的 NAS 上，那么我们的 DNS 服务器就应该是路由器中，是可以被我们控制并且可以影响到内网中所有设备的。</p>
<p>一般家庭网络中的路由器都会支持 DNS 解析，你可以在网上查找你路由器的型号，然后搜索 <code>型号 DNS</code>，就可以找到你的路由器的 DNS 配置方法了。</p>
<p>这里我以我的 OpenWRT 软路由为例，介绍一下 DNS 的配置方法。</p>
<p><img src="https://static.mutoe.com/2024/setup-domain-and-remove-port-for-nas-app/set-dns-for-gitea.png"></p>
<p>对，就是这么简单。</p>
<p>访问 <code>http://gitea.lan</code>，发现可以正常路由到 NAS 的 80 端口了，于是我们可以访问 <code>http://gitea.lan:4000</code>，OK，Gitea 服务也也能正常访问了。接下来我们就要解决端口的问题了。</p>
<h1 id="3-什么是反向代理"><a href="#3-什么是反向代理" class="headerlink" title="3. 什么是反向代理">3. 什么是反向代理</a></h1><p>我们知道，服务器中每个端口只能被一个应用程序监听，如果我们想要在同一个服务器上部署多个应用程序，就需要使用不同的端口。但是，我们在访问网站时，如果不加端口号，那么浏览器会默认使用 80 端口（HTTPS 是 443 端口），这样就会导致我们无法访问到我们想要的应用程序。</p>
<p>所以，我们需要一个工具，它可以将我们的请求转发到不同的端口，这就是反向代理。我们将反向代理部署在 80 和 443 端口，然后根据请求的域名，将请求转发到不同的端口，这样我们就可以使用域名访问不同的应用程序了。</p>
<h1 id="4-配置反向代理"><a href="#4-配置反向代理" class="headerlink" title="4. 配置反向代理">4. 配置反向代理</a></h1><p>这里我使用的是群辉自带的反向代理工具，它的配置非常简单，只需要在群辉的控制面板中打开反向代理功能，然后添加一条规则即可。</p>
<p>在 <code>控制面板</code> -&gt; <code>登陆门户</code> -&gt; <code>高级</code> -&gt; <code>反向代理服务器</code> 中添加一条记录：</p>
<p>将来自其他机器的 <code>https://gitea.lan</code> 的请求转发到 <code>http://localhost:4000</code> 上 </p>
<p><img src="https://static.mutoe.com/2024/setup-domain-and-remove-port-for-nas-app/set-reverse-proxy-for-gitea.png"></p>
<blockquote>
<p>如果勾选 <code>启用 HSTS</code>，那么浏览器会强制使用 HTTPS 访问，但是这样会导致我们无法使用 HTTP 访问，所以看你的具体情况来决定是否勾选。</p>
</blockquote>
<p>以此类推，你可以增加更多的规则，将不同的域名转发到不同的端口，这样就可以在内网中使用域名访问不同的应用程序了。</p>
<h1 id="5-证书问题"><a href="#5-证书问题" class="headerlink" title="5. 证书问题">5. 证书问题</a></h1><p>如果你使用的是群辉自带的反向代理工具，那么你不需要担心证书的问题，因为群辉会自动为你生成证书。而我们只需要在本机信任该证书即可。不同浏览器和操作系统信任自签证书的方法不同，你可以自行搜索或问 GPT。（搜索关键字：”chrome 如何信任自签证书”）</p>
<h1 id="6-群辉反向代理的问题"><a href="#6-群辉反向代理的问题" class="headerlink" title="6. 群辉反向代理的问题">6. 群辉反向代理的问题</a></h1><p>接下来遇到的问题是，每当我访问 <code>https://gitea.lan</code> 时，总会被自动重定向到 <code>https://gitea.lan:5001</code>，这是群辉的默认 HTTPS 端口。找遍了所有可能的设置，终究无果。</p>
<p>于是我想探寻到底是哪里设置的跳转，于是我在内网的另一台电脑上使用 <code>curl</code> 命令访问 <code>https://gitea.lan</code> 并且不带 <code>-L</code> 参数，报错了，告诉我当前连接的证书不安全，没关系我们相信群辉的证书，忽略他继续访问。</p>
<blockquote>
<p>忽略证书错误的命令是 <code>curl -k</code>，是 <code>curl --insecure</code> 的简写。</p>
</blockquote>
<p>结果发现返回的是一个静态页面，内容是一个重定向。</p>
<blockquote>
<p><code>curl -L</code> 是 <code>curl --location</code> 的简写，表示跟随重定向。如果不带这个参数，<code>curl</code> 会返回重定向的地址，而不是重定向后的内容。</p>
</blockquote>
<p>于是我前往群辉的 nginx 配置文件 <code>/etc/nginx/nginx.conf</code>，发现了这样一段配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> default_server ssl;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> default_server ssl;</span><br><span class="line">    <span class="attribute">server_name</span> _; </span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">etag</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">root</span> /var/tmp/nginx/html;</span><br><span class="line">        <span class="attribute">rewrite</span> (.*) /<span class="literal">redirect</span>.html <span class="literal">break</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>查看 <code>var/tmp/nginx/html/redirect.html</code>，发现这里的内容和我在 <code>curl</code> 中看到的一致，OK，找到问题了。</p>
<blockquote>
<p><strong>强烈建议修改 nginx 配置文件前进行备份</strong>，以免出现问题后找不到问题然后不得不重新安装系统的情况。</p>
</blockquote>
<p>注释调这段内容，重启 nginx，调用 <code>curl https://gitea.lan</code>，返回一段 Gitea 的 HTML 代码，问题解决！</p>
<blockquote>
<p>重启 nginx 的命令是 <code>nginx -s reload</code>。</p>
</blockquote>
<p><img src="https://static.mutoe.com/2024/setup-domain-and-remove-port-for-nas-app/succeed-for-https-gitea.png"></p>
<h1 id="7-设置-Gitea-SSH-端口"><a href="#7-设置-Gitea-SSH-端口" class="headerlink" title="7. 设置 Gitea SSH 端口">7. 设置 Gitea SSH 端口</a></h1><p>等等，我们还有一个问题没有解决，那就是 SSH 端口的问题。我们在访问 Gitea 时，需要使用 <code>https://gitea.lan</code>，但是在使用 SSH 克隆仓库时，还是需要使用 <code>tcp://git@gitea:4022</code> 这样的地址，这样不太方便。</p>
<p>在客户端，我们可以使用 SSH 的别名来解决这个问题，只需要在 <code>~/.ssh/config</code> 文件中添加一条记录即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host gitea</span><br><span class="line">    HostName gitea.lan</span><br><span class="line">    Port 4022</span><br><span class="line">    User git</span><br></pre></td></tr></table></figure>

<p>这样我们就可以使用 <code>git clone gitea:username/repo.git</code> 来克隆仓库了。</p>
<p>但是，我们有没有什么办法来转发 SSH 的请求呢？答案是肯定的，我们可以修改 container 的配置，将容器的 22 端口映射到 NAS 的 22 端口，这样我们就可以使用 <code>git clone git@gitea:username/repo.git</code> 来克隆仓库了。</p>
<p>如果你不想重启容器，我们还可以使用 nginx 的 stream 模块来实现这个功能。</p>
<p>在 <code>/etc/nginx/nginx.conf</code> 中添加一段配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">  <span class="section">upstream</span> gitea &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">4022</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">22</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> gitea;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意的是，这里将服务器中的 22 端口映射到了 4022 端口，并不是反向代理，而是 nginx 的端口转发功能。</p>
</blockquote>
<p>测试一下 Gitea 的 SSH 服务是否正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ssh -T git@gitea.lan</span></span><br><span class="line"></span><br><span class="line">Hi there, mutoe! You&#x27;ve successfully authenticated with the key named 1password Gitea SSH Key, but Gitea does not provide shell access.</span><br><span class="line">If this is unexpected, please log in with password and setup Gitea under another user. </span><br></pre></td></tr></table></figure>

<p>OK，SSH 服务一切正常。 </p>
<p>如果这里测试失败，那么可能是 SSH 端口冲突了。如果你的 NAS 的默认 SSH 端口是 22 端口，那么你需要修改 NAS 的 SSH 端口为其他端口，否则会导致端口冲突。</p>
<h1 id="8-SSH-端口冲突问题"><a href="#8-SSH-端口冲突问题" class="headerlink" title="8. SSH 端口冲突问题">8. SSH 端口冲突问题</a></h1><p>那有没有办法通过反向代理的方式来让不同域名的22端口转发到不同的端口去呢？</p>
<blockquote>
<p>我: nginx中，是否可以通过反向代理的方式来让不同域名的22端口转发到不同的端口去？</p>
<p>GPT4: 首先，我要澄清一点：nginx 是一个强大的 web 服务器，被广泛用于负载平衡和反向代理 HTTP 和 HTTPS 流量。但是，nginx 本身并不支持 TCP（例如 SSH 的22端口）或 UDP 流量的代理。</p>
<p>相反，您可以考虑使用其他专门为此设计的工具，例如 HAProxy 或者 nginx 的商业版本 - nginx plus。这些工具都有内置的 TCP 和 UDP负载平衡功能。</p>
<p>至于你的问题，通过 TCP 负载均衡器，是可以实现根据不同来源（这个来源可以是域名，也可以是其他的标识）的 22 端口流量，转发到后端的不同端口。关于怎么配置，会因为具体工具而异，一般来说会涉及到负载均衡规则的配置。</p>
</blockquote>
<p>这个问题的根本原因是 TCP 位于 OSI 模型的第四层，而 HTTP 位于 OSI 模型的第七层，nginx 的反向代理功能只能处理第七层的 HTTP 流量，而不能处理第四层的 TCP 流量。所以，如果你的应用程序是基于 TCP 的，那么你需要考虑使用别的工具来处理 TCP 流量。</p>
<p>我的处理方案是，将 NAS 的 22 端口让给 Gitea SSH 使用，而 NAS 自身的 SSH 改用别的端口，有以下这么几个原因：</p>
<ol>
<li>我的 NAS 本身就是一个 Linux 服务器，对于 Linux 服务器来说，为了安全起见，建议修改默认的 SSH 端口，这样可以避免被黑客扫描到默认的 SSH 端口，从而增加安全性。</li>
<li>Git SSH 的使用频率和便利程度会高于 NAS 的 SSH，所以将 Gitea SSH 设置为默认的 22，可以减少使用时的心智负担。</li>
</ol>
<blockquote>
<p>修改 NAS 的 SSH 端口的地方在 <code>控制面板</code> -&gt; <code>终端机和 SNMP</code> -&gt; <code>启动 SSH 功能</code> -&gt; <code>端口</code> 中。</p>
</blockquote>
<p>而登陆 SSH 也可以通过配置 SSH 的别名来解决，只需要在 <code>~/.ssh/config</code> 文件中添加一条记录即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host nas</span><br><span class="line">    HostName ds.lan</span><br><span class="line">    Port 10022</span><br><span class="line">    User mutoe</span><br></pre></td></tr></table></figure>

<p>这样我们就可以使用 <code>ssh nas</code> 来登陆 NAS 了。</p>
<h1 id="9-关于外网访问"><a href="#9-关于外网访问" class="headerlink" title="9. 关于外网访问">9. 关于外网访问</a></h1><p>好了，今天的教程就到此为止，如果你希望在外网可以访问，我不建议你开放任何服务端口对外网，尤其是有 NAS 的情况，一旦被黑客入侵，后果不堪设想 😅</p>
<p>正确的办法是设置一个 VPN 服务器，然后通过 VPN 来访问内网中的服务。这样不仅安全，而且还可以访问内网中的所有服务。</p>
<p>至与如何配置一个 VPN 服务器，请参考 <a href="/2021/home-network-infra-notes/#%E5%AE%89%E5%85%A8">家庭网络折腾记#安全</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><p>本期没有任何参考资料，全是通过我的需求 + ChatGPT 的帮助，再加上自己的摸索完成的，ChatGPT，NB！</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>家庭网络</tag>
        <tag>NAS</tag>
        <tag>群辉</tag>
        <tag>Openwrt</tag>
        <tag>DNS</tag>
        <tag>反向代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell Script 学习笔记</title>
    <url>//2023/shell-script-study-notes/</url>
    <content><![CDATA[<p>这里记录了一些个人学习 Shell Script 时遇到的一些问题, 可以作为避免踩坑和速查手册. 如有疑问欢迎留言.</p>
<span id="more"></span>

<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量">环境变量</a></h2><table>
<thead>
<tr>
<th>命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>printenv</code></td>
<td align="left">打印所有环境变量</td>
</tr>
</tbody></table>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出">输出</a></h2><table>
<thead>
<tr>
<th>命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>echo</code></td>
<td align="left">输出</td>
</tr>
</tbody></table>
<h3 id="echo"><a href="#echo" class="headerlink" title="echo"><code>echo</code></a></h3><h2 id="输入"><a href="#输入" class="headerlink" title="输入">输入</a></h2><h3 id="输入参数"><a href="#输入参数" class="headerlink" title="输入参数">输入参数</a></h3><p>读取参数时，使用 <code>$0</code>..<code>$9</code> <code>$&#123;10&#125;</code> 等获取参数</p>
<p>其中 <code>$0</code> 是程序名称</p>
<figure class="highlight bash"><figcaption><span>add.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line">name=`<span class="built_in">basename</span> <span class="variable">$0</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;the cmd is <span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;the cmd basename is <span class="variable">$name</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The #1 param is <span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The #2 param is <span class="variable">$2</span>&quot;</span></span><br><span class="line"></span><br><span class="line">SUM=$[ <span class="variable">$1</span> + <span class="variable">$2</span> ]</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The result is <span class="variable">$SUM</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ~ chmod +x add.sh</span><br><span class="line">➜  ~ ./add.sh 1 2</span><br><span class="line">the cmd is ./add.sh</span><br><span class="line">the cmd basename is add.sh</span><br><span class="line">The #1 param is 1</span><br><span class="line">The #2 param is 2</span><br><span class="line">The result is 3</span><br></pre></td></tr></table></figure>

<h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量">特殊变量</a></h3><p>还有几个特殊的变量可供使用</p>
<ul>
<li><code>echo $#</code> 输出参数的个数</li>
<li><code>echo $*</code> 输出参数变量</li>
<li><code>echo $@</code> 输出参数列表（可用 for in 遍历）</li>
</ul>
<p>下面的例子来判断变量参数是否符合要求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 2 ] <span class="comment"># $#获取输入个数，选项-lt表示less than</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;please input at least 2 param&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="shift-移动参数位置"><a href="#shift-移动参数位置" class="headerlink" title="shift 移动参数位置"><code>shift</code> 移动参数位置</a></h3><p>使用 <code>shift</code> 命令将参数队列的第一个参数移出 所有参数位置向前移动</p>
<figure class="highlight bash"><figcaption><span>sum.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line">result=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]               <span class="comment"># 通过循环，每次读取$1位置参数</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  result=$[ <span class="variable">$result</span> + <span class="variable">$1</span> ]    <span class="comment"># $1位置参数与原参数和累加</span></span><br><span class="line">  <span class="built_in">shift</span>                       <span class="comment"># 把$2位置参数向前移动到$1，原$1位置参数不可用</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sum of result is <span class="variable">$result</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="read-读取键盘输入"><a href="#read-读取键盘输入" class="headerlink" title="read 读取键盘输入"><code>read</code> 读取键盘输入</a></h3><p><code>read [-s] [-t timeout] [-n num] [-p prompt] [variables...]</code></p>
<ul>
<li><code>-p prompt</code> 提示语句</li>
<li><code>-s</code> 静默输入(例如输入密码)</li>
<li><code>-t timeout</code> 设置输入超时时间，如果超时则以非 0 状态退出</li>
<li><code>-n num</code> 限制输入字数，如果设置为一则只需要按下一个字母，无需按回车键</li>
<li><code>variabels</code> 变量名 可以制定多个， 如果不指定会将输入将存入<code>REPLY</code>变量中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Enter your name:&quot;</span>                 <span class="comment"># 参数-n的作用是不换行，echo默认换行</span></span><br><span class="line"><span class="built_in">read</span> name                                  <span class="comment"># 把输入放入变量name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello <span class="variable">$name</span>,welcome to my program&quot;</span>   <span class="comment"># 显示输入信息</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>

<p>交互式菜单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Please Select:</span></span><br><span class="line"><span class="string">1.Display System Information</span></span><br><span class="line"><span class="string">2.Display Disk Space</span></span><br><span class="line"><span class="string">3.Display Home Space Utilization</span></span><br><span class="line"><span class="string">0.Quit&quot;</span></span><br><span class="line"><span class="built_in">read</span> -p -n 1 <span class="string">&quot;Enter selection [0-3] &gt;&quot;</span> num</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$num</span> =~ ^[0-3]$ ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="keyword">if</span> [[ <span class="variable">$num</span> == 0 ]]; <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;Program terminated&quot;</span></span><br><span class="line">     <span class="built_in">exit</span>;</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [[ <span class="variable">$num</span> == 1 ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hostname :<span class="variable">$HOSTNAME</span>&quot;</span></span><br><span class="line">    <span class="built_in">uptime</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [[ <span class="variable">$num</span> == 2 ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">df</span> -h</span><br><span class="line">    <span class="built_in">exit</span>;</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [[ <span class="variable">$num</span> == 3 ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [[ $(<span class="built_in">id</span> -u) -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Home Space Utilization(All Users)&quot;</span></span><br><span class="line">      <span class="built_in">du</span> -sh /home/*</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Home Space Utilization(<span class="variable">$USER</span>)&quot;</span></span><br><span class="line">      <span class="built_in">du</span> -sh <span class="variable">$HOME</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;Invalid entry.&quot;</span> &gt;&amp;2</span><br><span class="line"> <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="自动输入"><a href="#自动输入" class="headerlink" title="自动输入">自动输入</a></h3><p>我们在写 shell 脚本时会遇到需要进行手动输入的命令，如 <code>sudo</code> <code>passwd</code> 等需要等待输入密码，在 shell 脚本中如何进行输入呢？</p>
<p>以 <code>passwd username</code> 为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">passwd username &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">123456</span></span><br><span class="line"><span class="string">123456</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h2 id="条件"><a href="#条件" class="headerlink" title="条件">条件</a></h2><h3 id="并且-（AND）"><a href="#并且-（AND）" class="headerlink" title="并且 （AND）">并且 （AND）</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ c1 -a c2 ]; then</span><br><span class="line">...</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ c1 ] &amp;&amp; [ c2 ]; then</span><br><span class="line">...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="或-（OR）"><a href="#或-（OR）" class="headerlink" title="或 （OR）">或 （OR）</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ c1 -o c2 ]; then</span><br><span class="line">...</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ c1 ] || [ c2 ]; then</span><br><span class="line">...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>


<h3 id="利用-test-命令进行判断"><a href="#利用-test-命令进行判断" class="headerlink" title="利用 test 命令进行判断">利用 <code>test</code> 命令进行判断</a></h3><table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>-e file</code></td>
<td>判断 file 是否存在 (exist)</td>
</tr>
<tr>
<td><code>-f file</code></td>
<td>判断 file 是否存在并且是 file</td>
</tr>
<tr>
<td><code>-d file</code></td>
<td>判断 file 是否存在并且是 directory</td>
</tr>
<tr>
<td><code>-S file</code></td>
<td>判断 file 是否存在并且是 socket</td>
</tr>
<tr>
<td><code>-L file</code></td>
<td>判断 file 是否存在并且是 symbolic link</td>
</tr>
<tr>
<td><code>-r file</code></td>
<td>判断 file 是否存在并且可读 (readable)</td>
</tr>
<tr>
<td><code>-w file</code></td>
<td>判断 file 是否存在并且可写 (writeable)</td>
</tr>
<tr>
<td><code>-x file</code></td>
<td>判断 file 是否存在并且可执行 (executable)</td>
</tr>
<tr>
<td><code>-s file</code></td>
<td>判断 file 是否存在并且文件大小 (size) 非零</td>
</tr>
<tr>
<td><code>file1 -nt file2</code></td>
<td>判断 file1 存在并且比 file2 新 (newer than)</td>
</tr>
<tr>
<td><code>file1 -ot file2</code></td>
<td>判断 file1 存在并且比 file2 旧 (older than)</td>
</tr>
<tr>
<td><code>file1 -ef file2</code></td>
<td>判断 file1 和 file 2存在并且是同一个文件 (exist &amp; same file)</td>
</tr>
<tr>
<td><code>string</code></td>
<td>判断 string 是空字符串</td>
</tr>
<tr>
<td><code>-n string</code></td>
<td>判断 string 长度为非零 (non-zero)</td>
</tr>
<tr>
<td><code>-z string</code></td>
<td>判断 string 长度为零 (zero)</td>
</tr>
<tr>
<td><code>s1 = s2</code></td>
<td>判断字符串 s1 和 s2 相同</td>
</tr>
<tr>
<td><code>s1 != s2</code></td>
<td>判断字符串 s1 和 s2 不同</td>
</tr>
<tr>
<td><code>s1 &lt; s2</code> &#x2F; <code>s1 &gt; s2</code></td>
<td>判断字符串 s1 的二进制值比 s2 小 &#x2F; 大</td>
</tr>
<tr>
<td><code>! expiression</code></td>
<td>取表达式的非值</td>
</tr>
<tr>
<td><code>expiression1 -a expression2</code></td>
<td>判断表达式1 <strong>和(and)</strong> 表达式2 都为真</td>
</tr>
<tr>
<td><code>expiression1 -o expression2</code></td>
<td>判断表达式1 <strong>或(or)</strong> 表达式2 为真</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>如果文件是一个符号链接 (symbolic link)，它将会指向链接的真实文件进行判断，除非指定了 <code>-L</code> 或 <code>-n</code> 参数.</li>
<li>当 <code>-a</code> 和 <code>-o</code> 同时使用时，<code>-a</code> 的运算优先级比 <code>-o</code> 高.</li>
</ol>
<h3 id="利用-判断符号进行判断"><a href="#利用-判断符号进行判断" class="headerlink" title="利用 [] 判断符号进行判断">利用 <code>[]</code> 判断符号进行判断</a></h3><ul>
<li>判读符号 <code>[]</code> 的使用方法与 <code>test</code> 命令一致。</li>
<li><code>[]</code> 方括号内的每个元件都要以空格分隔，这包括方括号本身。<blockquote>
<p><code>[ -z foo ]</code> <code>[ &quot;$name&quot; == &quot;foo bar&quot; ]</code></p>
</blockquote>
</li>
<li>如果需要引入变量，变量最好使用双引号包裹，否则变量中出现的空格将会作为判断符号的元件被分隔。<blockquote>
<p>试着体会 <code>[ -z &quot;foo bar&quot; ]</code> 和 <code>[ -z foo bar ]</code> 的区别</p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ -z abc -a -w file] # =&gt; true</span><br><span class="line">[ (-z abc) -a (-w file)] # =&gt; true</span><br><span class="line">[ -z abc ] &amp;&amp; [ -w file] # =&gt; false</span><br></pre></td></tr></table></figure>

<h3 id="利用-command-命令进行命令判断"><a href="#利用-command-命令进行命令判断" class="headerlink" title="利用 command 命令进行命令判断">利用 <code>command</code> 命令进行命令判断</a></h3><table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>-e</code></td>
<td>判断文件是否存在</td>
</tr>
<tr>
<td><code>-v</code></td>
<td>判断命令是否存在</td>
</tr>
</tbody></table>
<h3 id="判断语句-if-if-if-有什么区别？"><a href="#判断语句-if-if-if-有什么区别？" class="headerlink" title="判断语句 if, if [ ], if [[ ]] 有什么区别？">判断语句 <code>if</code>, <code>if [ ]</code>, <code>if [[ ]]</code> 有什么区别？</a></h3><ol>
<li><p><code>if</code>
这是shell的基本形式,要求命令返回0表示真,非0表示假,比较简单。例如:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if cmd; then</span><br><span class="line">  echo &quot;True&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li><p><code>if [ ]</code> 这是shell的扩展形式,使用 [] 进行条件测试。例如:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ $a -eq $b ]; then</span><br><span class="line">  echo &quot;a 等于 b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li><p><code>if [[ ]]</code> 这是shell的新形式,使用 [[ ]] 进行条件测试。它有以下优点:</p>
<ul>
<li>支持正则表达式匹配</li>
<li>不需要在条件表达式内部加空格</li>
<li>支持 &amp;&amp; 和 || 逻辑操作</li>
<li>支持字符串比较</li>
</ul>
<p>例如:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [[ $a = &quot;b&quot; ]]; then</span><br><span class="line">  echo &quot;a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $a -eq $b ]] &amp;&amp; [[ $c -gt $d ]]; then</span><br><span class="line">  echo &quot;条件满足&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
</ol>
<p>综上,如果shell版本支持,推荐使用 <code>if [[ ]]</code> 形式进行条件判断,它有更多特性和优点。<code>if [ ]</code> 形式虽然也可用,但需要注意内部空格问题。<code>if</code> 命令形式最简单,但实用性较差。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数">函数</a></h2><p>函数的定义格式如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[function] funname [()] &#123;</span><br><span class="line">  action;</span><br><span class="line">  [return int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function fn &#123;</span><br><span class="line">  echo &quot;hello world!&quot;</span><br><span class="line">  return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">say_hi() &#123;</span><br><span class="line">  echo $1</span><br><span class="line">&#125;</span><br><span class="line">say_hi jack</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>$1</code> <code>$10</code> <code>$&#123;11&#125;</code></td>
<td>第 <code>1</code>, <code>10</code>, <code>11</code> 个参数</td>
</tr>
<tr>
<td><code>$#</code></td>
<td>传递到脚本或函数的参数个数</td>
</tr>
<tr>
<td><code>$*</code></td>
<td>以一个单字符串显示所有向脚本传递的参数</td>
</tr>
<tr>
<td><code>$@</code></td>
<td>与 <code>$*</code> 相同，但是使用时加引号，并在引号中返回每个参数。</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>脚本运行的当前进程 ID 号</td>
</tr>
<tr>
<td><code>$!</code></td>
<td>后台运行的最后一个进程的 ID 号</td>
</tr>
<tr>
<td><code>$-</code></td>
<td>显示 Shell 使用的当前选项，与 <code>set</code> 命令功能相同。</td>
</tr>
<tr>
<td><code>$?</code></td>
<td>显示最后命令的退出状态。<code>0</code> 表示没有错误，其他任何值表明有错误。</td>
</tr>
</tbody></table>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧">小技巧</a></h2><h3 id="获取当前-Git-分支名"><a href="#获取当前-Git-分支名" class="headerlink" title="获取当前 Git 分支名">获取当前 Git 分支名</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前 ref 名</span></span><br><span class="line">ref_name=$(git symbolic-ref -q HEAD) # =&gt; refs/heads/master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">利用替换命令</span></span><br><span class="line">branch_name=$&#123;ref_name##refs/heads/&#125; # =&gt; master</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h2><blockquote>
<ul>
<li><a href="https://so.csdn.net/so/search/s.do?q=Shell%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86&t=blog&u=yjk13703623757">Shell 编程中的用户输入处理 - Locutus</a></li>
<li><a href="https://blog.csdn.net/Yu1543376365/article/details/82717257">Linux 的 Shell 脚本——day5——sed 非交互文本编辑 - Lu-Yu</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Bash</tag>
        <tag>Shell</tag>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title>testcafe -- 一个基于 nodejs 自动化测试框架</title>
    <url>//2018/testcafe/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介">简介</a></h1><p>testcafe (<a href="https://devexpress.github.io/testcafe/">官网</a>) 是一个基于 nodejs 的自动化测试框架，优点就先不多说了，我们直接进入正题！</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装">安装</a></h1><p>testcafe 是一个 npm 包，它可以使用 npm 或 yarn 包管理器进行安装，这里我们使用 yarn 进行安装（因为它很快）</p>
<blockquote>
<p>如果你的机器上没有安装 yarn，那么你可以使用 npm 来安装 yarn 😊
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>在命令行中运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add testcafe</span><br></pre></td></tr></table></figure>

<p>这样， testcafe 就安装在你本机上啦</p>
<h1 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀">小试牛刀</a></h1><h2 id="创建一个测试项目"><a href="#创建一个测试项目" class="headerlink" title="创建一个测试项目">创建一个测试项目</a></h2><p>我们新建一个目录，用于练习我们的自动化测试框架 testcafe</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先切换到你用于管理 web 项目的根目录，我本机是 &quot;~/www&quot;</span></span><br><span class="line"><span class="built_in">cd</span> ~/www</span><br><span class="line"><span class="built_in">mkdir</span> testcafe &amp;&amp; <span class="built_in">cd</span> testcafe</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="编写第一个测试脚本"><a href="#编写第一个测试脚本" class="headerlink" title="编写第一个测试脚本">编写第一个测试脚本</a></h2><p>然后新建一个名为 <code>myFirstTestcase.js</code> 文件，用于编写我们的自动化测试脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim myFirstTestcase.js <span class="comment"># 用 vim 打开这个文件（如果文件不存在就创建它）</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你安装了 vscode，你还可以使用 <code>code myFirstTestcase.js</code> 来创建并编辑它
<em>需要在 vscode 的控制它中输入 <code>install command</code> 来启用 <code>code</code> 命令</em></p>
</blockquote>
<p>将以下内容粘贴到 <code>myFirstTestcase.js</code> 中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 导包语法</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个 fixture 测试项目</span></span><br><span class="line"><span class="title function_">fixture</span>(<span class="string">&#x27;Getting Started&#x27;</span>)</span><br><span class="line">  <span class="comment">// 打开一个 web 页面用于接下来的测试</span></span><br><span class="line">  .<span class="title function_">page</span>(<span class="string">&#x27;http://devexpress.github.io/testcafe/example&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个测试用例</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My first test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="comment">// Test code</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>到这里，我们的第一个 test script 就写好了，接下来我们来运行它看看</p>
<h2 id="运行测试脚本"><a href="#运行测试脚本" class="headerlink" title="运行测试脚本">运行测试脚本</a></h2><p>我们回到命令行中，执行以下命令来运行一个测试脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">testcafe chrome myFirstTestcase.js</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个命令中，</p>
<ul>
<li><code>testcafe</code> 是我们使用包管理工具全局安装的依赖，testcafe 是它的可执行程序</li>
<li><code>chrome</code> 是我们的测试平台，安装在本机的浏览器，也可以是 <code>safari</code> <code>firefox</code> 等</li>
<li><code>myFirstTestcase.js</code> 是我们编写的测试脚本</li>
</ul>
</blockquote>
<p>稍等片刻，我们的浏览器就会被自动打开然后运行测试脚本，最后浏览器被自动关闭，在终端上留下了测试结果。</p>
<p><img src="//static.mutoe.com/2018/testcafe/test-report.png" alt="test report"></p>
<h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码">编写测试代码</a></h2><p>刚才我们的测试脚本只是简单的打开了一个页面，它并没有执行任何动作。</p>
<blockquote>
<p>在接下来的几个例子中，你可以打开测试目标网站 <a href="http://devexpress.github.io/testcafe/example">http://devexpress.github.io/testcafe/example</a> 这个页面，然后打开控制台，观察其 DOM 结构，并试着模拟脚本的操作，以便方便的理解脚本的内容。</p>
</blockquote>
<h3 id="在页面上执行操作"><a href="#在页面上执行操作" class="headerlink" title="在页面上执行操作">在页面上执行操作</a></h3><p>接下来我们简单的写两个动作，用来对页面进行操作。<br>打开 <code>myFirstTestcase.js</code>，在 <code>test</code> 方法的回调函数中添加以下内容</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  test(&#x27;My first test&#x27;, async t =&gt; &#123;</span><br><span class="line"><span class="deletion">-   // Test code</span></span><br><span class="line"><span class="addition">+   await t</span></span><br><span class="line"><span class="addition">+     .typeText(&#x27;#developer-name&#x27;, &#x27;John Smith&#x27;)</span></span><br><span class="line"><span class="addition">+     .click(&#x27;#submit-button&#x27;);</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>t 是我们的测试用例的控制器，它又很多方法，在上面的例子中，我们调用了它的 <code>typeText</code> 和 <code>click</code> 两个方法，其中</p>
<ul>
<li><code>typeText</code> 方法用来键入文本，它接受两个参数：第一个参数是 selector 选择器（它的语法类似 jQuery 选择器的语法）；第二个参数是你要键入的文本；</li>
<li><code>click</code> 方法用来模拟鼠标点击，它接受一个参数，是一个 selector 选择器</li>
</ul>
<blockquote>
<p>有关这个控制器的更多方法，请先参考 <a href="https://devexpress.github.io/testcafe/documentation/test-api/actions/">TestCafe 官方 API 手册</a> (它是一个英文文档，稍后我会整理出这个文档的中文手册在本页下方)</p>
</blockquote>
<p>这段代码的作用是：</p>
<ol>
<li>首先找到 id 为 <code>developer-name</code> 的标签，输入值 ‘John Smith’</li>
<li>然后点击 id 为 <code>submit-button</code> 的按钮</li>
</ol>
<h3 id="观察页面的变化"><a href="#观察页面的变化" class="headerlink" title="观察页面的变化">观察页面的变化</a></h3><p>上面一小节我们对页面进行了交互，接下来我们想知道页面进行了什么反应，也就是观察的页面变化。</p>
<p>我们对测试脚本进行修改</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  test(&#x27;My first test&#x27;, async t =&gt; &#123;</span><br><span class="line">    await t</span><br><span class="line">      .typeText(&#x27;#developer-name&#x27;, &#x27;John Smith&#x27;)</span><br><span class="line">      .click(&#x27;#submit-button&#x27;);</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+   const articleHeader = await Selector(&#x27;.result-content&#x27;).find(&#x27;h1&#x27;);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+   // 获取 article header 的内容文本</span></span><br><span class="line"><span class="addition">+   let headerText = await articleHeader.innerText;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>在我们点击页面上的“提交”按钮后，会打开一个“谢谢”页面。<br>如果我们要访问页面上的 DOM 元素，可以使用测试脚本顶部导入的 Selector 方法</p>
<ol>
<li>L6，我们声明了一个 <code>articleHeader</code> 变量，这个变量的值是根据选择器 <code>.result-content &gt; h1</code> 找到的 DOM 元素</li>
<li>L9，我们又声明了一个 <code>headerText</code> 变量，它的值是我们获取到的 DOM 元素的 <code>innerText</code> 属性（这个属性的值是 DOM 元素的内容文本）</li>
</ol>
<h3 id="断言"><a href="#断言" class="headerlink" title="断言">断言</a></h3><p>我们拿到需要判断的值后，就可以对测试用例进行断言了。<br>它到底能否正确执行测试用例并输出我们期望的结果？</p>
<p>我们使用测试用例控制器的 <code>t.expect()</code> 方法来进行断言,<br>将测试脚本改写为以下内容</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  test(&#x27;My first test&#x27;, async t =&gt; &#123;</span><br><span class="line">    await t</span><br><span class="line">      .typeText(&#x27;#developer-name&#x27;, &#x27;John Smith&#x27;)</span><br><span class="line">      .click(&#x27;#submit-button&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   const articleHeader = await Selector(&#x27;.result-content&#x27;).find(&#x27;h1&#x27;);</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-   // 获取 article header 的内容文本</span></span><br><span class="line"><span class="deletion">-   let headerText = await articleHeader.innerText;</span></span><br><span class="line"><span class="addition">+   // 使用断言方法来判断我们获取到的值与我们期望的值是否相等</span></span><br><span class="line"><span class="addition">+   .expect(Selector(&#x27;#article-header&#x27;).innerText).eql(&#x27;Thank you, John Smith!&#x27;);</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>L11 <code>expect()</code> 是一个 BDD（行为驱动开发）风格的断言方法, 它接受一个参数：需要进行断言的变量；<br>它返回一个断言类实例对象，后跟一个断言方法。</p>
</li>
<li><p><code>eql()</code> 是一个断言方法，用于判断断言实例与期望值是否严格等于，它接受一个参数：期望值；<br>该类断言方法会在打印出相应的测试报告，如果相等则返回 pass，否则抛出一个 AssertionError</p>
<p><img src="//static.mutoe.com/2018/testcafe/assertion-error.png" alt="assertion error"></p>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结">小结</a></h2><p>到这里，我们的第一个自动化测试脚本就完成了，如果你没有跑通的话，请检查一下你的测试脚本是否与以下内容一致</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 导包语法</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个 fixture 测试项目</span></span><br><span class="line"><span class="title function_">fixture</span>(<span class="string">&#x27;Getting Started&#x27;</span>)</span><br><span class="line">  <span class="comment">// 打开一个 web 页面用于接下来的测试</span></span><br><span class="line">  .<span class="title function_">page</span>(<span class="string">&#x27;http://devexpress.github.io/testcafe/example&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个测试用例</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My first test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">typeText</span>(<span class="string">&#x27;#developer-name&#x27;</span>, <span class="string">&#x27;John Smith&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>(<span class="string">&#x27;#submit-button&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用断言方法来判断我们获取到的值与我们期望的值是否相等</span></span><br><span class="line">    .<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#article-header&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">eql</span>(<span class="string">&#x27;Thank you, John Smith!1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="API-文档-unfinished"><a href="#API-文档-unfinished" class="headerlink" title="API 文档 (unfinished)">API 文档 (unfinished)</a></h1><h2 id="测试代码结构"><a href="#测试代码结构" class="headerlink" title="测试代码结构">测试代码结构</a></h2><h3 id="测试组-Fixtures"><a href="#测试组-Fixtures" class="headerlink" title="测试组 Fixtures">测试组 Fixtures</a></h3><p>TestCafe 测试必须将一些测试组织起来，测试组 (Fixtures) 就像是一个文件夹，将同一类的测试包裹起来。
一个测试文件可以包含很多测试组。</p>
<p>要声明一个测试组，使用 <code>fixture</code> 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fixture</span>( fixtrueName )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或下面这种用法</span></span><br><span class="line">fixture <span class="string">`fixtureName`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>fixtureName</code></td>
<td>string</td>
<td>测试组的名称</td>
</tr>
</tbody></table>
<p>它返回一个测试组对象，可以接测试组方法，有关这些方法，请参考下方相关 API。</p>
<blockquote>
<p>请注意，测试方法 <code>test</code> 必须放在测试组声明后面。</p>
</blockquote>
<h3 id="测试用例-Tests"><a href="#测试用例-Tests" class="headerlink" title="测试用例 Tests">测试用例 Tests</a></h3><p>你可以使用 <code>test</code> 方法声明一个测试用例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>( testName, <span class="title function_">fn</span>(t) )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>testName</code></td>
<td>string</td>
<td>测试用例的名称</td>
</tr>
<tr>
<td><code>fn</code></td>
<td>Function</td>
<td>包含测试代码的异步函数</td>
</tr>
<tr>
<td><code>t</code></td>
<td>Object</td>
<td>测试用例的<a href="#">测试控制器</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fixture</span>(<span class="string">&#x27;MyFixture&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Test1&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="comment">/* Test 1 Code */</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Test2&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="comment">/* Test 2 Code */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>TestCafe 测试在服务器端执行。
你可以使用<a href="#%E5%8A%A8%E4%BD%9C">测试动作</a>来操纵测试的网页。
要确定页面元素的状态或从客户端获取任何其他数据，请使用<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a>和客户端方法。</p>
<p>要检查页面状态是否与预期页面状态匹配，请使用<a href="#%E6%96%AD%E8%A8%80">断言</a>。</p>
<h4 id="测试控制器-Test-Controller"><a href="#测试控制器-Test-Controller" class="headerlink" title="测试控制器 Test Controller">测试控制器 Test Controller</a></h4><p>如果要使用<a href="#%E5%8A%A8%E4%BD%9C">测试动作</a>、<a href="#%E6%96%AD%E8%A8%80">断言</a>、或者<a href="#%E7%AD%89%E5%BE%85">等待</a>, 必须挂在在测试控制器上.</p>
<h3 id="指定起始页面"><a href="#指定起始页面" class="headerlink" title="指定起始页面">指定起始页面</a></h3><p>您可以指定 fixture 中所有测试启动时的 web 页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fixture.<span class="title function_">page</span>( url )</span><br><span class="line">fixture.<span class="property">page</span> <span class="string">`url`</span></span><br></pre></td></tr></table></figure>

<p>类似的，你也可以为特定的测试用例置顶一个起始的 web 页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test.<span class="title function_">page</span>( url )</span><br><span class="line">test.<span class="property">page</span> <span class="string">`url`</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>url</code></td>
<td>string</td>
<td>指定起始页面的 URL</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fixture</span>(<span class="string">&#x27;MyFixture&#x27;</span>)</span><br><span class="line">  .<span class="title function_">page</span>(<span class="string">&#x27;http://devexpress.github.io/testcafe/example&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Test1&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="comment">// Starts at http://devexpress.github.io/testcafe/example</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test.<span class="title function_">page</span>(<span class="string">&#x27;http://devexpress.github.io/testcafe/blog/&#x27;</span>)</span><br><span class="line">  (<span class="string">&#x27;Test2&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">      <span class="comment">// Starts at http://devexpress.github.io/testcafe/blog/</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>如果没有指定起始页面，则打开 <code>about:blank</code> 页面。</p>
<p>你也可以使用 <code>file://</code> 协议或相对路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fixture</span>(<span class="string">&#x27;MyFixture&#x27;</span>)</span><br><span class="line">  .<span class="title function_">page</span>(<span class="string">&#x27;file:///user/my-website/index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fixture</span>(<span class="string">&#x27;MyFixture&#x27;</span>)</span><br><span class="line">  .<span class="title function_">page</span>(<span class="string">&#x27;../my-project/index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="测试元数据"><a href="#测试元数据" class="headerlink" title="测试元数据">测试元数据</a></h3><p>你可以使用键值对的方式为测试指定元数据，并在测试报告中展示这些元数据。</p>
<p>要定义元数据，请使用 <code>meta</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fixture</span><br><span class="line">  .<span class="title function_">meta</span>(<span class="string">&#x27;fixtureID&#x27;</span>, <span class="string">&#x27;f-0001&#x27;</span>)</span><br><span class="line">  .<span class="title function_">meta</span>(&#123; <span class="attr">author</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">creationDate</span>: <span class="string">&#x27;05/03/2018&#x27;</span> &#125;)</span><br><span class="line">  </span><br><span class="line">test</span><br><span class="line">  .<span class="title function_">meta</span>(<span class="string">&#x27;testID&#x27;</span>, <span class="string">&#x27;t-0001&#x27;</span>)</span><br><span class="line">  .<span class="title function_">meta</span>(&#123; <span class="attr">severity</span>: <span class="string">&#x27;critical&#x27;</span>, <span class="attr">testedAPIVersion</span>: <span class="string">&#x27;1.0&#x27;</span> &#125;)</span><br><span class="line">  (<span class="string">&#x27;MyTest&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123; <span class="comment">/* ... */</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>你可以使用 <a href="https://devexpress.github.io/testcafe/documentation/extending-testcafe/reporter-plugin/">custom reporter</a> 来访问测试元数据。</p>
<p>报告器的 <code>reportFixtureStart</code> 和 <code>reportTestDone</code> 方法来访问测试元数据</p>
<h3 id="钩子"><a href="#钩子" class="headerlink" title="钩子">钩子</a></h3><h4 id="测试组钩子"><a href="#测试组钩子" class="headerlink" title="测试组钩子">测试组钩子</a></h4><p>在每个测试组开始前、结束后，都可以执行特定的方法，它叫做钩子。如果一个测试在多个浏览器中运行，则在每个浏览器中都会执行指定钩子。</p>
<p>你可以指定测试组开始前、结束后执行的钩子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fixture <span class="string">`My fixture`</span></span><br><span class="line">  .<span class="property">page</span> <span class="string">`http://example.com`</span></span><br><span class="line">  .<span class="title function_">before</span>( <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="comment">/* fixture initialization code */</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">after</span>( <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="comment">/* fixture finalization code */</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="测试用例钩子"><a href="#测试用例钩子" class="headerlink" title="测试用例钩子">测试用例钩子</a></h4><p>在每次测试的开始前、结束后，也有相应的钩子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fixture.<span class="title function_">beforeEach</span>( <span class="title function_">fn</span>(t) )</span><br><span class="line">fixture.<span class="title function_">afterEach</span>( <span class="title function_">fn</span>(t) )</span><br><span class="line"></span><br><span class="line">test.<span class="title function_">before</span>( <span class="title function_">fn</span>(t) )</span><br><span class="line">test.<span class="title function_">after</span>( <span class="title function_">fn</span>(t) )</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果指定了 <code>test.before()</code> 或 <code>test.after()</code>， 那么它会覆盖 <code>fixture.beforeEach()</code> 或 <code>fixture.afterEach()</code> 的钩子。 </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fixture <span class="string">`My fixture`</span></span><br><span class="line">  .<span class="property">page</span> <span class="string">`http://example.com`</span></span><br><span class="line">  .<span class="title function_">beforeEach</span>( <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">      <span class="comment">/* test initialization code */</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">afterEach</span>( <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">      <span class="comment">/* test finalization code */</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">test</span><br><span class="line">  .<span class="title function_">before</span>( <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">      <span class="comment">/* test initialization code */</span></span><br><span class="line">  &#125;)</span><br><span class="line">  (<span class="string">&#x27;MyTest&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">  .<span class="title function_">after</span>( <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">      <span class="comment">/* test finalization code */</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="在钩子和测试代码之间共享变量"><a href="#在钩子和测试代码之间共享变量" class="headerlink" title="在钩子和测试代码之间共享变量">在钩子和测试代码之间共享变量</a></h4><p>通过使用测试的上下文对象，来共享在钩子和测试代码之间的变量。</p>
<p>测试的上下文对象为 <code>t.ctx</code>，使用它来代替全局变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fixture <span class="string">`Fixture1`</span></span><br><span class="line">  .<span class="title function_">beforeEach</span>(<span class="keyword">async</span> t  =&gt; &#123;</span><br><span class="line">    t.<span class="property">ctx</span>.<span class="property">someProp</span> = <span class="number">123</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">test</span><br><span class="line">  (<span class="string">&#x27;Test1&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t.<span class="property">ctx</span>.<span class="property">someProp</span>); <span class="comment">// &gt; 123</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">after</span>(<span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t.<span class="property">ctx</span>.<span class="property">someProp</span>); <span class="comment">// &gt; 123</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要注意的是，每个测试都有自己的测试上下文对象。每次测试开始时，<code>t.ctx</code> 都是一个空的对象。</p>
</blockquote>
<p>在测试组的钩子中，回调函数的参数为 <code>ctx</code>，即为测试的上下文对象，在测试代码中可以使用 <code>t.fixtureCtx</code> 来访问它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fixture <span class="string">`Fixture1`</span></span><br><span class="line">  .<span class="title function_">before</span>(<span class="keyword">async</span> ctx  =&gt; &#123;</span><br><span class="line">    ctx.<span class="property">someProp</span> = <span class="number">123</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">after</span>(<span class="keyword">async</span> ctx  =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">newProp</span>); <span class="comment">// &gt; abc</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Test1&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(t.<span class="property">fixtureCtx</span>.<span class="property">someProp</span>); <span class="comment">// &gt; 123</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Test2&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  t.<span class="property">fixtureCtx</span>.<span class="property">newProp</span> = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试">跳过测试</a></h3><p>你在写测试用例时，可以跳过某个测试用例或者只执行某个测试用例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fixture.<span class="property">skip</span> <span class="string">`Fixture1`</span>; <span class="comment">// 所有该测试组的用例都会被跳过</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Fixture1Test1&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Fixture1Test2&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">fixture <span class="string">`Fixture2`</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Fixture2Test1&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">test.<span class="title function_">skip</span>(<span class="string">&#x27;Fixture2Test2&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;); <span class="comment">// 这个测试用例会被跳过</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Fixture2Test3&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fixture.<span class="property">only</span> <span class="string">`Fixture1`</span>;</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Fixture1Test1&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Fixture1Test2&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">fixture <span class="string">`Fixture2`</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Fixture2Test1&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">test.<span class="title function_">only</span>(<span class="string">&#x27;Fixture2Test2&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Fixture2Test3&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有 `Fixture1` 测试组和 `Fixture2Test2` 测试用例会被执行</span></span><br></pre></td></tr></table></figure>

<h2 id="页面元素选择"><a href="#页面元素选择" class="headerlink" title="页面元素选择">页面元素选择</a></h2><h3 id="选择器-selector"><a href="#选择器-selector" class="headerlink" title="选择器 selector">选择器 selector</a></h3><p>选择器是标识测试中的网页元素的方法。选择器 API 提供了选择页面上的元素并获取其状态的方法和属性。</p>
<p>要从 <code>testcafe</code> 模块导入 <code>Selector</code> 构造函数，调用此构造函数并将 CSS 选择器字符串作为参数传递。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> article = <span class="title class_">Selector</span>(<span class="string">&#x27;.article-content&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><code>Selector</code> 参数语法类似于 jQuery 选择器语法，他们都是使用的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors">CSS选择器</a> 语法。
在上面的例子中，我们选择了一个 class 为 <code>atricle-content</code> 的元素。
然后我们就可以使用这个选择器对对元素进行操作了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">click</span>(article)</span><br></pre></td></tr></table></figure>

<p>或者在断言方法中使用它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>(article.<span class="property">scrollHeight</span>).<span class="title function_">eql</span>(<span class="number">1800</span>)</span><br></pre></td></tr></table></figure>

<p>甚至还可以编写一个匹配多个页面元素的选择器，然后按文本、属性等对它们进行过滤。
下面这两个例子首先选择了一个 class 为 <code>radio-button</code> 的元素，并且其中的文本为 “Windows”，第二个是含有属性为 <code>selected</code> 的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> windowsRadioButton  = <span class="title class_">Selector</span>(<span class="string">&#x27;.radio-button&#x27;</span>).<span class="title function_">withText</span>(<span class="string">&#x27;Windows&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> selectedRadioButton = <span class="title class_">Selector</span>(<span class="string">&#x27;.radio-button&#x27;</span>).<span class="title function_">withAttribute</span>(<span class="string">&#x27;selected&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果需要在 DOM 树中查找特定元素，可以使用选择器 API 的<a href="">搜索方法</a>查找它。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buttonWrapper = <span class="title class_">Selector</span>(<span class="string">&#x27;.article-content&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;#share-button&#x27;</span>).<span class="title function_">parent</span>();</span><br></pre></td></tr></table></figure>

<h4 id="创建选择器"><a href="#创建选择器" class="headerlink" title="创建选择器">创建选择器</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Selector</span>( init [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>init</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>标识要选择的 DOM 节点</td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="">选择器选项</a></td>
</tr>
</tbody></table>
<ul>
<li><p>使用一个 CSS 选择器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> usernameInput = <span class="title class_">Selector</span>(<span class="string">&#x27;#username&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用一个在客户端执行的函数，必须返回一个 <code>DOM node</code>，一组 <code>DOM nodes</code>， <code>NodeList</code>, <code>HTMLCollection</code>, <code>null</code> 或者 <code>undefined</code>，或者 Promise.resolve() 为以上内容的方法</p>
<p>请注意，它不能使用一些外部变量，因为该方法是在浏览器中运行的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="title class_">Selector</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> storedElementId = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="property">storedElementId</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(storedElementId);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个 <code>Selector</code> 构造器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ctaButton = <span class="title class_">Selector</span>(<span class="string">&#x27;.cta-button&#x27;</span>);</span><br><span class="line"><span class="title class_">Selector</span>(ctaButton, &#123; <span class="attr">visibilityCheck</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="使用选择器"><a href="#使用选择器" class="headerlink" title="使用选择器">使用选择器</a></h4><p>本主题描述如何标识DOM元素并使用选择器获取关于它们的信息。</p>
<h5 id="检查元素是否存在"><a href="#检查元素是否存在" class="headerlink" title="检查元素是否存在">检查元素是否存在</a></h5><p>选择器可能返回一个、多个或者不存在匹配的元素。您可以使用一下属性来检查元素是否存在，或者确定匹配元素的数量。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>exists</code></td>
<td>boolean</td>
<td>如果匹配到元素则返回 <code>true</code></td>
</tr>
<tr>
<td><code>count</code></td>
<td>number</td>
<td>选择器匹配的节点数量</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"></span><br><span class="line">fixture <span class="string">`Example page`</span></span><br><span class="line">  .<span class="property">page</span> <span class="string">`http://devexpress.github.io/testcafe/example/`</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> osCount            = <span class="title class_">Selector</span>(<span class="string">&#x27;.column.col-2 label&#x27;</span>).<span class="property">count</span>;</span><br><span class="line">  <span class="keyword">const</span> submitButtonExists = <span class="title class_">Selector</span>(<span class="string">&#x27;#submit-button&#x27;</span>).<span class="property">exists</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">expect</span>(osCount).<span class="title function_">eql</span>(<span class="number">3</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(submitButtonExists).<span class="title function_">ok</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，选择器的 getter 是异步的</p>
</blockquote>
<h5 id="获取元素的状态"><a href="#获取元素的状态" class="headerlink" title="获取元素的状态">获取元素的状态</a></h5><p>你也可以获取选择器匹配元素的状态（size、position、classes 等）。有关<a href="#">元素的状态</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"></span><br><span class="line">fixture <span class="string">`My fixture`</span></span><br><span class="line">  .<span class="title function_">page</span>(<span class="string">&#x27;http://devexpress.github.io/testcafe/example/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> windowsInput = <span class="title class_">Selector</span>(<span class="string">&#x27;#windows&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Obtain Element State&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">click</span>(windowsInput);</span><br><span class="line">  <span class="keyword">const</span> windowsInputChecked = <span class="keyword">await</span> windowsInput.<span class="property">checked</span>; <span class="comment">// returns true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="DOM-节点快照"><a href="#DOM-节点快照" class="headerlink" title="DOM 节点快照">DOM 节点快照</a></h6><p>如果你需要获取整个 DOM 元素实例的状态，需要使用 <code>await</code> 来匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"></span><br><span class="line">fixture <span class="string">`My fixture`</span></span><br><span class="line">  .<span class="property">page</span> <span class="string">`http://devexpress.github.io/testcafe/example/`</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;DOM Node Snapshot&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> sliderHandle = <span class="title class_">Selector</span>(<span class="string">&#x27;#slider&#x27;</span>).<span class="title function_">child</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> sliderHandleSnapshot = <span class="keyword">await</span> <span class="title function_">sliderHandle</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sliderHandleSnapshot.<span class="title function_">hasClass</span>(<span class="string">&#x27;ui-slider-handle&#x27;</span>));    <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sliderHandleSnapshot.<span class="property">childElementCount</span>);               <span class="comment">// =&gt; 0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="定义动作的目标"><a href="#定义动作的目标" class="headerlink" title="定义动作的目标">定义动作的目标</a></h5><p>你还可以将选择器的返回值作为测试控制器操作的目标。DOM 节点快照同样可以。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"></span><br><span class="line">fixture <span class="string">`My fixture`</span></span><br><span class="line">    .<span class="property">page</span> <span class="string">`http://devexpress.github.io/testcafe/example/`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> label = <span class="title class_">Selector</span>(<span class="string">&#x27;#tried-section&#x27;</span>).<span class="title function_">child</span>(<span class="string">&#x27;label&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My Test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> labelSnapshot = <span class="keyword">await</span> <span class="title function_">label</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">click</span>(labelSnapshot);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果匹配到多个目标元素，那么只有匹配到的第一个元素将会被操作。</p>
<h5 id="定义断言的目标"><a href="#定义断言的目标" class="headerlink" title="定义断言的目标">定义断言的目标</a></h5><p>你可以将选择器的返回值作为断言的目标。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span>;</span><br><span class="line"></span><br><span class="line">fixture <span class="string">`My fixture`</span></span><br><span class="line">  .<span class="property">page</span> <span class="string">`http://devexpress.github.io/testcafe/example/`</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Assertion with Selector&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> developerNameInput = <span class="title class_">Selector</span>(<span class="string">&#x27;#developer-name&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">expect</span>(developerNameInput.<span class="property">value</span>).<span class="title function_">eql</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">typeText</span>(developerNameInput, <span class="string">&#x27;Peter&#x27;</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(developerNameInput.<span class="property">value</span>).<span class="title function_">eql</span>(<span class="string">&#x27;Peter&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="选择器超时"><a href="#选择器超时" class="headerlink" title="选择器超时">选择器超时</a></h5><p>在测试期间，testcafe 会一次又一次的检查，等待目标元素变得可见，如果超时还不可见则不会通过测试用例。</p>
<p><strong>如何设置超时</strong></p>
<ul>
<li>你可以在选择器构造函数的<a href="#">选项</a>中指定超时时间。</li>
<li>如果使用 API 进行测试，则需要在 <a href="#"><code>runner.run</code></a> 方法中指定。</li>
<li>如果使用命令行启动，则需要指定<a href="#">选择器超时</a> 选项。</li>
</ul>
<h5 id="调试选择器"><a href="#调试选择器" class="headerlink" title="调试选择器">调试选择器</a></h5><p>Testcafe 会输出有关于测试报告运行失败时的详细信息。</p>
<p>如果你尝试使用不匹配任何DOM元素的选择器时，测试失败并抛出一个错误。错误消息指示哪个选择器失败。</p>
<p><img src="//static.mutoe.com/2018/testcafe/failed-selector-report.png" alt="failed selector report"></p>
<h4 id="选择器的方法"><a href="#选择器的方法" class="headerlink" title="选择器的方法">选择器的方法</a></h4><h5 id="过滤-DOM-节点"><a href="#过滤-DOM-节点" class="headerlink" title="过滤 DOM 节点">过滤 DOM 节点</a></h5><p>如果选择器返回多个DOM节点，你可以对它们进行筛选，以选择一个最终将由选择器返回的节点。选择器提供了根据索引、文本、属性等过滤DOM节点的方法。</p>
<h6 id="根据索引-nth"><a href="#根据索引-nth" class="headerlink" title="根据索引 (nth)">根据索引 (nth)</a></h6><table>
<thead>
<tr>
<th>参数</th>
<th>返回值类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>nth(index)</code></td>
<td>Selector</td>
<td>根据匹配集中的索引查找元素。<code>index</code> 参数为从 <code>0</code> 开始的索引，如果指定为负数，则从末尾开始计算索引。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回第三个 ul 元素</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">nth</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回最后一个 div 元素</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">nth</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h5 id="根据文本-withText-x2F-withExactText"><a href="#根据文本-withText-x2F-withExactText" class="headerlink" title="根据文本 (withText &#x2F; withExactText)">根据文本 (withText &#x2F; withExactText)</a></h5><table>
<thead>
<tr>
<th>参数</th>
<th>返回值类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>withText(text)</code></td>
<td>Selector</td>
<td>创建一个选择器，该选择器过滤指定<strong>文本</strong>的匹配项，选择包含此文本的元素。<code>text</code> 参数区分大小写。</td>
</tr>
<tr>
<td><code>withExactText(text)</code></td>
<td>Selector</td>
<td>创建一个选择器，该选择器过滤指定<strong>文本</strong>的匹配项，将会严格匹配等于该文本的元素。<code>text</code> 参数区分大小写。</td>
</tr>
<tr>
<td><code>withText(regexp)</code></td>
<td>Selector</td>
<td>创建一个选择器，该选择器过滤指定<strong>正则表达式</strong>的匹配项。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回内容含有 &#x27;foo&#x27; 的 label 元素</span></span><br><span class="line"><span class="comment">// 不会返回含有 &#x27;foobar&#x27; 或 &#x27;Foo&#x27; 的元素</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">withText</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回匹配 /a[b-e]/ 文本的 div 元素。</span></span><br><span class="line"><span class="comment">// 会匹配 &#x27;ab&#x27;, &#x27;ac&#x27;。 不会匹配 &#x27;bb&#x27;, &#x27;aa&#x27;</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">withText</span>(<span class="regexp">/a[b-e]/</span>)</span><br></pre></td></tr></table></figure>

<p>需要注意， <code>withText</code> 不仅会留下立即包含指定文本的元素，还会留下它的祖先元素。比如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>some text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个选择器会匹配 &#x27;.container&#x27; 和 &#x27;.child&#x27;</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">withText</span>(<span class="string">&#x27;some text&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="根据属性-withAttribute"><a href="#根据属性-withAttribute" class="headerlink" title="根据属性 (withAttribute)">根据属性 (withAttribute)</a></h5><table>
<thead>
<tr>
<th>参数</th>
<th>返回值类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>withAttribute(attrName [, attrValue])</code></td>
<td>Selector</td>
<td>创建一个选择器，选择包含指定属性(或属性值)的元素。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>attrName</code></td>
<td>string &amp;vert; RegExp</td>
<td>属性名，区分大小写。</td>
</tr>
<tr>
<td><code>attrValue</code> <em>(可选的)</em></td>
<td>string &amp;vert; RegExp</td>
<td>属性值，区分大小写。你可以省略它来匹配任何值。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配任何含有 href 属性的 a 标签</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">withAttribute</span>(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 title 属性为‘图片’的 img 元素</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">withAttribute</span>(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;图片&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配任何 src 属性以 &#x27;https://static.mutoe.com&#x27; 开头的 img 元素</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">withAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="regexp">/^https?:\/\/static\.mutoe\.com/</span>)</span><br></pre></td></tr></table></figure>

<h5 id="根据可见性-filterVisible-x2F-filterHidden"><a href="#根据可见性-filterVisible-x2F-filterHidden" class="headerlink" title="根据可见性 (filterVisible &#x2F; filterHidden)">根据可见性 (filterVisible &#x2F; filterHidden)</a></h5><table>
<thead>
<tr>
<th>参数</th>
<th>返回值类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>filterVisible()</code></td>
<td>Selector</td>
<td>创建一个选择器，只留下可见的元素。这些元素<strong>没有</strong> <code>display: none;</code>, <code>visibility: hidden;</code>, <code>width: 0;</code> 或 <code>height: 0;</code> 这些属性</td>
</tr>
<tr>
<td><code>filterHidden()</code></td>
<td>Selector</td>
<td>创建一个选择器，只留下不可见的元素。这些元素<strong>含有</strong> <code>display: none;</code>, <code>visibility: hidden;</code>, <code>width: 0;</code> 或 <code>height: 0;</code> 这些属性</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择所有可见的 div 元素</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">filterVisible</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择所有隐藏的 input 元素</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">filterHidden</span>()</span><br></pre></td></tr></table></figure>

<h5 id="根据过滤器-filter"><a href="#根据过滤器-filter" class="headerlink" title="根据过滤器 (filter)">根据过滤器 (filter)</a></h5><table>
<thead>
<tr>
<th>参数</th>
<th>返回值类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>filter(cssSelector)</code></td>
<td>Selector</td>
<td>创建一个选择器，根据 css 选择器的语法过滤。</td>
</tr>
<tr>
<td><code>filter(filterFn(node, idx), dependencies)</code></td>
<td>Selector</td>
<td>创建一个选择器，根据节点的状态过滤。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>cssSelector</code></td>
<td>string</td>
<td>css 选择器</td>
</tr>
<tr>
<td><code>filterFn(node, idx)</code></td>
<td>Function</td>
<td>该方法将会在浏览器环境中执行</td>
</tr>
<tr>
<td><code>dependencies</code></td>
<td>Function</td>
<td>需要传递到客户端的方法，否则调用时不会出现在浏览器上下文环境中</td>
</tr>
<tr>
<td><code>node</code></td>
<td>Element</td>
<td>当前元素的 DOM node</td>
</tr>
<tr>
<td><code>idx</code></td>
<td>number</td>
<td>当前 DOM node 所处的索引</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从所有 li 标签中挑选含有 &#x27;active&#x27; class 的元素</span></span><br><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">filter</span>(<span class="string">&#x27;.active&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Selector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;testcafe&#x27;</span></span><br><span class="line"></span><br><span class="line">fixture <span class="string">`Example page`</span></span><br><span class="line">  .<span class="property">page</span> <span class="string">`http://devexpress.github.io/testcafe/example/`</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> secondCheckBox = <span class="title class_">Selector</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">    .<span class="title function_">withAttribute</span>(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;checkbox&#x27;</span>)</span><br><span class="line">    .<span class="title function_">nth</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> checkedInputs = <span class="title class_">Selector</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">    .<span class="title function_">withAttribute</span>(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;checkbox&#x27;</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function"><span class="params">node</span> =&gt;</span> node.<span class="property">checked</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> windowsLabel = <span class="title class_">Selector</span>(<span class="string">&#x27;label&#x27;</span>)</span><br><span class="line">    .<span class="title function_">withText</span>(<span class="string">&#x27;Windows&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">click</span>(secondCheckBox)</span><br><span class="line">    .<span class="title function_">expect</span>(checkedInputs.<span class="property">count</span>).<span class="title function_">eql</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">click</span>(windowsLabel)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果所有的 DOM 都被过滤掉，<code>filter()</code> 选择器会返回 <code>null</code></p>
<h5 id="根据关系-find-x2F-parent-x2F-child-x2F-sibling"><a href="#根据关系-find-x2F-parent-x2F-child-x2F-sibling" class="headerlink" title="根据关系 (find &#x2F; parent &#x2F; child &#x2F; sibling)">根据关系 (find &#x2F; parent &#x2F; child &#x2F; sibling)</a></h5><table>
<thead>
<tr>
<th>参数</th>
<th>返回值类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>find(cssSelector)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的所有子节点，并通过 css 选择器筛选它们。</td>
</tr>
<tr>
<td><code>find(filterFn, dependencies)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的所有子节点，根据节点的状态过滤。</td>
</tr>
<tr>
<td><code>parent()</code></td>
<td>Selector</td>
<td>返回当前元素匹配的父节点。（第一个元素将会是最近的父元素）</td>
</tr>
<tr>
<td><code>parent(index)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的父节点，并通过索引筛选它们。<code>0</code> 是最近的父元素，负数将会从根结点开始计算。</td>
</tr>
<tr>
<td><code>parent(cssSelector)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的父节点，并通过 css 选择器筛选。</td>
</tr>
<tr>
<td><code>parent(filterFn, dependencies)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的父节点，根据节点的状态过滤。</td>
</tr>
<tr>
<td><code>child()</code></td>
<td>Selector</td>
<td>返回当前元素匹配的子节点。（第一个元素将会是最近的子元素）</td>
</tr>
<tr>
<td><code>child(index)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的子节点，并通过索引筛选它们。<code>0</code> 是最近的子元素，负数将会从根结点开始计算。</td>
</tr>
<tr>
<td><code>child(cssSelector)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的子节点，并通过 css 选择器筛选。</td>
</tr>
<tr>
<td><code>child(filterFn, dependencies)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的子节点，根据节点的状态过滤。</td>
</tr>
<tr>
<td><code>sibling()</code></td>
<td>Selector</td>
<td>返回当前元素匹配的兄弟元素。（第一个元素将会是最近的兄弟元素）</td>
</tr>
<tr>
<td><code>sibling(index)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的兄弟元素，并通过索引筛选它们。以 <code>0</code> 开始，负数将会从末尾开始计算。</td>
</tr>
<tr>
<td><code>sibling(cssSelector)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的兄弟元素，并通过 css 选择器筛选。</td>
</tr>
<tr>
<td><code>sibling(filterFn, dependencies)</code></td>
<td>Selector</td>
<td>返回当前元素匹配的兄弟元素，根据节点的状态过滤。</td>
</tr>
<tr>
<td><code>nextSibling()</code></td>
<td>Selector</td>
<td>返回当前元素之后匹配的兄弟元素。（第一个元素将会是之后最近的兄弟元素）</td>
</tr>
<tr>
<td><code>nextSibling(index)</code></td>
<td>Selector</td>
<td>返回当前元素之后匹配的兄弟元素，并通过索引筛选它们。以 <code>0</code> 开始，负数将会从末尾开始计算。</td>
</tr>
<tr>
<td><code>nextSibling(cssSelector)</code></td>
<td>Selector</td>
<td>返回当前元素之后匹配的兄弟元素，并通过 css 选择器筛选。</td>
</tr>
<tr>
<td><code>nextSibling(filterFn, dependencies)</code></td>
<td>Selector</td>
<td>返回当前元素之后匹配的兄弟元素，根据节点的状态过滤。</td>
</tr>
<tr>
<td><code>prevSibling()</code></td>
<td>Selector</td>
<td>返回当前元素之前匹配的兄弟元素。（第一个元素将会是之前最近的兄弟元素）</td>
</tr>
<tr>
<td><code>prevSibling(index)</code></td>
<td>Selector</td>
<td>返回当前元素之前匹配的兄弟元素，并通过索引筛选它们。以 <code>0</code> 开始，负数将会从末尾开始计算。</td>
</tr>
<tr>
<td><code>prevSibling(cssSelector)</code></td>
<td>Selector</td>
<td>返回当前元素之前匹配的兄弟元素，并通过 css 选择器筛选。</td>
</tr>
<tr>
<td><code>prevSibling(filterFn, dependencies)</code></td>
<td>Selector</td>
<td>返回当前元素之前匹配的兄弟元素，根据节点的状态过滤。</td>
</tr>
</tbody></table>
<p><strong>例子</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">parent</span>(<span class="string">&#x27;div.someClass&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>找到页面上的所有ul元素。然后，在每个已找到的ul元素中找到label元素。然后，为每个label元素找到一个匹配div.someClass选择器的父元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Selector</span>(<span class="string">&#x27;.container&#x27;</span>).<span class="title function_">parent</span>(<span class="number">1</span>).<span class="title function_">nth</span>(<span class="number">0</span>).<span class="title function_">find</span>(<span class="string">&#x27;.content&#x27;</span>).<span class="title function_">withText</span>(<span class="string">&#x27;yo!&#x27;</span>).<span class="title function_">child</span>(<span class="string">&#x27;span&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这个例子做了以下事情：</p>
<ul>
<li>找到 <code>.container</code> 元素的第二个父元素（父元素的父元素）</li>
<li>选择匹配集中的第 1 个元素</li>
<li>在该元素中，查找与 <code>.content</code> 选择器匹配的元素</li>
<li>找到文本包含 ‘yo!’ 的元素</li>
<li>在每个已过滤的元素中，搜索标记名为 <code>span</code> 的子项。</li>
</ul>
<h4 id="选择器选项-no"><a href="#选择器选项-no" class="headerlink" title="选择器选项 (no)">选择器选项 (no)</a></h4><blockquote>
<p>暂未更新</p>
</blockquote>
<h4 id="选择器拓展-no"><a href="#选择器拓展-no" class="headerlink" title="选择器拓展 (no)">选择器拓展 (no)</a></h4><blockquote>
<p>暂未更新</p>
</blockquote>
<h4 id="边缘情况-no"><a href="#边缘情况-no" class="headerlink" title="边缘情况 (no)">边缘情况 (no)</a></h4><blockquote>
<p>暂未更新</p>
</blockquote>
<h3 id="DOM-节点状态"><a href="#DOM-节点状态" class="headerlink" title="DOM 节点状态">DOM 节点状态</a></h3><blockquote>
<p>暂未更新</p>
</blockquote>
<h3 id="特定框架的选择器-no"><a href="#特定框架的选择器-no" class="headerlink" title="特定框架的选择器 (no)">特定框架的选择器 (no)</a></h3><blockquote>
<p>暂未更新</p>
</blockquote>
<h3 id="一些例子-no"><a href="#一些例子-no" class="headerlink" title="一些例子 (no)">一些例子 (no)</a></h3><blockquote>
<p>暂未更新</p>
</blockquote>
<h2 id="动作"><a href="#动作" class="headerlink" title="动作">动作</a></h2><h3 id="单击-click"><a href="#单击-click" class="headerlink" title="单击 click">单击 click</a></h3><p>单击页面上的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">click</span>( selector [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>selector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E7%82%B9%E5%87%BB%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-click-action">点击动作选项</a></td>
</tr>
</tbody></table>
<p>下面用一个例子来展示如何使用 <code>t.click</code> 动作来选择一个复选框元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Click a check box and check its state&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> checkbox = <span class="title class_">Selector</span>(<span class="string">&#x27;#testing-on-remote-devices&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">click</span>(checkbox)</span><br><span class="line">    .<span class="title function_">expect</span>(checkbox.<span class="property">checked</span>).<span class="title function_">ok</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>下面一个例子使用 <code>options</code> 参数在输入框中设置光标位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Click Input&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> nameInput = <span class="title class_">Selector</span>(<span class="string">&#x27;#developer-name&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">typeText</span>(nameInput, <span class="string">&#x27;Peter Parker&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>(nameInput, &#123; <span class="attr">caretPos</span>: <span class="number">5</span> &#125;)</span><br><span class="line">    .<span class="title function_">pressKey</span>(<span class="string">&#x27;backspace&#x27;</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(nameInput.<span class="property">value</span>).<span class="title function_">eql</span>(<span class="string">&#x27;Pete Parker&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="双击-doubleClick"><a href="#双击-doubleClick" class="headerlink" title="双击 doubleClick">双击 doubleClick</a></h3><p>双击页面上的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">doubleClick</span>( selector [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>selector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E7%82%B9%E5%87%BB%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-click-action">点击动作选项</a></td>
</tr>
</tbody></table>
<h3 id="右击-rightClick"><a href="#右击-rightClick" class="headerlink" title="右击 rightClick">右击 rightClick</a></h3><p>右击页面上的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">rightClick</span>( selector [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>selector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E7%82%B9%E5%87%BB%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-click-action">点击动作选项</a></td>
</tr>
</tbody></table>
<h3 id="拖拽-drag"><a href="#拖拽-drag" class="headerlink" title="拖拽 drag">拖拽 drag</a></h3><h4 id="拖拽一定距离-drag"><a href="#拖拽一定距离-drag" class="headerlink" title="拖拽一定距离 drag">拖拽一定距离 drag</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">drag</span>( selector, dragOffsetX, dragOffsetY [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>selector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
</tr>
<tr>
<td><code>dragOffsetX</code></td>
<td>Number</td>
<td>鼠标在 x 轴上需要拖拽的距离</td>
</tr>
<tr>
<td><code>dragOffsetY</code></td>
<td>Number</td>
<td>鼠标在 y 轴上需要拖拽的距离</td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E9%BC%A0%E6%A0%87%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-mouse-action">鼠标动作选项</a></td>
</tr>
</tbody></table>
<p>下面一个例子来演示如何使用 <code>t.drag</code> 动作来拖拽元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Drag slider&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> slider = <span class="title class_">Selector</span>(<span class="string">&#x27;#developer-rating&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">click</span>(<span class="string">&#x27;#i-tried-testcafe&#x27;</span>);</span><br><span class="line">    .<span class="title function_">expect</span>(slider.<span class="property">value</span>).<span class="title function_">eql</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">drag</span>(<span class="string">&#x27;.ui-slider-handle&#x27;</span>, <span class="number">360</span>, <span class="number">0</span>, &#123; <span class="attr">offsetX</span>: <span class="number">10</span>, <span class="attr">offsetY</span>: <span class="number">10</span> &#125;)</span><br><span class="line">    .<span class="title function_">expect</span>(slider.<span class="property">value</span>).<span class="title function_">eql</span>(<span class="number">7</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="拖拽到另一个元素上-dragToElement"><a href="#拖拽到另一个元素上-dragToElement" class="headerlink" title="拖拽到另一个元素上 dragToElement">拖拽到另一个元素上 dragToElement</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">dragToElement</span>( selector, destinationSelector [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>selector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
</tr>
<tr>
<td><code>destinationSelector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器, 拖拽目标元素，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E6%8B%96%E6%8B%BD%E5%88%B0%E5%85%83%E7%B4%A0%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-dragToElement-action">拖拽到元素动作选项</a></td>
</tr>
</tbody></table>
<p>下面这个例子演示了如何使用 <code>t.dragToElement</code> 将元素拖放到特定区域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Drag an item from the toolbox&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> designSurfaceItems = <span class="title class_">Selector</span>(<span class="string">&#x27;.design-surface&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.items&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">dragToElement</span>(<span class="string">&#x27;.toolbox-item.text-input&#x27;</span>, <span class="string">&#x27;.design-surface&#x27;</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(designSurfaceItems.<span class="property">count</span>).<span class="title function_">gt</span>(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="悬停-hover"><a href="#悬停-hover" class="headerlink" title="悬停 hover">悬停 hover</a></h3><p>将鼠标指针悬停在网页元素上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">hover</span>( selector [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>selector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E9%BC%A0%E6%A0%87%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-mouse-action">鼠标动作选项</a></td>
</tr>
</tbody></table>
<p>使用此操作可以调用弹出元素，例如悬停在其他元素上时出现的提示窗口、弹出菜单或下拉列表。</p>
<p>下面这例子演示如何将鼠标指针移动到组合框上显示下拉列表，然后选择一个项目并检查组合框的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Select combo box value&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> comboBox = <span class="title class_">Selector</span>(<span class="string">&#x27;.combo-box&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">hover</span>(comboBox)</span><br><span class="line">    .<span class="title function_">click</span>(<span class="string">&#x27;#i-prefer-both&#x27;</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(comboBox.<span class="property">value</span>).<span class="title function_">eql</span>(<span class="string">&#x27;Both&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="选择文本-selectText"><a href="#选择文本-selectText" class="headerlink" title="选择文本 selectText">选择文本 selectText</a></h3><h4 id="在-input-元素中"><a href="#在-input-元素中" class="headerlink" title="在 input 元素中">在 input 元素中</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">selectText</span>( selector [, startPos] [, endPos] [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>selector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
<td></td>
</tr>
<tr>
<td><code>startPos</code> <em>(可选的)</em></td>
<td>Number</td>
<td>选择的起始位置，从 0 开始的整数</td>
<td>0</td>
</tr>
<tr>
<td><code>endPos</code> <em>(可选的)</em></td>
<td>Number</td>
<td>选择的结束位置，从 0 开始的整数</td>
<td>可见文本的长度</td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E5%9F%BA%E6%9C%AC%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-basic-action">基本动作选项</a></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> developerNameInput = <span class="title class_">Selector</span>(<span class="string">&#x27;#developer-name&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getElementSelectionStart = <span class="title class_">ClientFunction</span>(<span class="function"><span class="params">selector</span> =&gt;</span> <span class="title function_">selector</span>().<span class="property">selectionStart</span>);</span><br><span class="line"><span class="keyword">const</span> getElementSelectionEnd = <span class="title class_">ClientFunction</span>(<span class="function"><span class="params">selector</span> =&gt;</span> <span class="title function_">selector</span>().<span class="property">selectionEnd</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Select text within input&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">typeText</span>(developerNameInput, <span class="string">&#x27;Test Cafe&#x27;</span>, &#123; <span class="attr">caretPos</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    .<span class="title function_">selectText</span>(developerNameInput, <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="keyword">await</span> <span class="title function_">getElementSelectionStart</span>(developerNameInput)).<span class="title function_">eql</span>(<span class="number">1</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="keyword">await</span> <span class="title function_">getElementSelectionEnd</span>(developerNameInput)).<span class="title function_">eql</span>(<span class="number">7</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果 <code>startPos</code> 的值大于 <code>endPos</code> 的值，则动作将执行向前选择。</p>
</blockquote>
<h4 id="在-textarea-元素中"><a href="#在-textarea-元素中" class="headerlink" title="在 textarea 元素中">在 textarea 元素中</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">selectTextAreaContent</span>( selector [, startLine] [, startPos] [, endLine] [, endPos] [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>selector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
<td></td>
</tr>
<tr>
<td><code>startLine</code> <em>(可选的)</em></td>
<td>Number</td>
<td>选择开始的行号，从 0 开始的整数</td>
<td>0</td>
</tr>
<tr>
<td><code>startPos</code> <em>(可选的)</em></td>
<td>Number</td>
<td>选择的起始位置，从 0 开始的整数</td>
<td>0</td>
</tr>
<tr>
<td><code>endLine</code> <em>(可选的)</em></td>
<td>Number</td>
<td>选择结束的行号，从 0 开始的整数</td>
<td>最后一行的索引</td>
</tr>
<tr>
<td><code>endPos</code> <em>(可选的)</em></td>
<td>Number</td>
<td>选择的结束位置(基于 <code>endline</code>)，从 0 开始的整数</td>
<td><code>endLine</code> 的最后一个字符</td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E5%9F%BA%E6%9C%AC%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-basic-action">基本动作选项</a></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> commentTextArea = <span class="title class_">Selector</span>(<span class="string">&#x27;#comments&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getElementSelectionStart = <span class="title class_">ClientFunction</span>(<span class="function"><span class="params">selector</span> =&gt;</span> <span class="title function_">selector</span>().<span class="property">selectionStart</span>);</span><br><span class="line"><span class="keyword">const</span> getElementSelectionEnd   = <span class="title class_">ClientFunction</span>(<span class="function"><span class="params">selector</span> =&gt;</span> <span class="title function_">selector</span>().<span class="property">selectionEnd</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Select text within textarea&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">click</span>(<span class="string">&#x27;#tried-test-cafe&#x27;</span>)</span><br><span class="line">    .<span class="title function_">typeText</span>(commentTextArea, [</span><br><span class="line">      <span class="string">&#x27;Lorem ipsum dolor sit amet&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;consectetur adipiscing elit&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;sed do eiusmod tempor&#x27;</span></span><br><span class="line">    ].<span class="title function_">join</span>(<span class="string">&#x27;,\n&#x27;</span>))</span><br><span class="line">    .<span class="title function_">selectTextAreaContent</span>(commentTextArea, <span class="number">0</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="keyword">await</span> <span class="title function_">getElementSelectionStart</span>(commentTextArea)).<span class="title function_">eql</span>(<span class="number">5</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="keyword">await</span> <span class="title function_">getElementSelectionEnd</span>(commentTextArea)).<span class="title function_">eql</span>(<span class="number">67</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果 <code>startLine</code> 比 <code>endLine</code> 的值大，则执行向前选择。</p>
</blockquote>
<h4 id="在-contentEditable-元素中"><a href="#在-contentEditable-元素中" class="headerlink" title="在 contentEditable 元素中">在 contentEditable 元素中</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">selectEditableContent</span>( startSelector, endSelector [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>startSelector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>标识开始选择的元素 selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
<td></td>
</tr>
<tr>
<td><code>endSelector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>标识结束选择的元素 selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
<td></td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E5%9F%BA%E6%9C%AC%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-basic-action">基本动作选项</a></td>
<td></td>
</tr>
</tbody></table>
<p>此方法适用于启用了 <code>contentEditable</code> 属性的 HTML 元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Delete text within a contentEditable element&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">selectEditableContent</span>(<span class="string">&#x27;#foreword&#x27;</span>, <span class="string">&#x27;#chapter-3&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pressKey</span>(<span class="string">&#x27;delete&#x27;</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#chapter-2&#x27;</span>).<span class="property">exists</span>).<span class="title function_">notOk</span>()</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#chapter-4&#x27;</span>).<span class="property">exists</span>).<span class="title function_">ok</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="键入文本-typeText"><a href="#键入文本-typeText" class="headerlink" title="键入文本 typeText">键入文本 typeText</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">typeText</span>( selector, text [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>selector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器，有关<a href="#%E9%80%89%E6%8B%A9%E5%99%A8-selector">选择器</a></td>
</tr>
<tr>
<td><code>text</code></td>
<td>string</td>
<td>要在指定元素中输入的文本</td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E8%BE%93%E5%85%A5%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-typing-action">输入动作选项</a></td>
</tr>
</tbody></table>
<blockquote>
<p>如果要删除文本，请使用 <a href="#%E9%80%89%E6%8B%A9%E6%96%87%E6%9C%AC-selectText"><code>t.selectText</code></a> 和 <a href="#%E6%8C%89%E9%94%AE-pressKey"><code>t.pressKey</code></a> 来实现</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Type and Replace&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> nameInput = <span class="title class_">Selector</span>(<span class="string">&#x27;#developer-name&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">typeText</span>(nameInput, <span class="string">&#x27;Peter&#x27;</span>)</span><br><span class="line">    .<span class="title function_">typeText</span>(nameInput, <span class="string">&#x27;Paker&#x27;</span>, &#123; <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    .<span class="title function_">typeText</span>(nameInput, <span class="string">&#x27;r&#x27;</span>, &#123; <span class="attr">caretPos</span>: <span class="number">2</span> &#125;)</span><br><span class="line">    .<span class="title function_">expect</span>(nameInput.<span class="property">value</span>).<span class="title function_">eql</span>(<span class="string">&#x27;Parker&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong></p>
<p>某些类型的HTML5输入（如 DateTime ， Color 或 Range）需要以特定格式输入值。</p>
<p>The following table lists value formats expected by these inputs.</p>
<table>
<thead>
<tr>
<th>输入类型</th>
<th>模式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>Date</td>
<td><code>yyyy-MM-dd</code></td>
<td><code>2018-10-25</code></td>
</tr>
<tr>
<td>Week</td>
<td><code>yyyy-Www</code></td>
<td><code>2018-W03</code></td>
</tr>
<tr>
<td>Month</td>
<td><code>yyyy-MM</code></td>
<td><code>2018-10</code></td>
</tr>
<tr>
<td>DateTime</td>
<td><code>yyyy-MM-ddThh:mm</code></td>
<td><code>2018-10-25T13:22</code></td>
</tr>
<tr>
<td>Time</td>
<td><code>hh:mm</code></td>
<td><code>13:22:28</code></td>
</tr>
<tr>
<td>Color</td>
<td><code>#rrggbb</code></td>
<td><code>#003500</code></td>
</tr>
<tr>
<td>Range</td>
<td><code>n</code></td>
<td><code>45</code></td>
</tr>
</tbody></table>
</blockquote>
<h3 id="按键-pressKey"><a href="#按键-pressKey" class="headerlink" title="按键 pressKey">按键 pressKey</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">pressKey</span>( keys [, options] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>keys</code></td>
<td>string</td>
<td>要在指定元素中输入的文本</td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>选项, 有关<a href="#%E5%9F%BA%E6%9C%AC%E5%8A%A8%E4%BD%9C%E9%80%89%E9%A1%B9-basic-action">基本动作选项</a></td>
</tr>
</tbody></table>
<p>下表显示了如何指定不同类型，键序列和组合的键。</p>
<table>
<thead>
<tr>
<th>按键类型</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>字母和数字</td>
<td><code>a</code>, <code>A</code>, <code>1</code></td>
</tr>
<tr>
<td>修饰键</td>
<td><code>shift</code>, <code>alt</code>(<code>⌥</code>), <code>ctrl</code>, <code>meta</code>(<code>⌘</code>)</td>
</tr>
<tr>
<td>导航和操作键</td>
<td><code>backspace</code>, <code>tab</code>, <code>enter</code>, <code>capslock</code>, <code>esc</code>, <code>space</code>, <code>pageup</code>, <code>pagedown</code>, <code>end</code>, <code>home</code>, <code>left</code>, <code>right</code>, <code>up</code>, <code>down</code>, <code>ins</code>, <code>delete</code></td>
</tr>
<tr>
<td>组合键</td>
<td><code>shift+a</code>, <code>ctrl+d</code></td>
</tr>
<tr>
<td>一番操作</td>
<td><code>ctrl+a del</code>, <code>ctrl+a ctrl+c</code> (自由组合按键，并使用空格分隔它们)</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Key Presses&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> nameInput = <span class="title class_">Selector</span>(<span class="string">&#x27;#developer-name&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">typeText</span>(nameInput, <span class="string">&#x27;Peter Parker&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pressKey</span>(<span class="string">&#x27;home right . delete delete delete delete&#x27;</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(nameInput.<span class="property">value</span>).<span class="title function_">eql</span>(<span class="string">&#x27;P. Parker&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="页面跳转-navigateTo"><a href="#页面跳转-navigateTo" class="headerlink" title="页面跳转 navigateTo">页面跳转 navigateTo</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">navigateTo</span>( url )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>url</code></td>
<td>string</td>
<td>要导航到的 URL 地址。可以是绝对地址或相对地址</td>
</tr>
</tbody></table>
<p>下面的例子来演示如何导航到一个绝对地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Navigate to the main page&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">click</span>(<span class="string">&#x27;#submit-button&#x27;</span>)</span><br><span class="line">    .<span class="title function_">navigateTo</span>(<span class="string">&#x27;http://devexpress.github.io/testcafe&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在重定向发生后，TestCafe 会自动等待服务器响应。如果服务器在 15s 内没有响应，测试将会被恢复(?)。</p>
<h3 id="截图-takeScreenshot"><a href="#截图-takeScreenshot" class="headerlink" title="截图 takeScreenshot">截图 takeScreenshot</a></h3><h4 id="获取整页的屏幕截图-takeScreenshot"><a href="#获取整页的屏幕截图-takeScreenshot" class="headerlink" title="获取整页的屏幕截图 takeScreenshot">获取整页的屏幕截图 takeScreenshot</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">takeScreenshot</span>( [path] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>path</code> <em>(可选的)</em></td>
<td>string</td>
<td>截图文件保存的相对路径和名称，该相对路径是基于命令行制定的基本目录。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Take a screenshot of a fieldset&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">typeText</span>(<span class="string">&#x27;#developer-name&#x27;</span>, <span class="string">&#x27;Peter Parker&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>(<span class="string">&#x27;#submit-button&#x27;</span>)</span><br><span class="line">    .<span class="title function_">takeScreenshot</span>(<span class="string">&#x27;my-fixture/thank-you-page.png&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="获取页面元素的屏幕截图-takeElementScreenshot"><a href="#获取页面元素的屏幕截图-takeElementScreenshot" class="headerlink" title="获取页面元素的屏幕截图 takeElementScreenshot">获取页面元素的屏幕截图 takeElementScreenshot</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">takeScreenshot</span>( [path] )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>selector</code></td>
<td>Function &amp;vert; string &amp;vert; Selector &amp;vert; Snapshot &amp;vert; Promise</td>
<td>selector 选择器，有关<a href="">选择目标元素</a></td>
</tr>
<tr>
<td><code>path</code> <em>(可选的)</em></td>
<td>string</td>
<td>截图文件保存的相对路径和名称，该相对路径是基于命令行制定的基本目录。</td>
</tr>
<tr>
<td><code>options</code> <em>(可选的)</em></td>
<td>Object</td>
<td>用于定义屏幕截图截取方式的选项。详情见下文。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Take a screenshot of a fieldset&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">click</span>(<span class="string">&#x27;#reusing-js-code&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>(<span class="string">&#x27;#continuous-integration-embedding&#x27;</span>)</span><br><span class="line">    .<span class="title function_">takeElementScreenshot</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;fieldset&#x27;</span>).<span class="title function_">nth</span>(<span class="number">1</span>), <span class="string">&#x27;my-fixture/important-features.png&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>options</code> 对象包含以下属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>scrollTargetX</code>, <code>scrollTargetY</code></td>
<td>number</td>
<td>该点的坐标，是相对于目标元素计算的。</td>
<td>元素的中心。</td>
</tr>
<tr>
<td><code>includeMargins</code></td>
<td>boolean</td>
<td>是否包含外边距 (margin)</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>includeBorders</code></td>
<td>boolean</td>
<td>是否包含边框 (border)</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>includePaddings</code></td>
<td>boolean</td>
<td>是否包含内边距 (padding)</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>crop</code></td>
<td>Object</td>
<td>是否允许裁剪屏幕截图上的目标元素。</td>
<td>裁剪到整个元素。如果它不适合窗口大小，则为其可见部分。</td>
</tr>
</tbody></table>
<p><code>crop</code> 对象具有以下字段</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>top</code></td>
<td>number</td>
<td>裁剪矩形的上边缘。如果传递负数，则从元素的下边缘计算坐标。</td>
</tr>
<tr>
<td><code>left</code></td>
<td>number</td>
<td>裁剪矩形的左边缘。如果传递负数，则从元素的右边缘计算坐标。</td>
</tr>
<tr>
<td><code>bottom</code></td>
<td>number</td>
<td>裁剪矩形的下边缘。如果传递负数，则从元素的上边缘计算坐标。</td>
</tr>
<tr>
<td><code>right</code></td>
<td>number</td>
<td>裁剪矩形的右边缘。如果传递负数，则从元素的左边缘计算坐标。</td>
</tr>
</tbody></table>
<p><img src="//static.mutoe.com/2018/testcafe/screenshot-crop.png" alt="take screenshot"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;Take a screenshot of my new avatar&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">click</span>(<span class="string">&#x27;#change-avatar&#x27;</span>)</span><br><span class="line">    .<span class="title function_">setFilesToUpload</span>(<span class="string">&#x27;#upload-input&#x27;</span>, <span class="string">&#x27;img/portrait.jpg&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>(<span class="string">&#x27;#submit&#x27;</span>)</span><br><span class="line">    .<span class="title function_">takeElementScreenshot</span>(<span class="string">&#x27;#avatar&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">includeMargins</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">crop</span>: &#123;</span><br><span class="line">        <span class="attr">top</span>: -<span class="number">100</span>,</span><br><span class="line">        <span class="attr">left</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">bottom</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">right</span>: <span class="number">200</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="上传-setFilesToUpload-no"><a href="#上传-setFilesToUpload-no" class="headerlink" title="上传 setFilesToUpload (no)">上传 setFilesToUpload (no)</a></h3><blockquote>
<p>暂未更新</p>
</blockquote>
<h3 id="调整窗口尺寸-resize-no"><a href="#调整窗口尺寸-resize-no" class="headerlink" title="调整窗口尺寸 resize (no)">调整窗口尺寸 resize (no)</a></h3><blockquote>
<p>暂未更新</p>
</blockquote>
<h3 id="动作选项-options"><a href="#动作选项-options" class="headerlink" title="动作选项 options">动作选项 options</a></h3><h4 id="基本动作选项-basic-action"><a href="#基本动作选项-basic-action" class="headerlink" title="基本动作选项 basic action">基本动作选项 basic action</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">speed</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>speed</code></td>
<td>number</td>
<td>动作的速度，在 <code>1</code>(最大速度) 和 <code>0.01</code>(最小速度) 之间</td>
<td><code>1</code></td>
</tr>
</tbody></table>
<p>基本动作选项用于 <code>t.pressKey</code>，<code>t.selectText</code>，<code>t.selectTextAreaContent</code> 和 <code>t.selectEditableContent</code> 动作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My Test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> nameInput = <span class="title class_">Selector</span>(<span class="string">&#x27;#developer-name&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">typeText</span>(nameInput, <span class="string">&#x27;Peter&#x27;</span>)</span><br><span class="line">    .<span class="title function_">typeText</span>(nameInput, <span class="string">&#x27; Parker&#x27;</span>, &#123; <span class="attr">speed</span>: <span class="number">0.1</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="鼠标动作选项-mouse-action"><a href="#鼠标动作选项-mouse-action" class="headerlink" title="鼠标动作选项 mouse action">鼠标动作选项 mouse action</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">modifiers</span>: &#123;</span><br><span class="line">    <span class="attr">ctrl</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">shift</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">meta</span>: <span class="title class_">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">offsetX</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">offsetY</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">speed</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>ctrl</code> <code>alt</code> <code>shift</code> <code>meta</code></td>
<td>boolean</td>
<td>在鼠标操作期间要按下的修饰键</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>offsetX</code> <code>offsetY</code></td>
<td>number</td>
<td>鼠标指针坐标，正整数从左上角计算，负整数从右下角计算</td>
<td>目标元素的中心</td>
</tr>
<tr>
<td><code>speed</code></td>
<td>number</td>
<td>动作的速度，在 <code>1</code>(最大速度) 和 <code>0.01</code>(最小速度) 之间</td>
<td><code>1</code></td>
</tr>
</tbody></table>
<p>鼠标动作选项用于 <code>t.drag</code> 和 <code>t.hover</code> 动作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My Test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">drag</span>(sliderHandle, <span class="number">360</span>, <span class="number">0</span>, &#123;</span><br><span class="line">      <span class="attr">offsetX</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">offsetY</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">modifiers</span>: &#123;</span><br><span class="line">        <span class="attr">shift</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="拖拽到元素动作选项-dragToElement-action"><a href="#拖拽到元素动作选项-dragToElement-action" class="headerlink" title="拖拽到元素动作选项 dragToElement action">拖拽到元素动作选项 dragToElement action</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">modifiers</span>: &#123;</span><br><span class="line">    <span class="attr">ctrl</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">shift</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">meta</span>: <span class="title class_">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">offsetX</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">offsetY</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">destinationOffsetX</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">destinationOffsetY</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">speed</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>ctrl</code> <code>alt</code> <code>shift</code> <code>meta</code></td>
<td>boolean</td>
<td>在鼠标操作期间要按下的修饰键</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>offsetX</code> <code>offsetY</code></td>
<td>number</td>
<td>鼠标指针坐标，正整数从左上角计算，负整数从右下角计算</td>
<td>目标元素的中心</td>
</tr>
<tr>
<td><code>destinationOffsetX</code> <code>destinationOffsetY</code></td>
<td>number</td>
<td>鼠标拖拽完成时的指针坐标，正整数从左上角计算，负整数从右下角计算</td>
<td>目标元素的中心</td>
</tr>
<tr>
<td><code>speed</code></td>
<td>number</td>
<td>动作的速度，在 <code>1</code>(最大速度) 和 <code>0.01</code>(最小速度) 之间</td>
<td><code>1</code></td>
</tr>
</tbody></table>
<p>拖拽到元素动作选项用于 <code>t.dragToElement</code> 动作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My Test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> fileIcon      = <span class="title class_">Selector</span>(<span class="string">&#x27;.file-icon&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> directoryPane = <span class="title class_">Selector</span>(<span class="string">&#x27;.directory&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">dragToElement</span>(fileIcon, directoryPane, &#123;</span><br><span class="line">      <span class="attr">offsetX</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">offsetY</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">destinationOffsetX</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">destinationOffsetY</span>: <span class="number">50</span>,</span><br><span class="line">      <span class="attr">modifiers</span>: &#123;</span><br><span class="line">        <span class="attr">shift</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="点击动作选项-click-action"><a href="#点击动作选项-click-action" class="headerlink" title="点击动作选项 click action">点击动作选项 click action</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">modifiers</span>: &#123;</span><br><span class="line">    <span class="attr">ctrl</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">shift</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">meta</span>: <span class="title class_">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">offsetX</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">offsetY</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">caretPos</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">speed</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>ctrl</code> <code>alt</code> <code>shift</code> <code>meta</code></td>
<td>boolean</td>
<td>在鼠标操作期间要按下的修饰键</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>offsetX</code> <code>offsetY</code></td>
<td>number</td>
<td>鼠标指针坐标，正整数从左上角计算，负整数从右下角计算</td>
<td>目标元素的中心</td>
</tr>
<tr>
<td><code>caretPos</code></td>
<td>number</td>
<td>如果在输入元素上执行动作，则为初始插入符号位置，从零开始的整数。</td>
<td>文本长度</td>
</tr>
<tr>
<td><code>speed</code></td>
<td>number</td>
<td>动作的速度，在 <code>1</code>(最大速度) 和 <code>0.01</code>(最小速度) 之间</td>
<td><code>1</code></td>
</tr>
</tbody></table>
<p>点击操作选项用于 <code>t.click</code>，<code>t.doubleClick</code> 和 <code>t.rightClick</code> 动作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My Test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> nameInput = <span class="title class_">Selector</span>(<span class="string">&#x27;#developer-name&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">typeText</span>(nameInput, <span class="string">&#x27;Pete Parker&#x27;</span>)</span><br><span class="line">    .<span class="title function_">click</span>(nameInput, &#123; <span class="attr">caretPos</span>: <span class="number">4</span> &#125;)</span><br><span class="line">    .<span class="title function_">pressKey</span>(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="输入动作选项-typing-action"><a href="#输入动作选项-typing-action" class="headerlink" title="输入动作选项 typing action">输入动作选项 typing action</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">modifiers</span>: &#123;</span><br><span class="line">    <span class="attr">ctrl</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">alt</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">shift</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">meta</span>: <span class="title class_">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">offsetX</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">offsetY</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">caretPos</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">replace</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  <span class="attr">paste</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">  <span class="attr">speed</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>ctrl</code> <code>alt</code> <code>shift</code> <code>meta</code></td>
<td>boolean</td>
<td>在鼠标操作期间要按下的修饰键</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>offsetX</code> <code>offsetY</code></td>
<td>number</td>
<td>鼠标指针坐标，正整数从左上角计算，负整数从右下角计算</td>
<td>目标元素的中心</td>
</tr>
<tr>
<td><code>caretPos</code></td>
<td>number</td>
<td>如果在输入元素上执行动作，则为初始插入符号位置，从零开始的整数。</td>
<td>文本长度</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>boolean</td>
<td>是否替换原有文本</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>paste</code></td>
<td>boolean</td>
<td>是否使用粘贴的方式一次性键入文本</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>speed</code></td>
<td>number</td>
<td>动作的速度，在 <code>1</code>(最大速度) 和 <code>0.01</code>(最小速度) 之间</td>
<td><code>1</code></td>
</tr>
</tbody></table>
<p>输入动作选项用于 <code>t.typeText</code> 动作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My Test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t</span><br><span class="line">    .<span class="title function_">typeText</span>(nameInput, <span class="string">&#x27;Peter&#x27;</span>)</span><br><span class="line">    .<span class="title function_">typeText</span>(nameInput, <span class="string">&#x27;Parker&#x27;</span>, &#123; <span class="attr">replace</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="断言-1"><a href="#断言-1" class="headerlink" title="断言">断言</a></h2><p>你可以使用断言来检查测试的网页状态是否与预期状态匹配。<br>TestCafe 提供了一组基于行为驱动开发风格（BDD风格）的断言方法。</p>
<h3 id="构造断言"><a href="#构造断言" class="headerlink" title="构造断言">构造断言</a></h3><p>要构造一个断言，可以使用测试控制器 (<code>t</code>) 的 expect 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual )</span><br></pre></td></tr></table></figure>

<p>这个构造方法接受一个实际值，可以是 selector 的 DOM 节点状态属性或者是一个从页面中侦听到的 promise 对象。
TestCafe 会自动等待节点状态值的变动。</p>
<p>接下来跟一个断言方法，他接受期望值和一些其他的可选参数。</p>
<h3 id="断言方法"><a href="#断言方法" class="headerlink" title="断言方法">断言方法</a></h3><h4 id="等于-eql"><a href="#等于-eql" class="headerlink" title="等于 eql">等于 eql</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">eql</span>( expected [, message] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>Any</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>expected</code></td>
<td>Any</td>
<td>期望值</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t</span><br><span class="line">  .<span class="title function_">expect</span>(&#123; <span class="attr">a</span>: <span class="string">&#x27;bar&#x27;</span> &#125;).<span class="title function_">eql</span>(&#123; <span class="attr">a</span>: <span class="string">&#x27;bar&#x27;</span> &#125;, <span class="string">&#x27;这个断言将会通过&#x27;</span>)</span><br><span class="line">  .<span class="title function_">expect</span>(&#123; <span class="attr">a</span>: <span class="string">&#x27;bar&#x27;</span> &#125;).<span class="title function_">eql</span>(&#123; <span class="attr">a</span>: <span class="string">&#x27;foo&#x27;</span> &#125;, <span class="string">&#x27;这个断言将会失败，并且这句话会被打印出来&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;.className&#x27;</span>).<span class="property">count</span>).<span class="title function_">eql</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="不等于-notEql"><a href="#不等于-notEql" class="headerlink" title="不等于 notEql">不等于 notEql</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">notEql</span>( unexpected [, message] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>Any</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>unexpected</code></td>
<td>Any</td>
<td>不期望的值</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t</span><br><span class="line">  .<span class="title function_">expect</span>(&#123; <span class="attr">a</span>: <span class="string">&#x27;bar&#x27;</span> &#125;).<span class="title function_">notEql</span>(&#123; <span class="attr">a</span>: <span class="string">&#x27;bar&#x27;</span> &#125;, <span class="string">&#x27;这个断言将会失败，并且这句话会被打印出来&#x27;</span>)</span><br><span class="line">  .<span class="title function_">expect</span>(&#123; <span class="attr">a</span>: <span class="string">&#x27;bar&#x27;</span> &#125;).<span class="title function_">notEql</span>(&#123; <span class="attr">a</span>: <span class="string">&#x27;foo&#x27;</span> &#125;, <span class="string">&#x27;这个断言将会通过&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;.className&#x27;</span>).<span class="property">count</span>).<span class="title function_">notEql</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="真值-ok"><a href="#真值-ok" class="headerlink" title="真值 ok">真值 ok</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">ok</span>( [ message ] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>Any</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t</span><br><span class="line">  .<span class="title function_">expect</span>(<span class="string">&#x27;ok&#x27;</span>).<span class="title function_">ok</span>(<span class="string">&#x27;这个断言将会通过&#x27;</span>)</span><br><span class="line">  .<span class="title function_">expect</span>(<span class="literal">false</span>).<span class="title function_">ok</span>(<span class="string">&#x27;这个断言将会失败，并且这句话会被打印出来&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#element&#x27;</span>).<span class="property">exists</span>).<span class="title function_">ok</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="假值-notOk"><a href="#假值-notOk" class="headerlink" title="假值 notOk">假值 notOk</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">notOk</span>( [ message ] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>Any</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t</span><br><span class="line">  .<span class="title function_">expect</span>(<span class="string">&#x27;ok&#x27;</span>).<span class="title function_">notOk</span>(<span class="string">&#x27;这个断言将会失败，并且这句话会被打印出来&#x27;</span>)</span><br><span class="line">  .<span class="title function_">expect</span>(<span class="literal">false</span>).<span class="title function_">notOk</span>(<span class="string">&#x27;这个断言将会通过&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#element&#x27;</span>).<span class="property">exists</span>).<span class="title function_">notOk</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="包含-contains"><a href="#包含-contains" class="headerlink" title="包含 contains">包含 contains</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">contains</span>( expected [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>Any</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>expected</code></td>
<td>Any</td>
<td>期望值</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t</span><br><span class="line">  .<span class="title function_">expect</span>(<span class="string">&#x27;foo bar&#x27;</span>).<span class="title function_">contains</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;用例未通过：字符串 &quot;foo bar&quot; 里面不含有期望的 &quot;bar&quot; 子串&#x27;</span>)</span><br><span class="line">  .<span class="title function_">expect</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).<span class="title function_">contains</span>(<span class="number">2</span>, <span class="string">&#x27;用例未通过：数组中不含有期望的值&#x27;</span>)</span><br><span class="line">  .<span class="title function_">expect</span>(&#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">hello</span>: <span class="string">&#x27;universe&#x27;</span> &#125;).<span class="title function_">contains</span>(&#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;, <span class="string">&#x27;用例未通过：对象中不含有期望的属性&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> getLocation = <span class="title class_">ClientFunction</span>(<span class="function">() =&gt;</span> <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">toString</span>())</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title function_">getLocation</span>()).<span class="title function_">contains</span>(<span class="string">&#x27;example.com&#x27;</span>, <span class="string">&#x27;用例未通过：网址不包含期望的值&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="不包含-notContains"><a href="#不包含-notContains" class="headerlink" title="不包含 notContains">不包含 notContains</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">notContains</span>( unexpected [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>Any</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>unexpected</code></td>
<td>Any</td>
<td>不期望的值</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t</span><br><span class="line">  .<span class="title function_">expect</span>(<span class="string">&#x27;foo bar&#x27;</span>).<span class="title function_">notContains</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;用例未通过：字符串中含有不期望的子串&#x27;</span>)</span><br><span class="line">  .<span class="title function_">expect</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).<span class="title function_">notContains</span>(<span class="number">2</span>, <span class="string">&#x27;用例未通过：数组中含有不期望的值&#x27;</span>)</span><br><span class="line">  .<span class="title function_">expect</span>(&#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">hello</span>: <span class="string">&#x27;universe&#x27;</span> &#125;).<span class="title function_">notContains</span>(&#123; <span class="attr">buzz</span>: <span class="string">&#x27;abc&#x27;</span> &#125;, <span class="string">&#x27;用例未通过：对象中含有不期望的属性&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> getLocation = <span class="title class_">ClientFunction</span>(<span class="function">() =&gt;</span> <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">toString</span>())</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title function_">getLocation</span>()).<span class="title function_">notContains</span>(<span class="string">&#x27;example.com&#x27;</span>, <span class="string">&#x27;用例未通过：网址包含了不被期望的值&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="类型等于-tyoeOf"><a href="#类型等于-tyoeOf" class="headerlink" title="类型等于 tyoeOf">类型等于 tyoeOf</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">typeOf</span>( typeName [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>Any</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>typeName</code></td>
<td>string</td>
<td>期望的 <code>actual</code> 的类型</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t</span><br><span class="line">  .<span class="title function_">expect</span>(&#123; <span class="attr">a</span>: <span class="string">&#x27;bar&#x27;</span> &#125;).<span class="title function_">typeOf</span>(<span class="string">&#x27;object&#x27;</span>, <span class="string">&#x27;用例未通过：比较值不是对象&#x27;</span>)</span><br><span class="line">  .<span class="title function_">expect</span>(<span class="regexp">/bar/</span>).<span class="title function_">typeOf</span>(<span class="string">&#x27;regexp&#x27;</span>, <span class="string">&#x27;用例未通过：比较值不是正则表达式&#x27;</span>)</span><br><span class="line">  .<span class="title function_">expect</span>(<span class="literal">null</span>).<span class="title function_">typeOf</span>(<span class="string">&#x27;null&#x27;</span>, <span class="string">&#x27;用例未通过：比较值不为null&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#element&#x27;</span>).<span class="title function_">getAttribute</span>(<span class="string">&#x27;attr&#x27;</span>)).<span class="title function_">typeOf</span>(<span class="string">&#x27;string&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="类型不等于-notTypeOf"><a href="#类型不等于-notTypeOf" class="headerlink" title="类型不等于 notTypeOf">类型不等于 notTypeOf</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">notTypeOf</span>( typeName [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>Any</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>typeName</code></td>
<td>string</td>
<td>不期望的 <code>actual</code> 的类型</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t</span><br><span class="line">  .<span class="title function_">expect</span>(<span class="string">&#x27;bar&#x27;</span>).<span class="title function_">notTypeOf</span>(<span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;用例未通过：比较值不是数字类型&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#element&#x27;</span>).<span class="title function_">getAttribute</span>(<span class="string">&#x27;attr&#x27;</span>)).<span class="title function_">notTypeOf</span>(<span class="string">&#x27;null&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="大于-gt"><a href="#大于-gt" class="headerlink" title="大于 gt">大于 gt</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">gt</span>( expected [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>Any</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>expected</code></td>
<td>Any</td>
<td>期望的值</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="number">5</span>).<span class="title function_">gt</span>(<span class="number">2</span>, <span class="string">&#x27;用例未通过：比较值应该比 2 大&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#element&#x27;</span>).<span class="property">clientWidth</span>).<span class="title function_">gt</span>(<span class="number">300</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="大于等于-gte"><a href="#大于等于-gte" class="headerlink" title="大于等于 gte">大于等于 gte</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">gte</span>( expected [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<p>用法同 <a href="#%E5%A4%A7%E4%BA%8E-gt"><code>gt</code></a></p>
<h4 id="小于-lt"><a href="#小于-lt" class="headerlink" title="小于 lt">小于 lt</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">lt</span>( expected [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<p>用法同 <a href="#%E5%A4%A7%E4%BA%8E-gt"><code>gt</code></a></p>
<h4 id="小于等于-lte"><a href="#小于等于-lte" class="headerlink" title="小于等于 lte">小于等于 lte</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">lte</span>( expected [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<p>用法同 <a href="#%E5%A4%A7%E4%BA%8E-gt"><code>gt</code></a></p>
<h4 id="在某个范围-within"><a href="#在某个范围-within" class="headerlink" title="在某个范围 within">在某个范围 within</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">within</span>( start, finish [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>number</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>start</code></td>
<td>number</td>
<td>范围下限（包含）</td>
</tr>
<tr>
<td><code>finish</code></td>
<td>number</td>
<td>范围上限（包含）</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="number">5</span>).<span class="title function_">within</span>(<span class="number">3</span>, <span class="number">10</span>, <span class="string">&#x27;这个断言将会通过&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#element&#x27;</span>).<span class="property">scrollTop</span>).<span class="title function_">within</span>(<span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="不在某个范围-notWithin"><a href="#不在某个范围-notWithin" class="headerlink" title="不在某个范围 notWithin">不在某个范围 notWithin</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">notWithin</span>( start, finish [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<p>用法同 <a href="#%E5%9C%A8%E6%9F%90%E4%B8%AA%E8%8C%83%E5%9B%B4-within"><code>within</code></a></p>
<h4 id="正则匹配-match"><a href="#正则匹配-match" class="headerlink" title="正则匹配 match">正则匹配 match</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">match</span>( regexp [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>actual</code></td>
<td>string</td>
<td>比较值，如果是一个 promise 对象，TestCafe 会自动等待值的变化</td>
</tr>
<tr>
<td><code>regexp</code></td>
<td>RegExp</td>
<td>用来匹配 <code>actual</code> 的正则表达式</td>
</tr>
<tr>
<td><code>message</code> <em>(optional)</em></td>
<td>string</td>
<td>如果测试失败，需要在测试报告中输出的字符串</td>
</tr>
<tr>
<td><code>options</code> <em>(optional)</em></td>
<td>Object</td>
<td>参见<a href="#%E6%96%AD%E8%A8%80%E9%80%89%E9%A1%B9">断言选项</a></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="string">&#x27;foobar&#x27;</span>).<span class="title function_">match</span>(<span class="regexp">/^f/</span>, <span class="string">&#x27;这个断言将会通过&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;My test&#x27;</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> getLocation = <span class="title class_">ClientFunction</span>(<span class="function">() =&gt;</span> <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title function_">getLocation</span>()).<span class="title function_">match</span>(<span class="regexp">/\.com/</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="非正则匹配-notMatch"><a href="#非正则匹配-notMatch" class="headerlink" title="非正则匹配 notMatch">非正则匹配 notMatch</a></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>( actual ).<span class="title function_">notMatch</span>( regexp [, message ] [, options ])</span><br></pre></td></tr></table></figure>

<p>用法同 <a href="#%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D-match"><code>match</code></a></p>
<h3 id="断言选项"><a href="#断言选项" class="headerlink" title="断言选项">断言选项</a></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">allowUnawaitedPromise</span>: <span class="title class_">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>timeout</code></td>
<td>number</td>
<td>如果在断言中使用了属性选择器或客户端函数，可等待的最大时间 (单位：ms)</td>
<td></td>
</tr>
<tr>
<td><code>allowUnawaitedPromise</code></td>
<td>boolean</td>
<td>如果你要断言一个常规的 promise 方法，请将该选项设置为 <code>true</code></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title class_">Selector</span>(<span class="string">&#x27;#elementId&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">eql</span>(<span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;在 500ms 内检查元素的文本&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">500</span> &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t.<span class="title function_">expect</span>(<span class="title function_">doSomethingAsync</span>()).<span class="title function_">ok</span>(<span class="string">&#x27;检查异步函数是否含回了 promise 对象&#x27;</span>, &#123; <span class="attr">allowUnawaitedPromise</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="客户端方法-no"><a href="#客户端方法-no" class="headerlink" title="客户端方法 (no)">客户端方法 (no)</a></h2><blockquote>
<p>暂未更新</p>
</blockquote>
<h2 id="等待"><a href="#等待" class="headerlink" title="等待">等待</a></h2><p>无论出于什么原因，让测试暂停一小会</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">t.<span class="title function_">wait</span>( timeout )</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>timeout</code></td>
<td>number</td>
<td>暂停的持续时间，单位 ms</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> t</span><br><span class="line">  .<span class="title function_">click</span>(<span class="string">&#x27;#play-1-sec-animation&#x27;</span>)</span><br><span class="line">  .<span class="title function_">wait</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">expect</span>(header.<span class="title function_">getStyleProperty</span>(<span class="string">&#x27;opacity&#x27;</span>)).<span class="title function_">eql</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Test</tag>
        <tag>NodeJS</tag>
        <tag>Testcafe</tag>
      </tags>
  </entry>
  <entry>
    <title>我该不该清除电脑中的“垃圾”</title>
    <url>//2017/the-application-s-cookie-and-cache/</url>
    <content><![CDATA[<blockquote>
<p>本文是针对小白的科普向文章, 我会尽量使用浅显通俗的语言, 让小白们尽可能看懂.</p>
</blockquote>
<p>很多人有这样一个误区, 在使用电脑感觉比较 “卡” 时, 就想清理一下电脑里面的垃圾来加快运行速度.
但我到底该不该时常清除电脑中的 “垃圾” 呢? 换句话说, 清理 “垃圾” 真的能加速电脑运行吗?</p>
<p>下面我们简单介绍一下 “垃圾”, 如果你只想知道该不该清理, 直接跳到底部结论部分即可.</p>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/360.png" alt="360中的垃圾清理"></p>
<p><em>我使用 360 安全卫士 (版本 11.2) 的电脑清理功能为例, 列举电脑中的 “垃圾” 可以分为哪些类别.</em></p>
<span id="more"></span>

<h1 id="1-“垃圾”-的组成及作用"><a href="#1-“垃圾”-的组成及作用" class="headerlink" title="1. “垃圾” 的组成及作用">1. “垃圾” 的组成及作用</a></h1><p>在我看来, 垃圾的组成部分应该包括“插件”、“日志”、“缓存”、“临时文件”以及其他零碎的文件. 我们分文别类的看看这些东西是什么.</p>
<h2 id="1-1-插件类"><a href="#1-1-插件类" class="headerlink" title="1.1 插件类">1.1 插件类</a></h2><p>这类 “垃圾” 一般是用来增强系统功能性的, 一般占用空间较小, 随应用(或系统)启动, 如果插件不是恶意的, <strong>不建议清理</strong>.</p>
<p>不同的插件有不同的功能, 或许也有恶意插件, 不过随着互联网时代发展, 这类插件越来越不容易被安装到电脑上, 我们看看常用的浏览器或系统插件.</p>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/plugin.png" alt="插件"></p>
<h3 id="快速登陆插件"><a href="#快速登陆插件" class="headerlink" title="快速登陆插件">快速登陆插件</a></h3><p>最经典的应用场景就是 QQ 的快速登陆了, 这种插件是用来检测你是否登陆了 QQ, 如果登陆了则可使用快速登录功能.</p>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/quick-login.png" alt="快速登陆"></p>
<h3 id="安全组件"><a href="#安全组件" class="headerlink" title="安全组件">安全组件</a></h3><p>在你输入支付密码或其他安全性要求较高的表单时, 这类插件往往能达到反监视的作用, 提高支付安全性.</p>
<h3 id="软件调用插件"><a href="#软件调用插件" class="headerlink" title="软件调用插件">软件调用插件</a></h3><p>在你进入特定协议的链接时(如 thunder:&#x2F;&#x2F; ed2k:&#x2F;&#x2F; magnet:&#x2F;&#x2F; 等), 能够启动已经关联该协议的软件, 如各类下载软件, 网盘等客户端.</p>
<blockquote>
<p>你可以在浏览器地址栏中输入 <code>thunder://</code> 然后回车试试效果, 会自动启动迅雷软件. (需要安装迅雷)</p>
</blockquote>
<h3 id="在线播放插件"><a href="#在线播放插件" class="headerlink" title="在线播放插件">在线播放插件</a></h3><p>这应该是应用最多的场景了, Flash &#x2F; RealPlayer 等. 如果没有这类插件, 你将不能在网页上观看优酷爱奇艺等视频了.
不过随着 HTML5 时代的到来, 未来可能不会再依赖这些插件了, 但至少你现在还需要.</p>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/flash.png" alt="flash"></p>
<h2 id="1-2-日志文件"><a href="#1-2-日志文件" class="headerlink" title="1.2 日志文件">1.2 日志文件</a></h2><p>这类 “垃圾” 一般以 “log” 为文件后缀名, 建议每 3 个月清理一次.
日志的作用是供开发人云保存软件的运行纪录, 以便在软件出现错误时查看并分析错误原因来改进.</p>
<p>日志的大小不一定, 这是按开发人员纪录日志的详细程度决定的, 内容一般如下</p>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/log-detail.png" alt="log内容"></p>
<p>我的图站服务器产生的日志文件每天约 300KB, 一个月产生 3M, 说大不大, 一般超过 3 个月的日志没什么作用, 这样的日志就是真正的 “垃圾” 了.
不过有的软件自带清理日志功能, 倒不必担心占用很大的空间.</p>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/log.png" alt="log"></p>
<blockquote>
<p><strong>小插曲</strong>
我们工作室曾经有一台服务器的日志文件竟然达到了 62GB, 导致磁盘空间不够, 服务停止了很久, 最后才发现这个 “毒瘤”. 所以说日志文件虽小, 但经不住日积月累的膨胀呀.</p>
</blockquote>
<h2 id="1-3-缓存文件"><a href="#1-3-缓存文件" class="headerlink" title="1.3 缓存文件">1.3 缓存文件</a></h2><p>这类文件主要用来将网络资源存放在本地, 以便你下次查看时迅速加载.</p>
<p>缓存文件一般是图片或媒体文件, 是 “垃圾” 占用空间比重较大的部分.
比重虽大, 但__不建议经常清理__, 3 - 6 个月清理一次即可.</p>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/qq.png" alt="qq个人文件夹"></p>
<p>比如 QQ 聊天消息中的各种图片 &#x2F; 语音消息等, 都会缓存在 QQ 个人文件夹中, 如果你不设置自动清理, 这个文件夹会无穷增大, 直到占满你的硬盘空间.</p>
<blockquote>
<p>我曾经加入过几个斗图群, 几个群非常活跃, 每天千余条图片消息, 哪怕不点开消息, 这些图片缓存文件每天就产生近 400M, 太可怕了, 还好有自动清理功能.</p>
</blockquote>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/163music.png" alt="网易云音乐的缓存">
<em>网易云音乐的缓存设置页面</em></p>
<p>你听歌时, 看视频时, 都会产生缓存文件, 以便在你下次再听时能立即听到.
一般媒体软件都有设置缓存文件的位置和大小限制, 在软件设置的 “下载” 或 “缓存” 选项卡中.</p>
<p>如果没有这些缓存文件, 你需要在下次查看时重新下载这些文件, 加载需要等待一段时间, 这__反而拖慢了软件运行速度__, 尤其是一些流量上网的用户更会苦不堪言.</p>
<h2 id="1-4-临时文件"><a href="#1-4-临时文件" class="headerlink" title="1.4 临时文件">1.4 临时文件</a></h2><p>这类文件和缓存文件很像, 可以把它理解为缓存文件.
临时文件的内容什么都有, 小到几字节的文本文件, 大到几个 G 的文件.</p>
<p>这类文件可以时常清理, 也可以放任不管, 不会变得很大, 并无大碍.</p>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/windows-temp.png" alt="temp"></p>
<p>临时文件主要产生方式有浏览网页 &#x2F; 下载 &#x2F; 查看压缩文件等, 给软件运行提供一媒体的存放空间.</p>
<p>还有一种特别的临时文件, 那就是回收站. 回收站的误删除文件后, 能够将文件找回. 删除文件只是将文件标记了一下, 空间并没有被释放. 清空回收站时这些空间才被释放.</p>
<p>所以针对回收站, 你需要进去看看还有没有可能需要的文件, 没有的话再清空回收站是比较妥当的做法. 以免清空后用更麻烦的方式找回来.</p>
<h2 id="1-5-数据文件"><a href="#1-5-数据文件" class="headerlink" title="1.5 数据文件">1.5 数据文件</a></h2><p>数据文件一般保存了软件的用户设置, 授权信息, 以及其他存放在本地的数据等.</p>
<p>这类文件一般占用空间较小, <strong>不建议清理</strong>.</p>
<p>个别软件需要针对性的清理, 如 QQ &#x2F; 微信 产生的聊天记录数据库, 这些文件可能比较重要, 但是占用空间累积下来会比较大. 可以根据你的需要来清理或保留.</p>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/qq-msgdb.png" alt="qq聊天记录">
<em>上图是我 3 年来产生的聊天记录数据库, 仅仅是文字就达到了 1.35GB, 这些聊天记录并没有保存在云端, 所以这个文件被清理掉就会导致我丢失所有人的聊天记录.</em></p>
<h2 id="1-6-其他零碎文件"><a href="#1-6-其他零碎文件" class="headerlink" title="1.6 其他零碎文件">1.6 其他零碎文件</a></h2><p>其他零碎的文件一般占用空间小, 对系统运行速度几乎也没有影响,如 cookie. 这类文件也__不建议清理__.</p>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie">cookie</a></h3><p>cookie 类似数据文件, 主要是在浏览网页时产生的, 它一般是用来保存你的登录信息 &#x2F; 浏览习惯等, 以便于你下次打开浏览器时自动登录. 如果你清除了它, 那么你下次访问登录过的网站需要重新登录.</p>
<p><img src="//static.mutoe.com/2017/the-application-s-cookie-and-cache/autologin.png" alt="自动登录">
<em>网站的自动登陆信息就是保存在 cookie 里的</em></p>
<p>不同的浏览器 cookie 不通用, 保存位置也不同, <strong>不建议清除</strong>.</p>
<h1 id="2-结论"><a href="#2-结论" class="headerlink" title="2. 结论">2. 结论</a></h1><h3 id="清理垃圾不能提高系统运行速度"><a href="#清理垃圾不能提高系统运行速度" class="headerlink" title="清理垃圾不能提高系统运行速度.">清理垃圾不能提高系统运行速度.</a></h3><p>清理这些 “垃圾” 的原因其实是在你磁盘空间不太够用时才需要清理, 是一种 “用时间换空间” 的做法, 你清除的这些垃圾, 得到的空间会在将来花成倍的时间下载回来.</p>
<p>不要有强迫心理, 觉得不清扫掉这些 “垃圾” 不爽, “垃圾” 只是被强扣的帽子, 自然有它产生的原因.</p>
<p>建议按电脑使用频率来决定垃圾清理频率.
如果你每天都使用电脑2个小时以上, 你可以每隔 3 个月清理一次垃圾.
如果你每星期只使用几次, 只是看看视频之类的, 可以每隔 6 个月清理一次垃圾.</p>
<hr>
<p>以上观点为个人总结, 如果你有不同的见解或者补充, 可以在下方评论区留言, 我们一起讨论.</p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
  </entry>
  <entry>
    <title>点开一个网站浏览器背后究竟做了哪些事情</title>
    <url>//2017/the-principle-of-browsers-work/</url>
    <content><![CDATA[<p>在你浏览网页的时候, 会碰到点击某个链接结果告诉我网站错误 403 &#x2F; 404, 或者 500 之类的错误代码, 阿洗吧, 本来快乐的心情一下子变得很糟糕啊, 勾起了我的好奇心却不让我进去!! 该死的网站管理员!!</p>
<p><img src="//static.mutoe.com/2017/the-principle-of-browsers-work/example-404.png" alt="example-404"></p>
<p>本文主要通过访问我的学校官网来介绍你从__点击一个链接__到显示出来这个过程中, 浏览器在后台都干了些什么.</p>
<span id="more"></span>

<h2 id="1-访问某个域名地址"><a href="#1-访问某个域名地址" class="headerlink" title="1. 访问某个域名地址">1. 访问某个域名地址</a></h2><p>当我们通过浏览器点击超链接、访问收藏夹或者直接敲入地址时, 这个请求首先会通过 DNS 服务器将域名地址转化为 IP 地址, 也就是说你通过校园网访问 <a href="http://www.cqjtu.edu.cn/">www.cqjtu.edu.cn</a> 会被解析成 202.202.240.6, 而当 DNS 服务器出错时直接访问 IP 地址是可以进入校内主页的.</p>
<p><img src="//static.mutoe.com/2017/the-principle-of-browsers-work/ping.png" alt="ping"></p>
<p>上图请求超时请忽略(可能是校方屏蔽了 ping 请求), 但是我们能看到 <a href="http://www.cqjtu.edu.cn/">www.cqjtu.edu.cn</a> 已经成功的被 DNS 解析到了 202.202.240.6</p>
<p>所以有些时候你会发现__电脑能上 QQ, 但是网页却打不开__, 这就是 DNS 服务配置或 DNS 服务器出现了问题.不要慌张, 重置本机 DNS 配置即可.</p>
<blockquote>
<p>win7 中修改和重置 DNS 可参考以下步骤:</p>
<ol>
<li>右击右下角网络图标;</li>
<li>再单击 “打开网络和共享中心”;</li>
<li>单击活动网络下的需要修改的网络连接, 点击 “属性” ;</li>
<li>或者单击左边的 “更改适配器设置” , 再右击 “本地连接” , 选择 “属性” ;</li>
<li>双击下面的 “INTERNET协议版本4(TCP&#x2F;IPv4), 选择下面的 “自动获得DNS服务器地址” ;</li>
<li>到这里, 再试下能否正常访问网页, 如果可以则可跳过下列步骤.</li>
<li>然后, 点击 “开始” 菜单, 点击 “程序” , 选择 “附件” ;</li>
<li>在击 “命令提示符” , 选择 “以管理员身份运行” ;</li>
<li>输入 “ipconfig &#x2F;flushdns” 命令并回车即可.</li>
</ol>
</blockquote>
<h2 id="2-得到该域名指向的-IP-地址"><a href="#2-得到该域名指向的-IP-地址" class="headerlink" title="2. 得到该域名指向的 IP 地址">2. 得到该域名指向的 IP 地址</a></h2><p>好了, 现在主机找到了, 开始访问吧.首先要建立一个 TCP 连接, 因为 TCP 连接是通过 ip 和端口建立的, 所以之前还有一个 DNS 解析过程, 现在我们已经得到了 IP 地址, 就差端口号了.如果 url 里不包含端口号, 则会使用该协议的默认端口号. http 协议使用的默认端口号为 80, https 协议使用的默认端口号为 443, 其他网络传输协议(如 ftp &#x2F; ssh 等)本文暂不详谈.</p>
<blockquote>
<p>TCP&#x2F;IP 协议原理简述: 服务器主机就像一个房间, 而端口就像各式各样的插座, 两孔三孔 220V 交流电插座, 有线电视数据插孔, RJ45 电话线插孔等等.客户端则将设备插入约定好的插孔按照约定开始工作.通过 http 访问服务器时会默认使用 80 端口(指定访问其他端口也可), 主机监听到有 “设备” 访问 80 端口时会引导该 “设备” 去该去的地方.</p>
</blockquote>
<h2 id="3-向服务器发送访问请求"><a href="#3-向服务器发送访问请求" class="headerlink" title="3. 向服务器发送访问请求">3. 向服务器发送访问请求</a></h2><p>现在成功建立了一个 TCP 连接, 接下来开始向服务器提交一个访问请求, 这个请求一般是 GET 或 POST 命令 ( POST一般用于提交表单 ) . GET 命令的格式为:</p>
<pre><code>GET 路径/文件名 HTTP/1.0
</code></pre>
<p>文件名指出所访问的文件, HTTP&#x2F;1.0 指出 Web 浏览器使用的 HTTP 版本.现在可以发送GET命令: <code>GET /index.html HTTP/1.0</code>, 主机会将请求引导至服务器根目录下的相应路径.</p>
<p>注意这里我们说的主机和服务器不是一个概念, 服务器是安装在主机内的一款软件, 常用的服务器软件有 IIS、Apache、Nginx 等等, 而主机是一台机器, 指的是含有 CPU 内存等等的硬件设备.</p>
<h2 id="4-应答请求-进行处理"><a href="#4-应答请求-进行处理" class="headerlink" title="4. 应答请求, 进行处理">4. 应答请求, 进行处理</a></h2><p>服务器收到 GET 访问请求后, 从它的文档空间中找到文件 index.html, 并应答该请求( Request ).如果找到该文件, 服务器把该文件内容传送给相应的 Web 浏览器.</p>
<p>为了告知浏览器, 服务器首先传送一些 HTTP 头信息(上一步的 GET 请求的 HTTP 头称为请求头, 这里得到应答的 HTTP 头称为响应头), 然后传送具体内容 ( 即 HTTP 体信息 ) , HTTP 头信息和 HTTP 体信息之间用一个空行分开.</p>
<p><img src="//static.mutoe.com/2017/the-principle-of-browsers-work/http-head.png" alt="http-head"></p>
<blockquote>
<p>HTTP响应头举例:
  ① HTTP 1.0 200 OK
  ② MIME_Version:1.0
  ③ content_type:text&#x2F;html
  ④ content_length:24321</p>
</blockquote>
<p>HTTP 1.0 200 OK: 这是 Web 服务器应答的第一行, 列出服务器正在运行的 HTTP 版本号和应答代码.代码 “200 OK” 表示请求完成.我们俗称返回了一个 200, 也就是请求成功;若服务器没有找到该文件则会返回 4 字头的错误, 如 403, 404 等, 该部分内容在本文底部有详解, 这里略过.</p>
<p>MIME_Version:1.0　它指示 MIME 类型的版本.</p>
<p>content_type: 响应类型, 这个头信息指示 HTTP 体信息的MIME类型.如: <code>content_type:text/html</code> 指示传送的数据是 HTML 文档.这就是辨别一个地址的文件内容是什么的依据了, 如果是 exe (可执行文件)则调用系统下载器进行下载, 如果是 doc 文档则根据系统设置来在线预览或发起下载请求.</p>
<p>content_length: 长度值, 它指示 HTTP 体信息的长度 ( 字节 ) .</p>
<h2 id="5-关闭连接-渲染页面"><a href="#5-关闭连接-渲染页面" class="headerlink" title="5. 关闭连接, 渲染页面">5. 关闭连接, 渲染页面</a></h2><p>现在我们已经得到了 index.html 的内容, 这意味着本次请求已经完成, 现在必须关闭连接以便节约主机服务器资源以便于给其他用户建立连接.</p>
<blockquote>
<p>因为 TCP 这种连接的特性, 导致服务器主机的性能瓶颈, 短时间内遇到大量访问时会造成客户端 “排队” 甚至服务器死机, 你所看到的页面就是浏览器的小图标一直在转圈.会有恶意访客建立大量的连接导致其他用户不能访问该站点, 这就是著名的 DDoS 攻击.</p>
</blockquote>
<blockquote>
<p><img src="//static.mutoe.com/2017/the-principle-of-browsers-work/ddos.jpg" alt="ddos"></p>
</blockquote>
<p>与此同时, 浏览器开始对 index.html 文件进行解析并进行渲染最终输出到用户的屏幕上, 也会因为各浏览器对相同的 html 文件的解析能力不同而产生不同的画面, 因浏览器对页面解析兼容性的问题(任意门)不在本文讨论范围内.</p>
<p>到这里网络传输层就结束了, 这就是系统在后台从点击链接到显示画面产生的所有动作.</p>
<h2 id="一些干货"><a href="#一些干货" class="headerlink" title="一些干货">一些干货</a></h2><p>现在, 如果你以后还遇到这些问题, 就可以自己分析为什么会出现这样的结果并自行解决啦. 我列举一些常见的状态码解释一下</p>
<ul>
<li><strong>400</strong>: 400 分为 bad request 和 invalid hostname, 前者是因服务器绑定域名配置出错产生的问题, 需要请网站管理员来解决; 而后者往往是自己输错了域名如: ww.cqjtu.edu.cn 或 <a href="http://www.cqjtu.educn/">www.cqjtu.educn</a> 等等, 如果出现了 400 invalid hostname, 那么检查一下你输入的地址是否正确.</li>
<li><strong>403</strong>: 这是一个被拒绝的响应, 这说明服务器运行正常但是把你的 IP 地址列入了黑名单, 你可以向管理员请求帮助或使用代理软件重新访问.</li>
<li>404: 没有找到文件, GET 请求被导向到一个不存在的文件路径, 如果是点击超链接导致返回了 404, 那么向管理员请求帮助, 如果是自己手动输入的地址, 那么检查一下路径是否正确.</li>
<li><strong>500</strong>: 服务器内部错误, 请求成功了但是服务器没有给出响应方案, 一般是服务端代码语法错误, 用户一般很少看见 500, 但作为一个程序猿看见这个页面简直把牙都咬碎了就是找不见错误. 遇见 500 了就狠狠地嘲笑一番网站的管理员吧!</li>
</ul>
<p>更多状态码参考百度百科 <a href="http://baike.baidu.com/view/1790469.htm">HTTP状态码</a></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献">参考文献</a></h2><ul>
<li><a href="http://blog.csdn.net/xiaotian15/article/details/8625302">浏览器访问网页的详细过程</a> – xiaotian15</li>
<li><a href="http://baike.baidu.com/view/1790469.htm">HTTP状态码</a></li>
<li><a href="http://www.cic.tsinghua.edu.cn/jdx/book6/3.htm">Internet 传输层协议</a></li>
<li>《计算机网络》– 谢希仁</li>
</ul>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>Browser</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 thinkphp 上传文件失败的原因</title>
    <url>//2016/thinkphp-upload-error/</url>
    <content><![CDATA[<p>之前在使用 thinkphp 时, 使用了其内置的上传文件功能, 在本地时使用正常, 但是放在生产环境中前端会提示上传失败, 原因也不明, 上传目录的权限也够, 就是不知道为什么.</p>
<p>最近使用最新版的 thinkphp5 时又遇到了这个问题, 所以在这里写一篇文章, 让更多的初学者少走弯路, 知道问题所在.</p>
<p>无论是在 thinkphp 还是其他 php 框架下, 上传文件都需要现将文件暂存在 php 的临时目录中, 然后使用 <code> move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;])</code> 方法将临时目录中的文件保存在上传目录.</p>
<p>在知道了这个后, 我们应该__检查一下应用上传目录和 php_temp 目录的权限是否为 777__, 在 IIS 下需要给予足够的权限.</p>
<p>如果你不知道 php_temp 临时目录在哪里也没有设置过, 用 <code>phpinfo()</code> 函数查看一下即可.</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>ThinkPHP</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 进阶：Class 中的动态类型参数</title>
    <url>//2019/typescript-dynamic-type-parameters-of-class-constractor/</url>
    <content><![CDATA[<blockquote>
<p>前段时间听说 Vue3.x 要使用 TypeScript 重构了, 本来一直都想研究一下 Vue 的源码, 这次带着夙愿来从头编写一个简单的、现代化的 Vue.</p>
</blockquote>
<p>搭建好 TypeScript 开发环境后, 开始了一段 TypeScript 与 Vue 源码的探索之旅.</p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景">背景</a></h1><p>我使用 ES6 <code>class</code> 创建了一个 Vue 类, 为了实现数据监听, 我使用了 ES2015 中的 <code>proxy</code> 方法来对数据进行封装, 
并且将这个 <code>proxy</code> 返回给类的构造方法, 以便于获取 <code>vm</code> 实例.</p>
<p>代码如下</p>
<details>
<summary>查看源代码</summary>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IOptions</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">$options</span>: <span class="title class_">IOptions</span> = &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options: IOptions</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="variable language_">this</span>.<span class="title function_">initProxy</span>()</span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initProxy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">data</span> ? <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="title function_">data</span>() : &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">_, key: <span class="built_in">string</span>, value</span>) &#123;</span><br><span class="line">        data[key] = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params">_, key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.<span class="property">a</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">// ^ Property &#x27;a&#x27; does not exist on type &#x27;Vue&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">a</span>) <span class="comment">// =&gt; 2</span></span><br><span class="line"><span class="comment">//             ^ Property &#x27;a&#x27; does not exist on type &#x27;Vue&#x27;.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details open>
<summary>在线版本</summary>

<iframe class="stackblitz" src="https://stackblitz.com/edit/typescript-kh4zmn?ctl=1&embed=1&file=index.ts&hideExplorer=1&hideNavigation=1&view=editor"></iframe>
</details>


<p>如果你查看了在线版本, 可以看到, 我们在使用实例属性 <code>vm.a</code> 时报了一个 TS 错误 <code>Property &#39;a&#39; does not exist on type &#39;Vue&#39;</code>, 
意思是说 <code>vm</code> 实例上不存在属性 <code>a</code>.</p>
<span id="more"></span>

<p>虽然这段代码可以正常执行, 但是静态类型检查没有通过呀.</p>
<p>没关系, 万物皆 Any, 我们这样</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">vm</span>: <span class="built_in">any</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.<span class="property">a</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="property">a</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Everything is any!</p>
<p>看起来还不错, 代码正常运行了, 静态类型检查也通过了. But …</p>
<p>但是我们使用 TypeScript 的初衷呢? 我们不就是为了类型安全吗, 现在编辑器也不提示 <code>vm</code> 上有哪些属性了, 
就算用了 <code>vm.b</code> 也不报错了 [掀桌.jpg]</p>
<p>不行, 我们不能这样.</p>
<hr>

<p>经过一番思考与探索, 最终我选择求助 overstackflow 上的网友, 在提出我的
<a href="https://stackoverflow.com/questions/55826350/how-to-dynamically-declare-an-instance-property-of-a-class-from-a-constructor-in">问题</a>
后的短短 1 个小时内, 竟然获得了三个回答</p>
<p>其中有个网友提到, TypeScript 并不能知道 Proxy 上可能出现的属性, 必须在运行时才能知道.</p>
<p>但是我的观点是, 我并没有等到运行时才声明才会出现的属性, 而是在类声明之后的调用中声明属性, 我认为这仍然处于编译时的阶段.</p>
<p>不久之后看到了一个新的回答, 他说道这个问题需要两个步骤, </p>
<p>第一个步骤是正确处理 <code>initProxy</code> 的返回值, 它将包含实例中动态声明的属性.</p>
<p>第二步是让类的返回值中也包含这个动态类型和类本身.</p>
<h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy">Proxy</a></h1><p>在 Proxy 的初始化方法 <code>initProxy()</code> 中, 我们将 <code>target</code> 绑定到了类的 <code>this</code> 中, 以便与我们使用 <code>vm.a</code> 来访问这个 proxy, 
它的返回值就是类本身</p>
<p>在构造函数 <code>constractor</code> 中我们将这个 proxy 返回给类, 试图让类的实例也获得 proxy 中声明的类型, 但是上面我们知道了, 这样行不通,</p>
<p>虽然这个实例确实获得了 proxy 的指向, 但是类型并没有被一并获得.</p>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型">泛型</a></h1><p>根据 <a href="https://stackoverflow.com/a/55827723/7736393">@Titian Cernicova-Dragomir 的回答</a> 我们需要对这种动态的类型使用泛型变量</p>
<p>首先我们需要正确的获取 initProxy() 的返回值类型</p>
<details>
<summary>查看源代码</summary>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IOptions</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span>&lt;T = &#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">$options</span>: <span class="title class_">IOptions</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;&#125;)</span><br><span class="line">  &#125; <span class="keyword">as</span> <span class="title class_">IOptions</span>&lt;T&gt;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options: IOptions&lt;T&gt;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="variable language_">this</span>.<span class="title function_">initProxy</span>()</span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">initProxy</span>(): T &amp; <span class="title class_">Vue</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">data</span> ? <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="title function_">data</span>() : &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="variable language_">this</span> <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> T &amp; <span class="title class_">Vue</span>&lt;T&gt;, &#123;</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">_, key: <span class="built_in">string</span>, value</span>) &#123;</span><br><span class="line">        data[key] = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params">_, key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.<span class="title function_">initProxy</span>().<span class="property">a</span> <span class="comment">// ok now</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details open>
<summary>在线版本</summary>

<iframe class="stackblitz" src="https://stackblitz.com/edit/typescript-wc52zd?ctl=1&embed=1&file=index.ts&hideExplorer=1&hideNavigation=1&view=editor"></iframe>
</details>

<p>我们使用泛型变量 <code>T</code> 来告诉 TypeScript 我们即将要声明的 <code>data</code> 的类型, 这个类型变量将会用于声明:</p>
<ul>
<li><p>接口 <code>IOptions</code> 的 <code>data</code> 属性的类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IOptions</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>proxy</code> 的返回值类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="variable language_">this</span> <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> T &amp; <span class="title class_">Vue</span>&lt;T&gt;, &#123;<span class="comment">/* ... */</span>&#125;) </span><br><span class="line"><span class="comment">// Proxy 会返回第一个参数的类型</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>IOptions&lt;T&gt;</code> 这个接口在构造函数中进行了声明, 实例化类时就会获得泛型变量 <code>T</code> 的实际类型</p>
<p>而 <code>proxy</code> 的返回值类型中我们使用到了 TS 中的交叉类型 (Intersection Types), 它会返回这两个类型的所有属性.</p>
<h1 id="修改类的返回值类型"><a href="#修改类的返回值类型" class="headerlink" title="修改类的返回值类型">修改类的返回值类型</a></h1><p><a href="https://stackoverflow.com/a/55827723/7736393">@Titian Cernicova-Dragomir</a> 还指出, 
即使 TypeScript 允许我们指定 constractor 的返回值, 我们也无力改变这个类的返回值的<strong>类型</strong>, 所以</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">vm.<span class="title function_">initProxy</span>().<span class="property">a</span> <span class="comment">// It&#x27;s ok</span></span><br><span class="line"></span><br><span class="line">vm.<span class="property">a</span> <span class="comment">// Error: Property &#x27;a&#x27; does not exist on type &#x27;Vue&#x27;</span></span><br></pre></td></tr></table></figure>

<p>我们有两个办法来克服这个限制:</p>
<h2 id="1-不使用构造函数实例化类"><a href="#1-不使用构造函数实例化类" class="headerlink" title="1. 不使用构造函数实例化类">1. 不使用构造函数实例化类</a></h2><p>我们将构造函数私有化, 并且声明一个静态方法来实例话这个类, 在这个静态方法中返回类的类型和泛型 T</p>
<details>
<summary>查看源代码</summary>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IOptions</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span>&lt;T = &#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">$options</span>: <span class="title class_">IOptions</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;&#125;)</span><br><span class="line">  &#125; <span class="keyword">as</span> <span class="title class_">IOptions</span>&lt;T&gt;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params">options: IOptions&lt;T&gt;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="variable language_">this</span>.<span class="title function_">initProxy</span>()</span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> create&lt;T&gt;(<span class="attr">data</span>: <span class="title class_">IOptions</span>&lt;T&gt;): <span class="title class_">Vue</span>&lt;T&gt; &amp; T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vue</span>&lt;T&gt;(data) <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="title class_">Vue</span>&lt;T&gt; &amp; T</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">initProxy</span>(): T &amp; <span class="title class_">Vue</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">data</span> ? <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="title function_">data</span>() : &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="variable language_">this</span> <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> T &amp; <span class="title class_">Vue</span>&lt;T&gt;, &#123;</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">_, key: <span class="built_in">string</span>, value</span>) &#123;</span><br><span class="line">        data[key] = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params">_, key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.<span class="property">a</span> = <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details open>
<summary>在线版本</summary>

<iframe class="stackblitz" src="https://stackblitz.com/edit/typescript-eyrsb8?ctl=1&embed=1&file=index.ts&hideExplorer=1&hideNavigation=1&view=editor"></iframe>
</details>

<p>这种办法解决了我们的问题, 但是不完美. 我们实例话 Vue 类的时候, 需要这样写</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">create</span>(&#123;<span class="comment">/* ... */</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>这一点都不 OOP ~ [掀桌.jpg]x2</p>
<h2 id="2-对类使用单独的签名"><a href="#2-对类使用单独的签名" class="headerlink" title="2. 对类使用单独的签名">2. 对类使用单独的签名</a></h2><details>
<summary>查看源代码</summary>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IOptions</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Vue</span>&lt;T = &#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">$options</span>: <span class="title class_">IOptions</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;&#125;)</span><br><span class="line">  &#125; <span class="keyword">as</span> <span class="title class_">IOptions</span>&lt;T&gt;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params">options: IOptions&lt;T&gt;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="variable language_">this</span>.<span class="title function_">initProxy</span>()</span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">initProxy</span>(): <span class="title class_">Vue</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">data</span> ? <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="title function_">data</span>() : &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="variable language_">this</span> <span class="keyword">as</span> <span class="built_in">unknown</span> <span class="keyword">as</span> <span class="title class_">Vue</span>&lt;T&gt;, &#123;</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">_, key: <span class="built_in">string</span>, value</span>) &#123;</span><br><span class="line">        data[key] = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params">_, key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Vue</span>&lt;T&gt; = _Vue&lt;T&gt; &amp; T</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Vue</span>: <span class="keyword">new</span> &lt;T&gt;<span class="function">(<span class="params">data: IOptions&lt;T&gt;</span>) =&gt;</span> <span class="title class_">Vue</span>&lt;T&gt; = _Vue <span class="keyword">as</span> <span class="built_in">any</span> <span class="comment">// 这很 any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.<span class="property">a</span> = <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</details>

<details open>
<summary>在线版本</summary>

<iframe class="stackblitz" src="https://stackblitz.com/edit/typescript-9mhvbb?ctl=1&embed=1&file=index.ts&hideExplorer=1&hideNavigation=1&view=editor"></iframe>
</details>

<p>完美的解决了我们的问题, 虽然这个办法需要声明一个额外的类型, 但是由于我们使用的是封装的高阶方法, 只要不影响使用就行啦!</p>
<p>再次感谢 <a href="https://stackoverflow.com/users/125734/titian-cernicova-dragomir">@Titian Cernicova-Dragomir</a> !</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接">参考链接</a></h1><ul>
<li><a href="https://github.com/zzz945/write-vue3-from-scratch">zzz945&#x2F;write-vue3-from-scratch</a></li>
<li><a href="https://www.tslang.cn/docs/handbook/advanced-types.html">Advanced Types - TypeScript</a></li>
<li><a href="https://stackoverflow.com/questions/55826350/how-to-dynamically-declare-an-instance-property-of-a-class-from-a-constructor-in">How to dynamically declare an instance property of a class from a constructor in TypeScript? - @Titian Cernicova-Dragomir</a></li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 常见错误整理</title>
    <url>//2019/typescript-errors/</url>
    <content><![CDATA[<p><em>Tips: 善用右侧导航和 <code>Ctrl+F</code> 搜索哦</em></p>
<div id="TS2307"></div>
## TS2307: Cannot find module 'moduleA'.

<p>假设我们有一个导入语句 <code>import &#123; a &#125; from &quot;moduleA&quot;</code>, 为了去检查任何对 <code>a</code> 的使用, 编译器回去寻找关于它的定义, 这会去向上寻找 <code>moduelA</code>.</p>
<p>但 moduleA 会写在某个 <code>.ts</code> 或是 <code>.d.ts</code> 文件中, 如果没有找到对应的类型定义去解析这个模块, 可能会抛出一个 <code>error TS2307: Cannot find module &#39;moduleA&#39;.</code></p>
<p><strong>解决办法</strong><br>给 <code>moduleA</code> 声明定义文件, 如果导入的是一个第三方 npm 包, 可以去社区找到对应的 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.cn.md">@types</a></p>
<p><strong>相关资料</strong></p>
<ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html">https://www.typescriptlang.org/docs/handbook/module-resolution.html</a> (<a href="https://www.tslang.cn/docs/handbook/module-resolution.html">中文镜像</a>)</li>
</ul>
<div id="TS2339"></div>
## TS2339: Property 'xxx' does not exist on type 'yyy'.

<p>当使用表达式 <code>yyy.xxx</code> 时, typescript 会尝试从 <code>yyy</code> 对象上解析 <code>xxx</code> 属性, 如果没有找到对应的定义, 则会抛出一个 <code>error TS2339: Property &#39;xxx&#39; does not exist on type &#39;yyy&#39;.</code></p>
<p><strong>解决办法</strong></p>
<p>给 <code>yyy</code> 对象定义正确的类型</p>
<p>需要注意的是, 如果 <code>yyy</code> 是 window 对象, 则需要定义全局的声明文件, 如果</p>
<p><code>TS2339: Property &#39;xxx&#39; does not exist on type &#39;Window&#39;.</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">    <span class="attr">xxx</span>: <span class="built_in">any</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里还是建议 xxx 应该有自己的类型而不是 any.</p>
<div id="TS2531"></div>
## TS2531: Object is possibly 'null'.

<p>在访问一个对象上的属性时, 如果该对象可能为 <code>null</code> 则抛出 <code>error TS2531: Object is possibly &#39;null&#39;.</code></p>
<p><strong>解决办法</strong></p>
<p>在访问可能为空的对象前判断该对象是否为空</p>
<div id="TS2554"></div>
## TS2554: Expected 2 arguments, but got 1.

<p>这是由于调用函数时, <strong>传入参数</strong> 与 <strong>期望的参数</strong> 数量不一致时, 会抛出 <code>error TS2554: Expected 2 arguments, but got 1.</code></p>
<p><strong>解决办法</strong></p>
<ul>
<li>如果是自定义函数类型定义的问题, 修改函数的 interface.</li>
<li>如果是调用时传参的问题, 恭喜你, 提前发现了一个错误, Fix it.</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>记使用 yum 升级 nodejs 遇到的坑</title>
    <url>//2018/upgrade-nodejs-using-yum/</url>
    <content><![CDATA[<blockquote>
<p>tips: 解决办法在文章底部，请使用右侧导航直接跳转到 <strong>解决办法</strong></p>
</blockquote>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述">问题描述</a></h2><p>最近在使用 centos 7 时需要升级到 nodejs 10 版本，直接执行 <code>yum update nodejs</code> 发现 yum 源里还是 6.x，并且提示已经是最新版本了。。</p>
<p>？？什么鬼，去 nodesource 查看原来需要将 nodesource 源升级一下，so，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://rpm.nodesource.com/setup_10.x | bash -</span><br><span class="line">yum upgrade nodejs</span><br></pre></td></tr></table></figure>

<p>竟然发现还是 6.x 版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">====================================================================================================================</span><br><span class="line"> Package               Arch                  Version                                Repository                 Size</span><br><span class="line">====================================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> nodejs                x86_64                2:6.11.2-1nodesource                   nodesource                 17 M</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">====================================================================================================================</span><br></pre></td></tr></table></figure>

<p>咦？难道是需要将 node 先卸载了吗？于是 <code>yum remove nodejs</code> 然后 <code>yum install nodejs</code>。。。然后是你猜到的结果，还还还还是 6.x 版本。。。</p>
<span id="more"></span>

<p>随后猜测可能是之前安装的 nodejs 6.x 版本的 nodesource 源，于是在网上查找了资料想办法删除之前的旧版 nodesource 源，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line"><span class="comment"># 然后删除所有以 node 开头的 repo 文件，下一行可能与你的不同</span></span><br><span class="line"><span class="built_in">rm</span> -f nodesource-el7.repo</span><br><span class="line">yum clean all <span class="comment"># 清空 yum 缓存</span></span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_10.x | bash -</span><br><span class="line">yum install nodejs</span><br></pre></td></tr></table></figure>

<p>然后重新安装 nodejs，依旧不行。问题出在哪里呢？甚至开始怀疑是机器的问题。。</p>
<p>过了几天回到这个问题，又查找了不少资料, 根据
<a href="https://github.com/nodesource/distributions/issues/340#issuecomment-251417163">nodesource&#x2F;distributions#340</a> <em>(真是为难我这个英语渣了)</em> 中的一个回答，发现 <code>yum clean all</code> 时，可能并不会清除 repo 不存在的缓存文件，并提供了一行代码来手动清除 yum 缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /var/cache/yum/*</span><br></pre></td></tr></table></figure>

<p>随后安装最新版的 nodesource 源，安装 nodejs，于是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">====================================================================================================================</span><br><span class="line"> Package               Arch                  Version                                Repository                 Size</span><br><span class="line">====================================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> nodejs                x86_64                2:10.6.0-1nodesource                   nodesource                 17 M</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">====================================================================================================================</span><br></pre></td></tr></table></figure>

<p>🎉 成功了！怀着激动的心情解决了问题并写下这篇心得，希望能帮到大家，最后总结一下</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法">解决办法</a></h2><p><strong>无需删除旧版本的 nodejs，该问题只与 yum 缓存有关</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下命令请均以 sudo 权限执行</span></span><br><span class="line"></span><br><span class="line">yum clean all <span class="comment"># 清空 yum 缓存</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/cache/yum/* <span class="comment"># 手动删除所有 yum 缓存</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 请结合实际情况删除所有以 node 开头的 repo 文件</span></span><br><span class="line"><span class="built_in">rm</span> -f nodesource-el.repo <span class="comment"># 移除旧的 nodesource 源</span></span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_10.x | bash - <span class="comment"># 安装 nodesource 源</span></span><br><span class="line">yum update nodejs <span class="comment"># 升级到最新版本</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>Yum</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 学习笔记（无插件）</title>
    <url>//2017/vi-vim-study-notes/</url>
    <content><![CDATA[<p><strong>注意：无插件 Vim 笔记。个人使用 Vim 作为 tty 编辑器和辅助开发工具配合主力 IDE 使用（IDEA Vim、VSCode Vim），为了保证通用性与便捷性，本文无插件。</strong></p>
<p>Vi 作为 Unix 系统自带的编辑器，流传至今是有一定道理的。在连接进远程服务器时，并不一定能够使用 GUI 进行操作，此时又一个趁手的编辑器就尤为重要了。</p>
<p>那是不是会进入编辑模式，能保存文件就够用了呢？哈哈，是的，但是 Vim 的强大完全可以作为日常编辑器使用，能极大的提升开发效率(是一种以大脑空间换时间的思路)，一起来看看吧！</p>
<span id="more"></span>

<p>Vim 是 Vi 的升级版本，比 Vi 多了语法高亮等更多特性。就版本而言，软件的新版本往往会修正旧版的一些缺陷和不足，所以说能用新版本尽量使用最新版本。</p>
<h1 id="normal-模式"><a href="#normal-模式" class="headerlink" title="normal 模式">normal 模式</a></h1><p>Vim 和其他编辑器不一样，并不是一打开就可以输入文字，打开 Vim 后默认为 normal 模式。当我们处于 normal 模式时，键盘上的每个按键都对应着不同的功能。</p>
<ul>
<li>当我们想要编辑内容时，我们可以使用 <kbd>i</kbd> 键进入 insert 模式；</li>
<li>当我们想要保存时，可以使用 <code>:</code> 进入 command line 模式，然后输入 <code>wq</code> 命令进行保存 (write) 并退出 (quit)；</li>
<li>当我们想要搜索内容时，可以使用 <code>/</code> 进入 search 模式，然后键入想要搜索的内容按下 <kbd>ENTER</kbd>；</li>
<li>当我们想要选择某段文本时，我们可以按下 <kbd>v</kbd> 进入 visual 模式；</li>
</ul>
<p><img src="https://static.mutoe.com/2017/vi-vim-study-notes/vim-modes.png" alt="Vim modes"></p>
<p>在其他任意模式下，按 <kbd>ESC</kbd> 可以回到 normal 模式。</p>
<blockquote>
<p>Tips: 当你由于某种原因（比如使用网页中的 SSH 时）无法使用 <kbd>ESC</kbd> 键回到 normal 模式时，可以使用 <code>Ctrl-[</code> 键。</p>
</blockquote>
<p><img src="https://static.mutoe.com/2017/vi-vim-study-notes/vi-vim-cheat-sheet-sch.gif" alt="Vim cheat sheet"></p>
<h1 id="command-line-模式"><a href="#command-line-模式" class="headerlink" title="command-line 模式">command-line 模式</a></h1><p>按下 <code>:</code> 进入命令模式，此时 Vim 底部应该出现 <code>:</code> 并等待进一步命令输入</p>
<p><img src="https://static.mutoe.com/2017/vi-vim-study-notes/command-line-mode.png" alt="Command line mode"></p>
<blockquote>
<p>下文中以 <code>:</code> 开头的命令均为 command-line 模式下的命令</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>:r! &#123;cmd&#125;</code></td>
<td align="left">将 <code>&#123;cmd&#125;</code> 的输出插入到光标处</td>
</tr>
<tr>
<td><code>:[range]s/pattern/target/gi</code></td>
<td align="left">替换，在 <code>[range]</code> 范围内查找 <code>pattern</code> 然后替换为 <code>target</code></td>
</tr>
<tr>
<td><code>:[range]g/pattern/cmd</code></td>
<td align="left">查找，在 <code>[range]</code> 范围内查找 <code>pattern</code> 然后执行 <code>cmd</code> 命令</td>
</tr>
</tbody></table>
<details>
<summary>命令 `:g` 的一些例子</summary>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看含有 pattern 的相关 5 行内容</span></span><br><span class="line">:g/pattern/z<span class="comment">#.5</span></span><br><span class="line">:g/pattern/z<span class="comment">#.5|echo &quot;======&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除含有 pattern 的所有行</span></span><br><span class="line">:g/pattern/d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有空行</span></span><br><span class="line">:g/^\s*$/d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除不含有 pattern 的所有行</span></span><br><span class="line">:g!/pattern/d</span><br><span class="line">:v/pattern/d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有重复的行</span></span><br><span class="line">:g/^\(.*\)\(\r\?\n\1\)\+$/d</span><br><span class="line">:%!<span class="built_in">uniq</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在标记 a 和 b 定义的范围内搜索含有 pattern 行中替换字符串 pattern2 为 replaced</span></span><br><span class="line">:<span class="string">&#x27;a,&#x27;</span><span class="built_in">bg</span>/pattern/s/pattern2/replaced/gi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给每一行添加一个空行</span></span><br><span class="line">:g/^/pu =\&quot;\n\&quot;</span><br><span class="line">:g/^/pu _ <span class="comment"># 从黑洞寄存器 (_) 中插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制所有含有 pattern 的行到寄存器 a</span></span><br><span class="line">:g/pattern/y a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制所有含有 pattern 的行到文件末尾</span></span><br><span class="line">:g/pattern/t$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动所有含有 pattern 的行到文件末尾</span></span><br><span class="line">:g/pattern/m$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从当前行到最后一行中，所有行头的数字自增 1 (相当于 normal 模式下按 `Ctrl-a`)</span></span><br><span class="line">:.,<span class="variable">$g</span>/^\d/exe <span class="string">&quot;normal! \&lt;C-A&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有匹配的行中执行寄存器 a 中的宏</span></span><br><span class="line">:g/pattern/normal @a</span><br></pre></td></tr></table></figure>

</details>

<p>command-line 模式一些实用的快捷键</p>
<table>
<thead>
<tr>
<th>按键 (command-line 模式)</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl-[</code> <code>Ctrl-c</code></td>
<td align="left">退出 command-line 模式，相当于按下 <kbd>ESC</kbd></td>
</tr>
<tr>
<td><code>Ctrl-m</code> <code>Ctrl-j</code></td>
<td align="left">执行命令，相当于按下 <kbd>ENTER</kbd></td>
</tr>
<tr>
<td><kbd>UP</kbd> &#x2F; <kbd>DOWN</kbd></td>
<td align="left">重复上一次命令 &#x2F; 回退一条</td>
</tr>
<tr>
<td><kbd>INSERT</kbd></td>
<td align="left">切换插入模式和替换模式</td>
</tr>
<tr>
<td><kbd>HOME</kbd> <code>Ctrl-b</code></td>
<td align="left">光标跳到行首</td>
</tr>
<tr>
<td><kbd>END</kbd> <code>Ctrl-e</code></td>
<td align="left">光标跳到行尾</td>
</tr>
<tr>
<td><kbd>BACKSPACE</kbd> <code>Ctrl-h</code></td>
<td align="left">删除光标前的字符</td>
</tr>
<tr>
<td><kbd>DELETE</kbd></td>
<td align="left">删除光标处的字符</td>
</tr>
<tr>
<td><code>Ctrl-w</code></td>
<td align="left">删除光标处以前的单词</td>
</tr>
<tr>
<td><code>Ctrl-u</code></td>
<td align="left">删除光标处到行首</td>
</tr>
<tr>
<td><code>Ctrl-d</code></td>
<td align="left">命令补全</td>
</tr>
<tr>
<td><code>Ctrl-r &#123;x&#125;</code></td>
<td align="left">粘贴某寄存器 <code>&#123;x&#125;</code> 内容</td>
</tr>
<tr>
<td><code>Ctrl-r Ctrl-f</code></td>
<td align="left">粘贴光标处的文件名</td>
</tr>
<tr>
<td><code>Ctrl-r Ctrl-p</code></td>
<td align="left">粘贴光标处的文件名, expand path</td>
</tr>
<tr>
<td><code>Ctrl-r Ctrl-w</code></td>
<td align="left">粘贴光标处的单词(inner)</td>
</tr>
<tr>
<td><code>Ctrl-r Ctrl-a</code></td>
<td align="left">粘贴光标处的单词(around)</td>
</tr>
</tbody></table>
<h2 id="visual-模式"><a href="#visual-模式" class="headerlink" title="visual 模式">visual 模式</a></h2><table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>v</code></td>
<td>进入可视模式</td>
</tr>
<tr>
<td><code>V</code></td>
<td>进入行可视模式</td>
</tr>
<tr>
<td><code>Ctrl-v</code></td>
<td>进入列可视模式</td>
</tr>
<tr>
<td><code>gv</code></td>
<td>重选上次的高亮选区</td>
</tr>
<tr>
<td><code>Ctrl-g</code></td>
<td>在 visual 和 select 模式间替换</td>
</tr>
<tr>
<td><code>o</code></td>
<td>切换选区的端点</td>
</tr>
</tbody></table>
<h3 id="Ex-命令"><a href="#Ex-命令" class="headerlink" title="Ex 命令">Ex 命令</a></h3><p>在 visual 模式下直接键入 <code>:</code> 键可以将当前选区标记并进入 Ex 命令模式，此时可以配合一些命令达到目的。</p>
<blockquote>
<p>以下命令都可只键入首字母而省略其他字符</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>:[range]print</code></td>
<td align="left">打印指定的行在窗口底部</td>
</tr>
<tr>
<td><code>:[range]delete [x]</code></td>
<td align="left">删除指定范围内的行[到寄存器 x 中]</td>
</tr>
<tr>
<td><code>:[range]yank [x]</code></td>
<td align="left">复制指定范围内的行[到寄存器 x 中]</td>
</tr>
<tr>
<td><code>:[line]put [x]</code></td>
<td align="left">在指定行后粘贴寄存器 x 中的内容</td>
</tr>
<tr>
<td><code>:[range]copy &#123;address&#125;</code> <code>:[range]t &#123;address&#125;</code></td>
<td align="left">把指定范围内的行拷贝到 {address} 所指定的行之下</td>
</tr>
<tr>
<td><code>:[range]move &#123;address&#125;</code></td>
<td align="left">把指定范围内的行移动到 {address} 所指定的行之下</td>
</tr>
<tr>
<td><code>:[range]join</code></td>
<td align="left">合并指定范围内的行</td>
</tr>
<tr>
<td><code>:[range]normal &#123;commands&#125;</code></td>
<td align="left">对指定范围内的每一行执行普通模式命令 {commands}</td>
</tr>
<tr>
<td><code>:[range]substitute/&#123;pattern&#125;/&#123;string&#125;/[flags]</code></td>
<td align="left">把指定范围内出现{pattern}的地方替换为{string}</td>
</tr>
<tr>
<td><code>:[range]global/&#123;pattern&#125;/[cmd]</code></td>
<td align="left">对指定范围内匹配{pattern}的所有行，在其上执行 Ex 命令{cmd}</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>range &#x2F; address</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>0</code> <code>1</code> … <code>&#123;n&#125;</code></td>
<td align="left">第 n 行</td>
</tr>
<tr>
<td><code>$</code></td>
<td align="left">最后一行</td>
</tr>
<tr>
<td><code>.</code></td>
<td align="left">光标所在行</td>
</tr>
<tr>
<td><code>&#39;m</code></td>
<td align="left">标记 m 所在的行</td>
</tr>
<tr>
<td><code>&#39;&lt;</code> &#x2F; <code>&#39;&gt;</code></td>
<td align="left">选区开始&#x2F;结束的行</td>
</tr>
<tr>
<td><code>%</code> &#x2F; <code>1,$</code></td>
<td align="left">整个文件</td>
</tr>
<tr>
<td><code>/regexp/</code></td>
<td align="left">正则匹配某行</td>
</tr>
<tr>
<td><code>&#123;range&#125;+[n]</code> &#x2F; <code>&#123;range&#125;-[n]</code></td>
<td align="left">向后&#x2F;前偏移 n 行，当 n 不指定时，默认为 1</td>
</tr>
</tbody></table>
<h1 id="工作区"><a href="#工作区" class="headerlink" title="工作区">工作区</a></h1><p><img src="https://static.mutoe.com/2017/vi-vim-study-notes/vim-workspace2.png" alt="Real Vim workspace"></p>
<p><img src="https://static.mutoe.com/2017/vi-vim-study-notes/vim-workspace.png" alt="Vim workspace structure"></p>
<h2 id="会话-Session"><a href="#会话-Session" class="headerlink" title="会话 (Session)">会话 (Session)</a></h2><p>你可以将你当前打开的 Window 和 Tab 保存成为 Session，下次读取 Session 可直接恢复上次工作区状态</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>:mksession session_file.vim</code></td>
<td>将当前工作区保存在会话中</td>
</tr>
<tr>
<td><code>:mksession! session_file.vim</code></td>
<td>将当前工作区保存在会话中，覆盖</td>
</tr>
</tbody></table>
<p>然后使用 <code>:qa</code> 或 <code>:wqa</code> 来退出 vim，下次就可以使用 <code>vim -S session_file.vim</code> 来恢复会话啦</p>
<h2 id="标签页-Tab"><a href="#标签页-Tab" class="headerlink" title="标签页 (Tab)">标签页 (Tab)</a></h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>:Te</code></td>
<td>打开一个新标签页</td>
</tr>
<tr>
<td><code>gt</code> &#x2F; <code>gT</code></td>
<td>到下&#x2F;上一个标签页</td>
</tr>
<tr>
<td><code>2gt</code></td>
<td>到第 2 个标签页</td>
</tr>
<tr>
<td><code>:tabs</code></td>
<td>查看所有标签页</td>
</tr>
<tr>
<td><code>:tabclose 2</code></td>
<td>关闭第 2 个标签页</td>
</tr>
<tr>
<td><code>:bufdo tab split</code></td>
<td>将缓冲区的文件转成 tab</td>
</tr>
</tbody></table>
<h2 id="窗口-Window"><a href="#窗口-Window" class="headerlink" title="窗口 (Window)">窗口 (Window)</a></h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>:E</code></td>
<td>在当前窗口打开目录</td>
</tr>
<tr>
<td><code>:He</code> &#x2F; <code>:He!</code></td>
<td>在当前窗口下&#x2F;上方打开目录</td>
</tr>
<tr>
<td><code>:Ve</code> &#x2F; <code>:Ve!</code></td>
<td>在当前窗口右&#x2F;左方打开目录</td>
</tr>
<tr>
<td><code>Ctrl-w v</code> <code>:vsp filename</code></td>
<td>左右分割窗口</td>
</tr>
<tr>
<td><code>Ctrl-w s</code> <code>:sp filename</code></td>
<td>上下分割窗口</td>
</tr>
<tr>
<td><code>Ctrl-w c</code></td>
<td>关闭当前窗口</td>
</tr>
<tr>
<td><code>Ctrl-w q</code></td>
<td>关闭当前窗口, 如果是最后一个窗口则退出 Vim</td>
</tr>
<tr>
<td><code>Ctrl-w w</code></td>
<td>移动光标到下一个窗口</td>
</tr>
<tr>
<td><code>Ctrl-w l</code> &#x2F; <code>Ctrl-w h</code></td>
<td>移动光标到右&#x2F;左边的窗口</td>
</tr>
<tr>
<td><code>Ctrl-w j</code> &#x2F; <code>Ctrl-w k</code></td>
<td>移动光标到下&#x2F;上边的窗口</td>
</tr>
<tr>
<td><code>Ctrl-w L</code> &#x2F; <code>Ctrl-w H</code></td>
<td>移动窗口到左&#x2F;右边</td>
</tr>
<tr>
<td><code>Ctrl-w J</code> &#x2F; <code>Ctrl-w K</code></td>
<td>移动窗口到下&#x2F;上边</td>
</tr>
<tr>
<td><code>Ctrl-w &lt;</code> &#x2F; <code>Ctrl-w &gt;</code></td>
<td>垂直分屏向左&#x2F;右调整窗口大小</td>
</tr>
<tr>
<td><code>Ctrl-w -</code> &#x2F; <code>Ctrl-w +</code></td>
<td>水平分屏向上&#x2F;下调整窗口大小</td>
</tr>
<tr>
<td><code>Ctrl-w _</code> &#x2F; <code>Ctrl-w |</code></td>
<td>调整窗口到最大高&#x2F;宽度</td>
</tr>
<tr>
<td><code>Ctrl-w =</code></td>
<td>重置窗口大小</td>
</tr>
</tbody></table>
<blockquote>
<p>调整窗口大小的命令可以配合数字来达到重复的效果，如 <code>Ctrl-w 10 +</code></p>
</blockquote>
<h2 id="缓冲区-Buffer"><a href="#缓冲区-Buffer" class="headerlink" title="缓冲区 (Buffer)">缓冲区 (Buffer)</a></h2><p>当你打开多个文件时，这些文件都保存在缓冲区中，你可以使用 <code>:ls</code> 查看缓冲区内容，然后使用 <code>:buffer [n]</code> 查看缓冲区 n 中的文件</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>:ls</code> <code>:buffers</code></td>
<td>查看缓冲区文件</td>
</tr>
<tr>
<td><code>:b &#123;n&#125;</code> <code>:buffer &#123;n&#125;</code></td>
<td>查看缓冲区 <code>&#123;n&#125;</code> 的文件</td>
</tr>
<tr>
<td><code>:bnext</code> <code>:bn</code></td>
<td>查看下一个缓冲区文件</td>
</tr>
<tr>
<td><code>:bprevious</code> <code>:bp</code></td>
<td>查看上一个缓冲区文件</td>
</tr>
<tr>
<td><code>:blast</code> <code>:bl</code></td>
<td>查看最后一个缓冲区文件</td>
</tr>
<tr>
<td><code>:bfirst</code> <code>:bf</code></td>
<td>查看第一个缓冲区文件</td>
</tr>
</tbody></table>
<p>在使用 <code>:ls</code> 查看缓冲区内容后，可以看到文件名前有个 <code>%</code> 符号</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td><code>–</code></td>
<td>非活动的缓冲区</td>
</tr>
<tr>
<td><code>a</code></td>
<td>当前被激活缓冲区</td>
</tr>
<tr>
<td><code>h</code></td>
<td>隐藏的缓冲区</td>
</tr>
<tr>
<td><code>%</code></td>
<td>当前的缓冲区</td>
</tr>
<tr>
<td><code>#</code></td>
<td>交换缓冲区</td>
</tr>
<tr>
<td><code>=</code></td>
<td>只读缓冲区</td>
</tr>
<tr>
<td><code>+</code></td>
<td>已经更改的缓冲区</td>
</tr>
</tbody></table>
<h1 id="文件"><a href="#文件" class="headerlink" title="文件">文件</a></h1><p>Vim 打开后默认在 normal 模式，要进行文件操作，我们需要进入到命令模式，按下 <kbd>:</kbd> 进入命令模式</p>
<h2 id="打开-x2F-保存-x2F-退出"><a href="#打开-x2F-保存-x2F-退出" class="headerlink" title="打开&#x2F;保存&#x2F;退出">打开&#x2F;保存&#x2F;退出</a></h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>:w</code></td>
<td>保存</td>
</tr>
<tr>
<td><code>:w &#123;filename&#125;</code></td>
<td>另存为</td>
</tr>
<tr>
<td><code>:1,3w &#123;filename&#125;</code></td>
<td>将 1-3 行另存为 filename（参考<a href="">范围限定符</a>）</td>
</tr>
<tr>
<td><code>:1,3w &gt;&gt; &#123;filename&#125;</code></td>
<td>将 1-3 行追加到 filename 末尾</td>
</tr>
<tr>
<td><code>:q</code></td>
<td>退出（如果有改动则会退出失败）</td>
</tr>
<tr>
<td><code>:q!</code> <code>ZQ</code></td>
<td>抛弃修改并退出</td>
</tr>
<tr>
<td><code>:wq</code></td>
<td>保存并退出</td>
</tr>
<tr>
<td><code>:x</code> <code>ZZ</code></td>
<td>保存并退出（如果有修改，否则直接退出）</td>
</tr>
<tr>
<td><code>:cq</code></td>
<td>以非零状态(non zero)退出（如使用 vimdiff 想放弃修改时）</td>
</tr>
</tbody></table>
<h2 id="挂起"><a href="#挂起" class="headerlink" title="挂起">挂起</a></h2><h3 id="通过-Vim-命令"><a href="#通过-Vim-命令" class="headerlink" title="通过 Vim 命令">通过 Vim 命令</a></h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>:!&#123;cmd&#125;</code></td>
<td>用来执行某一条 shell 命令。如 <code>:!cat database.conf</code></td>
</tr>
<tr>
<td><code>:sh</code></td>
<td>进入 shell 环境。执行结束需要返回 Vim 编辑环境时，输入 <code>exit</code> 或按下 <code>Ctrl-d</code> 即可。</td>
</tr>
</tbody></table>
<h3 id="通过-Shell-命令"><a href="#通过-Shell-命令" class="headerlink" title="通过 Shell 命令">通过 Shell 命令</a></h3><p>利用 Linux 作业机制，按下 <code>Ctrl-z</code> 将当前程序放在后台执行。然后使用 <code>fg</code> 命令重新回到 Vim 编辑器。
详情参考<a href="http://blog.sina.com.cn/s/blog_673ee2b50100iywr.html">Unix 或 Linux 中&amp;、jobs、fg、bg 等命令的使用方法</a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录">目录</a></h2><p>可以在启动 Vim 时指定一个目录，进入 Vim 时将进入 Explore 模式. 如 <code>vim /etc/nginx/conf.d</code></p>
<p>在 normal 模式下，键入 <code>:E</code> 可以打开当前文件所在目录（Explore 模式），然后可以使用 <code>j</code> <code>k</code> 选择目录</p>
<table>
<thead>
<tr>
<th>按键(在 Explore 模式下)</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>j</code></td>
<td>选择下一个文件</td>
</tr>
<tr>
<td><code>k</code></td>
<td>选择上一个文件</td>
</tr>
<tr>
<td><code>-</code></td>
<td>前往上一级目录</td>
</tr>
<tr>
<td><code>R</code></td>
<td>重命名</td>
</tr>
<tr>
<td><code>D</code></td>
<td>删除文件</td>
</tr>
<tr>
<td><code>s</code></td>
<td>切换排序（name&#x2F;time&#x2F;size&#x2F;extension）</td>
</tr>
<tr>
<td><code>x</code></td>
<td>执行文件</td>
</tr>
</tbody></table>
<h1 id="跳转"><a href="#跳转" class="headerlink" title="跳转">跳转</a></h1><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动">光标移动</a></h2><table>
<thead>
<tr>
<th>按键（单位从小到大）</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>h</code> &#x2F; <code>l</code></td>
<td align="left">光标向左&#x2F;右移动</td>
</tr>
<tr>
<td><code>w</code> <code>W</code> &#x2F; <code>b</code> <code>B</code></td>
<td align="left">移动到下一个词&#x2F;上一个词的开头（<code>W</code> <code>B</code>会忽略连字符）</td>
</tr>
<tr>
<td><code>e</code> <code>E</code></td>
<td align="left">移动到当前词的末尾（<code>E</code>会忽略连字符）</td>
</tr>
<tr>
<td><code>0</code> &#x2F; <code>^</code> &#x2F; <code>$</code></td>
<td align="left">移动到硬行首&#x2F;软行首(缩进后)&#x2F;行尾</td>
</tr>
<tr>
<td><code>j</code> &#x2F; <code>k</code></td>
<td align="left">光标向下&#x2F;上移动一行</td>
</tr>
<tr>
<td><code>(</code> &#x2F; <code>)</code></td>
<td align="left">移动到语句的开头&#x2F;末尾</td>
</tr>
<tr>
<td><code>&#123;</code> &#x2F; <code>&#125;</code></td>
<td align="left">移动到段落的开头&#x2F;末尾</td>
</tr>
<tr>
<td><code>%</code></td>
<td align="left">跳转到匹配的括号</td>
</tr>
<tr>
<td><code>20g</code> <code>:20</code></td>
<td align="left">跳转到 20 行</td>
</tr>
<tr>
<td><code>zt</code> &#x2F; <code>zz</code> &#x2F; <code>zb</code></td>
<td align="left">让光标所在行居于屏幕顶部&#x2F;中央&#x2F;底部</td>
</tr>
<tr>
<td><code>H</code> &#x2F; <code>M</code> &#x2F; <code>L</code></td>
<td align="left">跳转到当前屏幕的顶部&#x2F;中央&#x2F;底部行</td>
</tr>
<tr>
<td><code>Ctrl-y</code> &#x2F; <code>Ctrl-e</code></td>
<td align="left">向上&#x2F;下滚一行</td>
</tr>
<tr>
<td><code>Ctrl-u</code> &#x2F; <code>Ctrl-d</code></td>
<td align="left">向上&#x2F;下翻半页 (up)</td>
</tr>
<tr>
<td><code>Ctrl-b</code> &#x2F; <code>Ctrl-f</code></td>
<td align="left">向上&#x2F;下翻一整页 (backward)</td>
</tr>
<tr>
<td><code>gg</code> <code>:0</code> &#x2F; <code>G</code> <code>:$</code></td>
<td align="left">跳转到文件开始&#x2F;末尾</td>
</tr>
<tr>
<td><code>\</code>.&#96;</td>
<td align="left">跳转到光标上一次位置</td>
</tr>
<tr>
<td><code>&#39;.</code></td>
<td align="left">跳转到光标上一次位置所处的行</td>
</tr>
<tr>
<td><code>Ctrl-i</code> &#x2F; <code>Ctrl-o</code></td>
<td align="left">向前&#x2F;后追溯<a href="">跳转列表(jumplist)</a></td>
</tr>
</tbody></table>
<p>这些操作之前都可以加上数字来控制接下来的操作执行多少次，例如按下<code>20j</code>向下跳转 20 行，<code>5Ctrl-e</code>向下滚动 5 行</p>
<h2 id="文件跳转"><a href="#文件跳转" class="headerlink" title="文件跳转">文件跳转</a></h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>:bnext</code> <code>:bn</code></td>
<td>查看下一个缓冲区文件</td>
</tr>
</tbody></table>
<h2 id="书签"><a href="#书签" class="headerlink" title="书签">书签</a></h2><p><a href="http://vimdoc.sourceforge.net/htmldoc/motion.html#:marks">marks help</a></p>
<p>跳转到书签可以使用 <code>&#39;</code> 和 <code>\``, 书签名称可以是 a-z A-Z。书签无法直观的看到, 可以通过 </code>:marks&#96; 命令查看所有书签。</p>
<ul>
<li>&#96;`&#96; 表示跳转到某书签精确到行和列</li>
<li><code>&#39;</code> 表示跳转到某书签的软行首</li>
<li>小写书签名 a-z 表示当前 Buffer 内的标签, 如果 Buffer 被移除, 书签会一并被删除。</li>
<li>大写书签名 A-Z 表示全局书签</li>
<li>数字书签名 0-9 不可直接设置，它们仅在 ‘viminfo’ 文件中存在，其中 ‘0’ 时随后一次退出 Vim 时光标的位置</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>ma</code></td>
<td>创建一个本地书签 ‘a’</td>
</tr>
<tr>
<td><code>&#39;a</code></td>
<td>跳转到本地书签 ‘a’</td>
</tr>
<tr>
<td><code>g&#39;a</code></td>
<td>跳转到书签 ‘a’ (不记录到 jumplist 中)</td>
</tr>
<tr>
<td><code>&#39;.</code></td>
<td>跳转到最后一次执行改变的位置</td>
</tr>
<tr>
<td><code>m&#39;</code></td>
<td>设置一个上下文标记</td>
</tr>
<tr>
<td><code>&#39;&#39;</code></td>
<td>到最后一次跳转之前的位置</td>
</tr>
<tr>
<td><code>&#39;&quot;</code></td>
<td>跳转到最后一次退出当前缓冲区时的光标位置</td>
</tr>
<tr>
<td><code>&#39;[</code></td>
<td>跳转到上一次修改或粘贴的位置头部</td>
</tr>
<tr>
<td><code>&#39;]</code></td>
<td>跳转到上一次修改或粘贴的位置尾部</td>
</tr>
<tr>
<td><code>&#39;&lt;</code></td>
<td>跳转到上次选区时位置头部</td>
</tr>
<tr>
<td><code>&#39;&gt;</code></td>
<td>跳转到上次选区时位置尾部</td>
</tr>
<tr>
<td><code>:marks</code></td>
<td>显示所有书签</td>
</tr>
<tr>
<td><code>:marks</code></td>
<td>显示所有书签</td>
</tr>
<tr>
<td><code>:marks a</code></td>
<td>显示书签 ‘a’ 的详细内容</td>
</tr>
<tr>
<td><code>:delm[arks] a</code></td>
<td>删除书签 ‘a’</td>
</tr>
<tr>
<td><code>:delm[arks]!</code></td>
<td>删除所有本地书签</td>
</tr>
</tbody></table>
<h1 id="编辑"><a href="#编辑" class="headerlink" title="编辑">编辑</a></h1><h2 id="insert-模式"><a href="#insert-模式" class="headerlink" title="insert 模式">insert 模式</a></h2><p>刚打开 vim 时处于 normal 模式，我们需要进入 insert 模式才可以输入内容。</p>
<table>
<thead>
<tr>
<th>按键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>i</code> &#x2F; <code>a</code></td>
<td align="left">在光标位置前面&#x2F;后面进入 insert 模式</td>
</tr>
<tr>
<td><code>I</code> &#x2F; <code>A</code></td>
<td align="left">在软行首&#x2F;行尾位置进入 insert 模式</td>
</tr>
<tr>
<td><code>o</code> &#x2F; <code>O</code></td>
<td align="left">在下一行&#x2F;上一行新起一行进入 insert 模式</td>
</tr>
<tr>
<td><code>c</code></td>
<td align="left">删除当前<a href="">文本对象</a>并进入 insert 模式</td>
</tr>
<tr>
<td><code>C</code> <code>c$</code></td>
<td align="left">删除到行尾进入 insert 模式</td>
</tr>
<tr>
<td><code>s</code></td>
<td align="left">删除当前字符进入 insert 模式</td>
</tr>
<tr>
<td><code>r</code></td>
<td align="left">用接下来的一个字符替换当前字符</td>
</tr>
<tr>
<td><code>R</code></td>
<td align="left">在光标位置进入 replace 模式</td>
</tr>
</tbody></table>
<blockquote>
<p>replace 模式类似于 insert 模式，不同之处为 replace 模式会逐个替换光标下的字符而非插入。</p>
</blockquote>
<p>在 insert 模式下，按下 <kdb>ESC</kbd> 退出 insert 模式回到 normal 模式</p>
<h3 id="insert-模式一些实用的快捷键"><a href="#insert-模式一些实用的快捷键" class="headerlink" title="insert 模式一些实用的快捷键">insert 模式一些实用的快捷键</a></h3><table>
<thead>
<tr>
<th>按键(insert 模式)</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl-[</code> <code>Ctrl-c</code></td>
<td align="left">退出 insert 模式，相当于按下 <kbd>ESC</kbd></td>
</tr>
<tr>
<td><code>Ctrl-j</code> <code>Ctrl-m</code></td>
<td align="left">换行，相当于按下 <kbd>ENTER</kbd></td>
</tr>
<tr>
<td><code>Ctrl-i</code></td>
<td align="left">相当于按下 <kbd>TAB</kbd></td>
</tr>
<tr>
<td><code>Ctrl-h</code></td>
<td align="left">删除光标前的一个字符，相当于按下 <kbd>BACKSPACE</kbd></td>
</tr>
<tr>
<td><kbd>DELETE</kbd></td>
<td align="left">删除光标处的字符</td>
</tr>
<tr>
<td><kbd>INSERT</kbd></td>
<td align="left">在 insert 模式和 replace 模式间互换</td>
</tr>
<tr>
<td><code>Ctrl-w</code></td>
<td align="left">删除光标前的单词</td>
</tr>
<tr>
<td><code>Ctrl-u</code></td>
<td align="left">删除当前行光标前的字符</td>
</tr>
<tr>
<td><code>Ctrl-a</code></td>
<td align="left">插入上次 insert 模式下输入的字符</td>
</tr>
<tr>
<td><code>Ctrl-n</code> &#x2F; <code>Ctrl-p</code></td>
<td align="left">查找下一个 &#x2F; 上一个关键字</td>
</tr>
<tr>
<td><code>Ctrl-t</code> &#x2F; <code>Ctrl-d</code></td>
<td align="left">向右 &#x2F; 向左缩进一次</td>
</tr>
<tr>
<td><code>0 Ctrl-d</code> &#x2F; <code>^ Ctrl-d</code></td>
<td align="left">删除所有缩进, 带有 <code>^</code> 的缩进删除将会在下一行恢复</td>
</tr>
<tr>
<td><code>Ctrl-y</code> <code>Ctrl-e</code></td>
<td align="left">插入光标上一行 &#x2F; 下一行对应的字符</td>
</tr>
<tr>
<td><code>Ctrl-o</code></td>
<td align="left">临时执行一条 normal 模式下的命令，然后回到 insert 模式</td>
</tr>
<tr>
<td><code>Ctrl-r &#123;x&#125;</code></td>
<td align="left">插入寄存器 <code>&#123;x&#125;</code> 中的内容</td>
</tr>
<tr>
<td><code>Ctrl-r Ctrl-r &#123;x&#125;</code></td>
<td align="left">插入寄存器 <code>&#123;x&#125;</code> 中的内容 (Raw)</td>
</tr>
<tr>
<td><code>Ctrl-r Ctrl-o &#123;x&#125;</code></td>
<td align="left">插入寄存器 <code>&#123;x&#125;</code> 中的内容，不进行自动缩进</td>
</tr>
<tr>
<td><code>Ctrl-r Ctrl-p &#123;x&#125;</code></td>
<td align="left">插入寄存器 <code>&#123;x&#125;</code> 中的内容，自动缩进</td>
</tr>
</tbody></table>
<h3 id="insert-模式自动补全"><a href="#insert-模式自动补全" class="headerlink" title="insert 模式自动补全">insert 模式自动补全</a></h3><p>在 insert 模式下，可以使用 <code>Ctrl-x</code> 进入一个子模式，用语一些复杂关键字的补全（例如复杂的函数名或文件名）</p>
<table>
<thead>
<tr>
<th>按键(insert 模式)</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>Ctrl-x Ctrl-l</code></td>
<td align="left">补全整行，搜索和当前行光标前字符序列相同的行</td>
</tr>
<tr>
<td><code>Ctrl-x Ctrl-n</code></td>
<td align="left">补全当前文件内的关键字</td>
</tr>
<tr>
<td><code>Ctrl-x Ctrl-k</code></td>
<td align="left">补全 ‘dictionary’ 的关键字</td>
</tr>
<tr>
<td><code>Ctrl-x Ctrl-t</code></td>
<td align="left">补全 ‘thesaurus’ 的关键字</td>
</tr>
<tr>
<td><code>Ctrl-x Ctrl-i</code></td>
<td align="left">补全当前文件和头文件内的的关键字</td>
</tr>
<tr>
<td><code>Ctrl-x Ctrl-f</code></td>
<td align="left">补全文件名</td>
</tr>
<tr>
<td><code>Ctrl-x Ctrl-d</code></td>
<td align="left">补全定义或宏</td>
</tr>
<tr>
<td><code>Ctrl-x Ctrl-v</code></td>
<td align="left">补全 Vim 命令</td>
</tr>
<tr>
<td><code>Ctrl-x Ctrl-u</code></td>
<td align="left">用户定义补全</td>
</tr>
<tr>
<td><code>Ctrl-x Ctrl-o</code></td>
<td align="left">全能 (omni) 补全</td>
</tr>
<tr>
<td><code>Ctrl-x s</code></td>
<td align="left">拼写建议</td>
</tr>
<tr>
<td><code>Ctrl-n</code> &#x2F; <code>Ctrl-p</code></td>
<td align="left">向前 &#x2F; 向后光标前的关键字并插入</td>
</tr>
</tbody></table>
<h3 id="表达式寄存器"><a href="#表达式寄存器" class="headerlink" title="表达式寄存器">表达式寄存器</a></h3><p>在插入模式下，键入 <code>Ctrl-r=</code> 会进入表达式输入模式，此时只需键入简单的算数表达式即可输入对应的值并插入到文档中。</p>
<h2 id="撤销、重做"><a href="#撤销、重做" class="headerlink" title="撤销、重做">撤销、重做</a></h2><table>
<thead>
<tr>
<th>按键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>u</code></td>
<td align="left">撤销</td>
</tr>
<tr>
<td><code>Ctrl-r</code></td>
<td align="left">重做</td>
</tr>
<tr>
<td><code>.</code></td>
<td align="left">重复上一次操作</td>
</tr>
<tr>
<td><code>;</code></td>
<td align="left">重复上一次行内查找 (f&#x2F;F&#x2F;t&#x2F;T)</td>
</tr>
</tbody></table>
<h2 id="复制、剪切、粘贴"><a href="#复制、剪切、粘贴" class="headerlink" title="复制、剪切、粘贴">复制、剪切、粘贴</a></h2><p>在 normal 模式下按下 <code>y</code> 进入复制模式，按下 <code>d</code> 进入删除（剪切）模式。</p>
<p>接下来只需要跟跳转命令（如<code>0</code>(行首) <code>G</code>(文件末尾)）即可操作相应的范围</p>
<p><strong>需要注意的是，删除时会将移除的内容放入剪贴板。</strong></p>
<table>
<thead>
<tr>
<th>按键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>yy</code> <code>Y</code></td>
<td align="left">复制当前行</td>
</tr>
<tr>
<td><code>yG</code></td>
<td align="left">复制到文件末尾</td>
</tr>
<tr>
<td><code>y$</code></td>
<td align="left">复制到行尾</td>
</tr>
<tr>
<td><code>6yy</code> <code>y6y</code></td>
<td align="left">复制 6 行</td>
</tr>
<tr>
<td><code>ggvGy</code> <code>ggyG</code> <code>:%y</code></td>
<td align="left">复制整个文件</td>
</tr>
<tr>
<td><code>dd</code></td>
<td align="left">删除当前行</td>
</tr>
<tr>
<td><code>dw</code></td>
<td align="left">删除单词末尾</td>
</tr>
<tr>
<td><code>x</code> &#x2F; <code>X</code></td>
<td align="left">向后删除字符(delete) &#x2F; 退格(backspace)</td>
</tr>
<tr>
<td><code>10x</code> <code>d10l</code></td>
<td align="left">向后删除 10 个字符 (仅限当前行)</td>
</tr>
<tr>
<td><code>d$</code> <code>D</code></td>
<td align="left">删除到行尾</td>
</tr>
<tr>
<td><code>dG</code></td>
<td align="left">删除到文件末尾</td>
</tr>
<tr>
<td><code>d10G</code></td>
<td align="left">删除当前行到第 10 行</td>
</tr>
<tr>
<td><code>p</code> &#x2F; <code>P</code></td>
<td align="left">粘贴在光标后面 &#x2F; 前面</td>
</tr>
<tr>
<td><code>2p</code></td>
<td align="left">粘贴 2 次</td>
</tr>
<tr>
<td><code>Ctrl-r &#123;x&#125;</code></td>
<td align="left">在 insert 模式或命令模式下粘贴 <code>x</code> 寄存器的内容</td>
</tr>
</tbody></table>
<p>你还可以在选区模式下按下 <code>y</code> 复制整个选区，按下 <code>d</code> 剪切选区</p>
<p>值得注意的是，vim 的剪贴板是带有寄存器（Register）的，类似历史记录功能，你可以将不同的内容复制到某一个寄存器内，粘贴时选择相应的寄存器即可。</p>
<p>要使用寄存器，具体的使用方法是在复制&#x2F;剪切&#x2F;粘贴命令前输入<code>&quot;x</code>，其中 <code>x</code> 可以是 <code>a-z</code> 和 <code>*</code> 还有 <code>&quot;</code>，如果指定为<code>*</code>，则指令将会与操作系统进行交互，如果指定为 <code>&quot;</code> 则会使用上一次的寄存器。</p>
<p>例如输入 <code>&quot;*p</code> 就会把系统的剪贴板的内容粘贴到编辑器中。</p>
<h2 id="文本对象-Text-Object"><a href="#文本对象-Text-Object" class="headerlink" title="文本对象 (Text Object)">文本对象 (Text Object)</a></h2><p>Vim 的智能之处在于它知道你的内容如何进行范围的界定，通过以下命令的组合来高效的进行编辑</p>
<p><code>&#123;command&#125;[i|a]&#123;scope&#125;</code></p>
<p>command 包括 <code>y</code> <code>d</code> <code>c</code></p>
<p><code>i</code> 和 <code>a</code> 区别就是是否取边界，<code>i</code> (inner) 不包括边界，<code>a</code> (around) 包括边界。</p>
<blockquote>
<p>例如输入 <code>di(</code> 会删除当前光标处位于 <code>()</code> 内的内容，保留括号，如果使用 <code>da(</code> 则会将括号一并删去。</p>
</blockquote>
<p>scope 分别有以下</p>
<table>
<thead>
<tr>
<th>按键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>iw</code> <code>iW</code> &#x2F; <code>aw</code> <code>aW</code></td>
<td align="left">“word” 选择单词 (<code>a</code> 包括单词前后空格)</td>
</tr>
<tr>
<td><code>is</code> &#x2F; <code>as</code></td>
<td align="left">“sentence” 选择句子</td>
</tr>
<tr>
<td><code>ip</code> &#x2F; <code>ap</code></td>
<td align="left">“paragraph” 选择段落 (<code>a</code> 包括段前后空格)</td>
</tr>
<tr>
<td><code>it</code> &#x2F; <code>at</code></td>
<td align="left">“tag” 选择标签 (指的是 xml&#x2F;html 标签)</td>
</tr>
<tr>
<td><code>i(</code> <code>i)</code> <code>ib</code> &#x2F; <code>a(</code> <code>a)</code> <code>ab</code></td>
<td align="left">“block” 选择 “()”</td>
</tr>
<tr>
<td><code>i&#123;</code> <code>i&#125;</code> <code>iB</code> &#x2F; <code>a&#123;</code> <code>a&#125;</code> <code>aB</code></td>
<td align="left">“Block” 选择 “{}”</td>
</tr>
<tr>
<td><code>i[</code> <code>i]</code> &#x2F; <code>a[</code> <code>a]</code></td>
<td align="left">选择 “[]”</td>
</tr>
<tr>
<td><code>i&lt;</code> <code>i&gt;</code> &#x2F; <code>a&lt;</code> <code>a&gt;</code></td>
<td align="left">选择 “&lt;&gt;”</td>
</tr>
<tr>
<td><code>i&#39;</code> <code>i&quot;</code> <code>i\`` / </code>a’<code> </code>a”<code> </code>a`&#96;</td>
<td align="left">选择 ‘’ “” ``</td>
</tr>
</tbody></table>
<p>举个例子，对于下面这段代码，光标位于 <code>t</code> 前时</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">3.0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hello mutoe&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span>                     ^</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>按键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>dw</code></td>
<td align="left">删除 <code>toe</code></td>
</tr>
<tr>
<td><code>ciw</code></td>
<td align="left">删除 <code>mutoe</code> 并进入编辑模式</td>
</tr>
<tr>
<td><code>daw</code></td>
<td align="left">删除 <code> mutoe</code></td>
</tr>
<tr>
<td><code>yi&quot;</code></td>
<td align="left">复制 <code>version</code></td>
</tr>
<tr>
<td><code>da&quot;</code></td>
<td align="left">删除 <code>&quot;version&quot;</code></td>
</tr>
<tr>
<td><code>da&quot;</code></td>
<td align="left">删除 <code>&quot;version&quot;</code></td>
</tr>
<tr>
<td><code>da&#123;</code></td>
<td align="left">删除包括 <code>&#123;&#125;</code> 在内的所有内容</td>
</tr>
</tbody></table>
<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进">缩进</a></h2><table>
<thead>
<tr>
<th>按键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>&gt;&gt;</code> &#x2F; <code>&lt;&lt;</code></td>
<td align="left">向右&#x2F;左缩进</td>
</tr>
<tr>
<td><code>2&gt;&gt;</code> &#x2F; <code>2&lt;&lt;</code></td>
<td align="left">向右&#x2F;左缩进 2 次</td>
</tr>
<tr>
<td><code>=</code></td>
<td align="left">自动缩进当前行</td>
</tr>
<tr>
<td><code>=%</code></td>
<td align="left">自动缩进当前代码块</td>
</tr>
<tr>
<td><code>gg=G</code> <code>G=gg</code></td>
<td align="left">自动缩进当前文件</td>
</tr>
</tbody></table>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找">查找</a></h2><p>在 normal 模式下直接按下 <code>/</code> 或 <code>?</code>，然后输入要搜索的关键字按下回车即可。(<code>/</code>是向下查找，<code>?</code>是向上查找)</p>
<p>查找支持正则表达式，如果需要特殊字符，则需要 <code>\</code> 转义。</p>
<p>查找默认大小写敏感，可以在末尾加入 <code>\c</code> 忽略大小写</p>
<table>
<thead>
<tr>
<th>命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>/&#123;word&#125;</code></td>
<td align="left">向下查找 word</td>
</tr>
<tr>
<td><code>?&#123;word&#125;</code></td>
<td align="left">向上查找 word</td>
</tr>
<tr>
<td><code>*</code> <code>g*</code></td>
<td align="left">查找光标所在位置的单词（<code>g*</code>忽略忽略单词边界）</td>
</tr>
<tr>
<td><code>#</code> <code>g#</code></td>
<td align="left">反向查找光标所在位置的单词（<code>g#</code>忽略忽略单词边界）</td>
</tr>
<tr>
<td><code>n</code> <code>N</code></td>
<td align="left">查找下&#x2F;上一个（在<code>?</code>搜索下是相反的）</td>
</tr>
<tr>
<td><code>:nohighlight</code> <code>:nohl</code></td>
<td align="left">取消搜索高亮显示</td>
</tr>
</tbody></table>
<p>上面的查找是跨行的，如果你想要在行内进行查找，可以使用 <code>f</code> <code>F</code> <code>t</code> <code>T</code> 命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>f&#123;x&#125;</code> &#x2F;<code>F&#123;x&#125;</code></td>
<td align="left">查找右&#x2F;左边的 <code>&#123;x&#125;</code> 字符</td>
</tr>
<tr>
<td><code>t&#123;x&#125;</code> &#x2F;<code>T&#123;x&#125;</code></td>
<td align="left">查找右&#x2F;左边的 <code>&#123;x&#125;</code> 字符, 光标定位在字符左边</td>
</tr>
<tr>
<td><code>;</code> <code>,</code></td>
<td align="left">查找下&#x2F;上一个（在 <code>F</code> <code>T</code> 搜索下是相反的）</td>
</tr>
</tbody></table>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换">替换</a></h2><p>在命令模式下按下<kbd>:</kbd>，然后输入<code>s</code>字符进入替换模式，相关语法如下</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:&#123;scope&#125;s/&#123;regexp&#125;/&#123;result&#125;/&#123;flag&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>scope</code>为替换的作用域，<code>regexp</code>为正则表达式，<code>result</code>为要替换的结果，<code>flag</code> 为替换标志</p>
<p>例如 <code>:.,+6s/foo/bar/g</code> 的意思为，在当前行及下 6 行的范围内(<code>.,+6</code>)将所有的(<code>g</code>)<code>foo</code>替换为<code>bar</code>，</p>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器">寄存器</a></h2><p>Vim 提供了一些存放剪贴板及宏的内存区域，我们称之为 Register，也叫做寄存器。Vim 提供了 10 类共 48 个寄存器供我们使用。</p>
<p>你可以使用 <code>&quot;aY</code> 来复制一整行到寄存器 ‘a’ 中，然后按下 <code>&quot;ap</code> 来粘贴寄存器 ‘a’ 中的内容。</p>
<p>除了 <code>a-z</code>的 26 个命名寄存器，Vim 还提供了一些特殊的寄存器</p>
<table>
<thead>
<tr>
<th>寄存器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>&quot;&quot;</code></td>
<td>匿名寄存器. 使用 <code>d</code> <code>c</code> <code>s</code> <code>x</code> 时，被删除的寄存器会进入该寄存器内。</td>
</tr>
<tr>
<td><code>&quot;0</code></td>
<td>0 号寄存器. 保存着被拷贝来的字符串, 当使用命名寄存器拷贝时，不会被存入该寄存器</td>
</tr>
<tr>
<td><code>&quot;1</code> - <code>&quot;9</code></td>
<td>1-9 号寄存器. 保存着上次被删除的行和段落，编号为历史记录</td>
</tr>
<tr>
<td><code>&quot;-</code></td>
<td>小删除寄存器. 不足一行的删除操作会被放入该寄存器内，如 <code>dw</code> <code>cb</code> <code>dt)</code> 等指令</td>
</tr>
<tr>
<td><code>&quot;a</code> - <code>&quot;z</code></td>
<td>命名寄存器. 该寄存器只有指定时才会被写入，同时录制宏时也会保存到命名寄存器中</td>
</tr>
<tr>
<td></td>
<td>小技巧: 使用小写字母时会替换寄存器的内容，使用大写则会追加。</td>
</tr>
<tr>
<td><code>&quot;:</code></td>
<td>只读寄存器. <code>&quot;:</code> 存储了上次 command 模式下的命令，和 <code>:</code> 对应</td>
</tr>
<tr>
<td><code>&quot;.</code></td>
<td>只读寄存器. <code>&quot;.</code> 存储了上次 insert 模式中插入的字符串，和 <code>.</code> 重复上次命令是一样的</td>
</tr>
<tr>
<td><code>&quot;%</code></td>
<td>只读寄存器. 存储了当前文件的路径，是相对 vim 工作目录的路径</td>
</tr>
<tr>
<td><code>&quot;#</code></td>
<td>buffer 交替文件寄存器. 存储了当前 vim 的交替文件</td>
</tr>
<tr>
<td><code>&quot;=</code></td>
<td>表达式寄存器. 当键入 <code>&quot;=</code> 时会跳到命令行模式，此时可以输入任何 vim 表达式并保存到该寄存器中</td>
</tr>
<tr>
<td><code>&quot;*</code> <code>&quot;+</code></td>
<td>该寄存器存放了系统的剪贴板的内容. 在 X11 系统中， <code>&quot;*</code> 指鼠标拖放选中区域， <code>&quot;+</code> 指系统剪贴板</td>
</tr>
<tr>
<td><code>&quot;~</code></td>
<td>有文本拖放到 vim 中时，被拖拽的文本会存储在这里</td>
</tr>
<tr>
<td><code>&quot;_</code></td>
<td>黑洞寄存器. 所有存储到该寄存器中的内容都会消失，避免影响任何寄存器的内容</td>
</tr>
<tr>
<td><code>&quot;/</code></td>
<td>搜索模式寄存器. 存放了上一次搜索的关键词，与 <code>/</code> 对应</td>
</tr>
</tbody></table>
<p>值得一提的是，任何寄存器中的值都是可以拷贝到命令模式中的。 你可以在命令模式下直接输入 <code>&quot;ap</code>, 也可以在命令行模式下输入 <code>&lt;Ctrl-r&gt;a</code> 来执行。</p>
<p>另外，如果你想修改某寄存器的内容（比如你录制了一段很长的宏，其中有一个错误的单词或者步骤），你可以使用 vim 变量操作来修改寄存器的内容。
比如你想修改寄存器 a 的内容，你可以使用 <code>:let @a = &quot;new content&quot;</code> 来修改。
结合上面的命令，修改时你还可以粘贴当前寄存器的内容，只需在 command line 模式下按下 <code>&lt;Ctrl-r&gt;a</code> 即可。</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域">作用域</a></h3><ul>
<li><code>.</code>(或留空) 当前行</li>
<li><code>%</code> 全文</li>
<li><code>,</code>范围</li>
<li><code>1,$</code> 第 1 行到最后一行</li>
<li><code>.,+2</code> 当前行与接下来 2 行</li>
<li><code>&#39;&lt;,&#39;&gt;</code> 选区范围 （在 visual 模式下输入<code>:</code>会直接补全）</li>
</ul>
<h3 id="替换标志"><a href="#替换标志" class="headerlink" title="替换标志">替换标志</a></h3><p>替换标志可以叠加使用</p>
<ul>
<li><code>(留空)</code> 只替换一次</li>
<li><code>g</code> 全局替换</li>
<li><code>i</code> 忽略大小写</li>
<li><code>c</code> 替换前确认</li>
</ul>
<p>进行替换确认时，<code>y</code> <code>n</code> 表示替换&#x2F;不替换当前位置，<code>a</code> <code>q</code> 表示替换&#x2F;不替换所有，<code>l</code> 表示替换当前位置并退出</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他">其他</a></h2><table>
<thead>
<tr>
<th>按键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>~</code></td>
<td align="left">将光标位置的字母大小写互换</td>
</tr>
<tr>
<td><code>g~~</code></td>
<td align="left">将当前行所有字母变为大小写互换</td>
</tr>
<tr>
<td><code>guw</code> &#x2F; <code>gUw</code></td>
<td align="left">将光标位置的单词变为小&#x2F;大写</td>
</tr>
<tr>
<td><code>guu</code> &#x2F; <code>gUU</code></td>
<td align="left">将当前行所有字母变为大写</td>
</tr>
<tr>
<td><code>ga</code> &#x2F; <code>g8</code></td>
<td align="left">查看光标位置字符的 <code>ascii</code> &#x2F; <code>utf-8</code> 码</td>
</tr>
<tr>
<td><code>J</code></td>
<td align="left">合并下一行</td>
</tr>
<tr>
<td><code>Ctrl-a</code> <code>Ctrl-x</code></td>
<td align="left">将光标位置的数字自增&#x2F;减 (可配合数字使用)</td>
</tr>
</tbody></table>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置">配置</a></h1><p>关于配置，可以进入命令模式输入 <code>set</code> 来临时设置配置，也可以配置在 <code>.vimrc</code> 永久生效</p>
<table>
<thead>
<tr>
<th>配置名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>clipboard=unnamed</code></td>
<td align="left">设置对接系统剪贴板</td>
</tr>
<tr>
<td><code>ignorecase</code></td>
<td align="left">设置默认进行大小写不敏感查找</td>
</tr>
<tr>
<td><code>smartcase</code></td>
<td align="left">如果有一个大写字母，则切换到大小写敏感查找</td>
</tr>
<tr>
<td><code>incsearch</code></td>
<td align="left">敲键的同时搜索，按下回车把移动光标移动到匹配的词； 按下 Esc 取消搜索。</td>
</tr>
<tr>
<td><code>number</code> <code>nu</code></td>
<td align="left">显示行数</td>
</tr>
<tr>
<td><code>relativenumber</code> <code>rnu</code></td>
<td align="left">显示相对行数</td>
</tr>
<tr>
<td><code>scrolloff=5</code> <code>so=5</code></td>
<td align="left">设置滚动屏幕时上下保留的行数</td>
</tr>
<tr>
<td><code>wrapscan</code></td>
<td align="left">设置到文件尾部后是否重新从文件头开始搜索</td>
</tr>
</tbody></table>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips">Tips</a></h1><ol>
<li>将某处内容替换可以进入选区选中要替换的内容后直接按 <code>p</code> 进行替换</li>
<li>可以使用 <code>CTRL-[</code> 代替 <kbd>ESC</kbd>，不仅是在不方便使用 Esc 时可用，更多的在于方便按</li>
<li>想要跳转到当前软行首使用 <code>0w</code> 会比 <code>^</code> 快</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料">参考资料</a></h1><ul>
<li><a href="https://vim.fandom.com/wiki/Vim_Tips_Wiki">Vim Tips Wiki</a></li>
<li><a href="https://www.runoob.com/linux/linux-vim.html">Linux vim - Runoob</a></li>
<li><a href="https://harttle.land/tags.html#Vim">Vim - Harttle Land</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-tip-vim/">技巧：快速提高 Vi&#x2F;Vim 使用效率的原则与途径 - 方吾松</a></li>
<li><a href="https://medium.com/@schtoeffel/you-don-t-need-more-than-one-cursor-in-vim-2c44117d51db">You don’t need more than one cursor in vim - @schoteffel</a></li>
<li><a href="http://einverne.github.io/post/2017/10/vim-global.html">Vim 全局命令 g - Ein Verne’s Blog</a></li>
<li><a href="https://blog.carbonfive.com/vim-text-objects-the-definitive-guide/">Vim Text Objects: The Definitive Guide - Carbon Five’s Blog</a></li>
<li><a href="https://www.cyberciti.biz/faq/unix-linux-vim-go-back-to-last-cursor-position/">Vim: Jump Back To Previous or Last Cursor Position - nixCraft</a></li>
<li><a href="https://www.jianshu.com/p/ce1b1e95fa84">Vim 批量插入数字序列</a></li>
<li><a href="https://coolshell.cn/articles/11312.html">无插件 Vim 编程技巧 - 陈浩</a></li>
<li><a href="https://www.zhihu.com/question/27249253">vim&#x2F;gvim 有哪些实用技巧？ - 知乎</a> （感谢所有回答者）</li>
</ul>
<!--
TODO:
tag
jumplist
quickfix
宏
-->
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Vim</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么要上 TypeScript</title>
    <url>//2019/why-typescreipt/</url>
    <content><![CDATA[<p>“TypeScript 又是什么东西啊, 怎么又在出新语言, 求不要再出了, 学不动了!!”</p>
<h2 id="场景1-–-检查类型"><a href="#场景1-–-检查类型" class="headerlink" title="场景1 – 检查类型">场景1 – 检查类型</a></h2><p>开心的撸代码中, 突然接到老大消息: xxx离职了, 现在你来接手他维护的项目.😳</p>
<p>拿到代码后, 看到了这段东西</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 根据用户id获取用户信息 */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> users = <span class="keyword">await</span> <span class="title function_">fetchUsers</span>(id)</span><br><span class="line">  <span class="keyword">return</span> users</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个 <code>id</code> 是什么? 是  <code>1</code> 还是 <code>&quot;1&quot;</code> 还是 <code>[1,2,3]</code> 还是 <code>&quot;1,2,3&quot;</code> ???</p>
<p>这个 <code>users</code> 又是什么? 是普通权限用户? 还是管理员看到的用户?</p>
<p>全局搜索了一下调用该方法的地方, 发现这是个“万能”的方法, 传入 id 为 <code>1</code> 时会返回 1 号用户的不含私密信息的对象</p>
<p>传入 <code>[1,2,3]</code> 或 <code>&quot;1,2,3&quot;</code> 时会获取一个数组 </p>
<p><img src="//static.mutoe.com/xianzhuo.jpg" alt="[掀桌]"></p>
<hr>
<p>如果上了ts</p>
<p><img src="//static.mutoe.com/2019/why-typescript/example-1-ts.gif"></p>
<span id="more"></span>


<h2 id="场景2-–-查函数使用方法"><a href="#场景2-–-查函数使用方法" class="headerlink" title="场景2 – 查函数使用方法">场景2 – 查函数使用方法</a></h2><p>开心的撸代码中, 突然接到老大消息: xxx离职了, 现在你来接手他维护的项目.😳</p>
<p>拿到代码后, 看到了这段东西</p>
<p><img src="//static.mutoe.com/2019/why-typescript/example-2-js.png"></p>
<p><img src="//static.mutoe.com/xianzhuo.jpg" alt="[掀桌]"></p>
<hr>
<p>如果上了ts</p>
<p><img src="//static.mutoe.com/2019/why-typescript/example-2-ts.gif"></p>
<h2 id="场景3-–-重构变量"><a href="#场景3-–-重构变量" class="headerlink" title="场景3 – 重构变量">场景3 – 重构变量</a></h2><p>开心的撸代码中, 突然接到老大消息: xxx离职了, 现在你来接手他维护的项目.😳</p>
<p>拿到代码后, 看到了这段东西</p>
<p><img src="//static.mutoe.com/2019/why-typescript/example-3-js.png"></p>
<p>现在后端要将 <code>topic</code> 返回的 <code>name</code> 修改成 <code>title</code></p>
<p><img src="//static.mutoe.com/2019/why-typescript/example-3-js-1.gif"></p>
<p><img src="//static.mutoe.com/xianzhuo.jpg" alt="[掀桌]"></p>
<hr>
<p>如果上了ts</p>
<p><img src="//static.mutoe.com/2019/why-typescript/example-3-ts.gif"></p>
<h2 id="快上-TypeScript-吧"><a href="#快上-TypeScript-吧" class="headerlink" title="快上 TypeScript 吧">快上 TypeScript 吧</a></h2><p>老大: “可以呀, 别人改这些都要半天你只需要几分钟, 升职加薪就是你啦!”</p>
<p>哇哈哈哈哈! 真香!</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Vue + Koa 打造全栈应用《时光·印象》图片分享应用 -- 项目框架搭建篇</title>
    <url>//2018/vue-koa-setup-app-framework/</url>
    <content><![CDATA[<blockquote>
<p><em>使用 Vue + Koa 打造全栈应用《时光·印象》图片分享应用</em> 系列教程</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言">前言</a></h1><p>之前在学校用前端 pjax 无刷新跳转 + 后端 php 服务端渲染做了一个应用, 用来做校内的图片分享网站, 后来离校后就没怎么管了, 所以只做了一点就弃坑了. </p>
<p>最近又想起来那个项目, 所以这次抱着学习的心态使用 vue + koa 来重新将这个项目拾起来, 一方面可以学习一些当下的新框架了解前段发展趋势, 另一方面也可以充实下自己的简历.</p>
<h2 id="选型"><a href="#选型" class="headerlink" title="选型">选型</a></h2><p>下面列出该项目的技术选型, 以及原因 (按重要程度排序)</p>
<ul>
<li><h3 id="Vue-v2-5-单文件组件-响应式"><a href="#Vue-v2-5-单文件组件-响应式" class="headerlink" title="Vue (v2.5) 单文件组件 响应式">Vue (v2.5) <code>单文件组件</code> <code>响应式</code></a></h3><p>以及 <code>vue-router</code> <code>vuex</code> <code>axios</code></p>
<p>选 Vue 作为前端框架是因为他的单文件组件做模块化开发很方便, 还有现成的脚手架工具 <code>vue-cli</code>, 以及对 <a href="https://github.com/yyx990803">@尤大</a> 的 <strong>信仰</strong></p>
</li>
<li><h3 id="Koa-v2-5-中间件"><a href="#Koa-v2-5-中间件" class="headerlink" title="Koa (v2.5) 中间件">Koa (v2.5) <code>中间件</code></a></h3><p>以及 <code>koa-router</code> <code>koa-jwt</code> </p>
<p>选用 Koa 而非 Express 是因为 Express 了解过一些, 想换个口味试试. Express 也确实感受过回调地狱的痛, Koa 的洋葱模型似乎很不错!</p>
<p>后端只用来提供 API 接口不做 <span class="explain" title="Server-Side Render, 服务端渲染.">SSR</span>.</p>
</li>
<li><h3 id="MySQL-v8-0-SQL-Database"><a href="#MySQL-v8-0-SQL-Database" class="headerlink" title="MySQL (v8.0) SQL Database">MySQL (v8.0) <code>SQL Database</code></a></h3><p>常规的关系型数据库，深入学习一下 MySQL，为全栈发展打好坚实的基础</p>
</li>
<li><h3 id="Eslint-语法检查-防傻瓜"><a href="#Eslint-语法检查-防傻瓜" class="headerlink" title="Eslint 语法检查 防傻瓜">Eslint <code>语法检查</code> <code>防傻瓜</code></a></h3><p>Eslint 进行代码风格检查和防傻瓜还是非常方便的, 尤其是配合其自带的 <code>--fix</code> 功能自动进行代码格式化. 避免在 coding 的过程中出现一些傻瓜式的语法错误带来的不必要的时间浪费.</p>
<p>使用 Eslint Standard 配置（Vue 使用 @vue&#x2F;standard 配置）</p>
</li>
<li><h3 id="ES6-Stylus-语法糖-预处理"><a href="#ES6-Stylus-语法糖-预处理" class="headerlink" title="ES6, Stylus 语法糖 预处理">ES6, Stylus <code>语法糖</code> <code>预处理</code></a></h3><p><strong>语法糖!</strong> 提高 coding 效率. 但是 <span class="explain" title="一个类似 Less \ Sass 的 CSS 预处理器">Stylus</span>, 一个小众的 css 预处理器, 提供了非常高效和酷炫的写法.</p>
</li>
<li><h3 id="Yarn-依赖安装"><a href="#Yarn-依赖安装" class="headerlink" title="Yarn 依赖安装">Yarn <code>依赖安装</code></a></h3><p>用 Yarn 就是因为快! 比 npm 快了不是一丁半点! yarn 执行项目内 bin 文件也非常方便, 免去了安装全局依赖的烦恼.</p>
</li>
</ul>
<span id="more"></span>

<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤">安装步骤</a></h1><h2 id="1-安装-yarn-包管理器"><a href="#1-安装-yarn-包管理器" class="headerlink" title="1. 安装 yarn 包管理器">1. 安装 yarn 包管理器</a></h2><p>yarn 相比于 npm 的优势在于安装速度更快，并且本地安装的 bin 包可以直接食用 <code>yarn xxx</code> 运行（和 npx 有些类似）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g yarn <span class="comment"># 用 npm 安装 yarn 到全局 😂</span></span><br><span class="line">yarn -v <span class="comment"># &gt; 1.10.1</span></span><br></pre></td></tr></table></figure>

<h2 id="2-使用-vue-cli-生成项目目录"><a href="#2-使用-vue-cli-生成项目目录" class="headerlink" title="2. 使用 vue-cli 生成项目目录">2. 使用 vue-cli 生成项目目录</a></h2><p><a href="https://cli.vuejs.org/"><strong><code>@vue/cli v3</code></strong></a> 
全新的 v3 版本提供了非常便捷的初始化 vue 项目的方法，并且提供了 UI 可视化界面来创建或管理 vue 项目.</p>
<p><em>Vue UI 创建项目</em>
<img src="//static.mutoe.com/2018/vue-koa-fullstack-time-image/vue-ui-create-project.jpg" alt="vue ui"></p>
<p>这里我们使用命令行来创建项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add @vue/cli <span class="comment"># 全局安装 vue-cli</span></span><br><span class="line"><span class="built_in">cd</span> xxx <span class="comment"># 切换到你的项目管理目录</span></span><br><span class="line">vue create pic <span class="comment"># 使用 vue-cli 创建一个名为 pic 的项目</span></span><br></pre></td></tr></table></figure>

<p>然后你会看到下图</p>
<p><img src="//static.mutoe.com/2018/vue-koa-fullstack-time-image/vue-create-step1.png" alt="vue-cli create"></p>
<p>选择 <code>Manually select features</code> 来根据我们的需要选择初始化模版</p>
<p><img src="//static.mutoe.com/2018/vue-koa-fullstack-time-image/vue-create-step2.png" alt="vue-cli create"></p>
<p>选择 <code>Babel</code> <code>PWA</code> <code>Router</code> <code>Vuex</code> <code>CSS Pre-processors</code> <code>Linter / Formatter</code></p>
<p>选择 vue-router 的 <code>history</code> 模式; <code>Stylus</code> css 预编译器; <code>ESLint + Standard config</code> Standard ESLint 语法检查和自动格式化; 在保存时进行语法检查；将这些配置信息保存到 <code>package.json</code> 中而不是分别散落在不同的文件中</p>
<p><img src="//static.mutoe.com/2018/vue-koa-fullstack-time-image/vue-create-step3.png" alt="vue-cli create"></p>
<p>等待依赖安装完毕，然后迫不及待的将我们刚创建好的 vue 模版运行起来吧！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> pic</span><br><span class="line">yarn serve <span class="comment"># 以开发模式启动项目</span></span><br></pre></td></tr></table></figure>

<p><img src="//static.mutoe.com/2018/vue-koa-fullstack-time-image/vue-create-finally.png" alt="vue-cli create"></p>
<p>项目目录框架搭建就完成啦！</p>
<h2 id="3-创建服务端目录"><a href="#3-创建服务端目录" class="headerlink" title="3. 创建服务端目录">3. 创建服务端目录</a></h2><p>我们在项目根目录下创建一个 server 目录，用于存放和服务端相关的文件内容.<br>然后安装服务端核心框架 koa
然后切换到 server 目录, 创建一个 <code>index.js</code> 的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> server</span><br><span class="line">yarn add koa</span><br><span class="line"><span class="built_in">cd</span> server</span><br><span class="line">vi index.js</span><br></pre></td></tr></table></figure>

<p><code>index.js</code> 文件内容如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello TimeImage&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Koa is running in port 3000 successfully!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后我们来启动它吧！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node index.js</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Koa is running in port 3000 successfully!</span></span><br></pre></td></tr></table></figure>

<p>然后打开你的浏览器，输入 <code>localhost:3000</code>, 是不是看见了令人激动的 “Hello TimeImage” 呢！</p>
<p>但是现在我们的服务端代码改动时，并不能实时生效，我们需要中断 nodejs 进程，然后重新启动它，这样的话很麻烦，不利于高效率开发应用。<br>所以我们请出 PM2 来监听代码变动并热重启 nodejs 进程，还能将日志输出到文件中，awesome pm2!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按下 ctrl+c 中断 nodejs 进程</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">yarn global add pm2 <span class="comment"># 将 pm2 安装为全局依赖</span></span><br><span class="line">pm2 start server/index.js <span class="comment"># 通过 pm2 启动 node 服务</span></span><br><span class="line">pm2 <span class="built_in">log</span> <span class="comment"># 查看日志</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>还可以使用 <code>pm2-dev</code> 来启动开发服务， 区别就是使用 dev 进行启动时，可以实时输出日志并且会监听代码变动对服务进行热重启，免去每次都要手动重启 node 服务的烦恼。</p>
</blockquote>
<p><img src="//static.mutoe.com/2018/vue-koa-fullstack-time-image/pm2-dev-mode.png" alt="pm2 develpment mode"></p>
<h2 id="4-连接数据库"><a href="#4-连接数据库" class="headerlink" title="4. 连接数据库">4. 连接数据库</a></h2><blockquote>
<p>此步骤开始前，请确保你的机器上安装并启动了 mysql, 然后创建好一个名为 <code>pic</code> 的数据库，为了支持 emoji 表情，请将数据库字符集设置为 <code>utf8mb4</code></p>
</blockquote>
<p>首先安装 nodejs mysql 依赖，用于使用 node 对 mysql 数据库进行操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add mysql</span><br></pre></td></tr></table></figure>

<p>然后在 <code>server/index.js</code> 头部插入以下内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;pic&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">connection.<span class="title function_">connect</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mysql is connected successfully!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="//static.mutoe.com/2018/vue-koa-fullstack-time-image/mysql-is-connected.png" alt="mysql is connected"></p>
<h2 id="5-使用配置文件"><a href="#5-使用配置文件" class="headerlink" title="5. 使用配置文件">5. 使用配置文件</a></h2><p>我们存在于本地的配置文件（如 mysql 连接信息、vue 或 koa 的配置信息）无法使用 git 进行管理，所以我们要将这些环境配置信息存在一个单独的文件中进行管理，并且将它加入到 git 的忽略列表中，禁止这个文件被 git 控制。  </p>
<p>这里我们使用 node 中的 <code>dotenv</code> 来管理配置信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add dotenv</span><br><span class="line"><span class="built_in">touch</span> .env.template <span class="comment"># 创建 `.env.template` 配置信息模版文件</span></span><br></pre></td></tr></table></figure>

<p>将以下内容填入 <code>.env.template</code> 文件中</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署路径</span></span><br><span class="line"><span class="attr">BASE_URL</span> = /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端相关配置</span></span><br><span class="line"><span class="attr">SERVER_LISTEN_PORT</span> = <span class="number">8080</span> <span class="comment"># 服务端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL 连接信息</span></span><br><span class="line"><span class="attr">MYSQL_HOST</span> = localhost</span><br><span class="line"><span class="attr">MYSQL_USERNAME</span> = root</span><br><span class="line"><span class="attr">MYSQL_PASSWORD</span> =</span><br><span class="line"><span class="attr">MYSQL_DATABASE</span> = pic</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将该文件复制一份重命名为 <code>.env</code> 并将其加入 <code>.gitignore</code> 列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> .env.template .<span class="built_in">env</span></span><br><span class="line"><span class="built_in">echo</span> .<span class="built_in">env</span> &gt;&gt; .gitignore</span><br></pre></td></tr></table></figure>

<blockquote>
<p>模版文件将提交到 git 版本控制，该文件会对<strong>所有人可见</strong>。<br>所以在模版配置文件 <code>.env.template</code> 中不要包含私密信息，数据库连接信息请在 <code>.env</code> 文件中进行填写。
并且在发布时请提示用户将模版文件复制一份重命名为 <code>.env</code>。</p>
</blockquote>
<p>修改 <code>server/index.js</code></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ // 加载 dotenv 配置信息</span></span><br><span class="line"><span class="addition">+ require(&#x27;dotenv&#x27;).config()</span></span><br><span class="line"></span><br><span class="line">  // 连接 mysql</span><br><span class="line">  const mysql = require(&#x27;mysql&#x27;)</span><br><span class="line">  const connection = mysql.createConnection(&#123;</span><br><span class="line"><span class="deletion">-   host: &#x27;localhost&#x27;,</span></span><br><span class="line"><span class="deletion">-   user: &#x27;root&#x27;,</span></span><br><span class="line"><span class="deletion">-   password: &#x27;&#x27;,</span></span><br><span class="line"><span class="deletion">-   database: &#x27;pic&#x27;,</span></span><br><span class="line"><span class="addition">+   host: process.env.MYSQL_HOST || &#x27;localhost&#x27;,</span></span><br><span class="line"><span class="addition">+   user: process.env.MYSQL_USERNAME || &#x27;root&#x27;,</span></span><br><span class="line"><span class="addition">+   password: process.env.MYSQL_PASSWORD || &#x27;&#x27;,</span></span><br><span class="line"><span class="addition">+   database: process.env.MYSQL_DATABASE || &#x27;pic&#x27;,</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  connection.connect(err =&gt; &#123;</span><br><span class="line">    if (err) return console.error(err)</span><br><span class="line">    console.log(&#x27;mysql is connected successfully!&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 创建 koa 实例</span><br><span class="line">  const Koa = require(&#x27;koa&#x27;)</span><br><span class="line">  const app = new Koa()</span><br><span class="line"><span class="addition">+ const port = process.env.APP_SERVER_LISTEN_PORT || 3000</span></span><br><span class="line"></span><br><span class="line">  app.use(ctx =&gt; &#123;</span><br><span class="line">    ctx.body = &#x27;Hello TimeImage&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="deletion">- app.listen(3000, () =&gt; &#123;</span></span><br><span class="line"><span class="deletion">-   console.log(`Koa is running in port 3000 successfully!`)</span></span><br><span class="line"><span class="addition">+ app.listen(port, () =&gt; &#123;</span></span><br><span class="line"><span class="addition">+   console.log(`Koa is running in port $&#123;port&#125; successfully!`)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>经过这番操作，你的数据库就不会暴露给 git 仓库啦！</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结">小结</a></h1><p>到这里为止，我们的全栈应用程度的框架搭建篇就结束了，我们初步搭建好了 Vue 框架、koa server、mysql 和 配置文件管理。</p>
<p>当然，这样的目录结构现在时没有任何联系的，我们下一篇进行前端页面的编写。</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>ESLint</tag>
        <tag>Koa</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么有些网站要求使用 chrome 浏览器</title>
    <url>//2017/with-chrome-to-browse-the-web/</url>
    <content><![CDATA[<p><img src="//static.mutoe.com/2017/with-chrome-to-browse-the-web/fuck-ie.jpg" alt="fuck-ie"></p>
<p>你是不是经常浏览网页时遇到以上类似的画面, 叫你换个浏览器, 本开开开心心的浏览网页非要换浏览器, 让人特别不爽.</p>
<p>下面我来科普一下为什么网页开发者会这么做, 在普及这个知识前, 我先解读一下为什么 IE 浏览器在中国市场占有量这么大.</p>
<h2 id="IE6-“网上冲浪”"><a href="#IE6-“网上冲浪”" class="headerlink" title="IE6 “网上冲浪”">IE6 “网上冲浪”</a></h2><p>在 10 多年前的互联网时代, 人们都在用家喻户晓的 XP 系统, 那时系统自带的浏览器是 Internet Explorer 6.0 也就是我们俗称的 IE6, 那个时代人们的电脑还都是 256M 内存, 好一点的也就 512M, 玩的游戏还是魔兽红警 CS 和传奇. 在 IE 一统江山的时代, 很少有人觉得 IE 有什么不对劲.</p>
<p>今天 IE 被诟病得最多的速度和稳定性上面, 在那个时代都好像不是那么引人关注, 并不是说那个时代浏览器的速度和稳定性不重要, 而是因为没有可供对比的参照物.</p>
<p>然而过了两年左右, 中国网民成爆发式增长, 中国用户的浏览环境也普遍是 WinXP + IE6, 那时候也有 chrome 和 firefox 浏览器, 但是作为一个普通的网民又有谁肯花费精力去习惯另外一个浏览器呢.</p>
<span id="more"></span>

<p>就这样又持续了两三年左右, IE6 浏览器再也承受不了互联网庞大的数据业务量和华丽丽的页面渲染了, 网民们经常浏览网页就会莫名卡死 ( 有七八年网龄的同学应该亲身经历过 ).本人也是在这个终于抛弃了 IE 浏览器.</p>
<p>当时市场上有很多形形色色的浏览器, 比如火狐、世界之窗、搜狗浏览器和遨游浏览器, 这些浏览器用起来都比 IE 体验要好, 渐渐的 IE 在我的电脑里出现的次数越来越少了.</p>
<h3 id="第一次接触-chrome-小插曲"><a href="#第一次接触-chrome-小插曲" class="headerlink" title="第一次接触 chrome 小插曲">第一次接触 chrome 小插曲</a></h3><p><img src="//static.mutoe.com/2017/with-chrome-to-browse-the-web/chrome.png" alt="chrome"></p>
<p>第一次叫我安装 chrome 的时候, 我是拒绝的, 我是拒绝的!!! 他居然无声无息的安装在了不知道我电脑的哪个角落里 ( 用过 chrome 的应该都知道它的静默安装 ), 后来查找发现居然安装在我的 C 盘了, 这种情况怎么能忍?!</p>
<p>打开这个叫做 chrome 的浏览器, 面对一个简洁得甚至可以说简陋的界面, 实在有点无从下手的感觉.</p>
<p>简洁到什么程度呢, 没有菜单栏 ( 只有一个书签和扳手的按钮, 后来的版本就只剩下扳手了 ), 没有状态区, 没有标题栏 ( 也就是说, 在 chrome 浏览器上面, 你连它自己的名称 “chrome” 这几个字都找不到 ), 因为谷歌认为标题栏浪费空间, 干脆不要, 取而代之的是实用的标签栏.</p>
<p> 工具按钮也只有三个: 前进、后退、刷新 &#x2F; 停止 ( 需要的话, 还能再加一个主页按钮 ), 再加上地址栏, 这就是全部… 在那时习惯了IE浏览器后, 面对这种极简风格的设计, 实在觉得这浏览器差劲的要死. 关掉浏览器就卸载了.</p>
<p>到了 2011 年, 随着微软发布 IE9 浏览器和 win7 进入中国市场, 那些没有转移浏览习惯的用户终于能用上一个不再那么卡的 “新” 浏览器了 – IE9.</p>
<p>其实 IE9 确实解决了当时微软 IE 浏览器的尴尬, 但是因为 IE9 宣布不支持 XP 系统导致还是有许多顽固不化的用户还再使用 XP + IE6, 可以理解, 毕竟 256M 的老机器跑 WIN7 确实有点牵强.</p>
<p>2014 年 4 月, 微软宣布停止对 windows XP 支持和提供服务, 这意味着 XP 系统此后再也不会有安全补丁了, XP 系统也意味着寿终正寝. 2001 年 10 月出生的 WindowsXP 系统战斗了 12 年零 6 个月, 成为人类历史上服务时间最长的操作系统.</p>
<p>换句话说, 微软终于舍弃了 IE6 这块庞大的鸡肋, 随着浏览器市场的解放, 人们终于迎来了 HTML5 时代.</p>
<h2 id="HTML5-简洁-自由"><a href="#HTML5-简洁-自由" class="headerlink" title="HTML5 简洁 自由">HTML5 简洁 自由</a></h2><p>同年 10 月, 万维网联盟宣布发布 HTML5 标准规范, 第一次听说 HTML5 是 QQ 空间发布的新版 QQ 空间, 支持 HTML5 技术, 记不太清是什么时候了, 那时候我还不是一个程序猿, 应该是在此之前, 第一次进入新版 QQ 空间的时候眼前一亮</p>
<p><img src="//static.mutoe.com/2017/with-chrome-to-browse-the-web/qzone.jpg" alt="qzone"></p>
<p>有一种焕然一新的感觉, 感觉很清爽, 回想到第一次接触 chrome 浏览器, 那些所谓不适应没有菜单栏, 状态栏的, 菜单栏的按钮占地这么大, 平时又点过几次呢? 状态栏除了在网页卡住的时候会看一下, 又有什么时候会去关注呢? 真是讽刺.</p>
<p>说了这么多, 现在, 回到开始的话题, 稳定性. 印象中, 我用 firefox 浏览器几乎没有怎么崩溃过, 倒是会经常遇到一些网页要求使用 IE 浏览器访问 ( 某行网上银行系统 ), 当时特别不理解, IE 就要淘汰了的浏览器怎么还有有开发者支持使用, 现在明白了原来是银行支付系统因为安全性使用了 ActiveX 技术, 这种技术是微软的专利, 而当时银行支付系统的开发者没有那么多经历维护经常更新的 chrome 和 firefox 浏览器, 只能舍弃小众用户 ( 现在你已经不用担心了, 我们已经进入了 HTML5 时代 ).</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结">小结</a></h2><p>言而总之, 分两个层面来说我们的问题, 为什么有些网站要求使用 chrome 浏览器来访问呢</p>
<h3 id="用户层面"><a href="#用户层面" class="headerlink" title="用户层面">用户层面</a></h3><ul>
<li>稳定性高, 浏览网页很少会卡死;</li>
<li>界面清爽, 没有那么多无关浏览网页的杂项;</li>
<li>速度快, 在看到一些华丽的页面不会卡顿, 网页渲染速度也很快;</li>
</ul>
<h3 id="技术层面"><a href="#技术层面" class="headerlink" title="技术层面">技术层面</a></h3><ul>
<li>由于 IE 对网页渲染方式不同, 如果要兼容低版本 IE 浏览器会使网页开发者增加一倍以上的工作量;</li>
<li>HTML5 技术使网页规范化, 能够敏捷快速的开发出华丽优美的页面;</li>
<li>chrome 等 webkit 内核的浏览器解析脚本的速度远比 IE 内核的浏览器要快, 能够让页面更加生动而不必考虑太多性能的问题;</li>
</ul>
<p>了解了这些, 有时我们用 360 或者搜狗浏览器访问网页的时候也会提示我们更换为 chrome 浏览器, 其实大可不必, <strong>现在的搜狗浏览器和 360 浏览器都自带双内核</strong>, 当你遇到这个问题时只需要点击地址栏内右侧的兼容切换成极速即可, 浏览器会自动使用 webkit 内核重新将页面渲染一次, 也就不会出现要求更换浏览器的页面了.</p>
]]></content>
      <categories>
        <category>科普</category>
      </categories>
      <tags>
        <tag>Browser</tag>
      </tags>
  </entry>
</search>
